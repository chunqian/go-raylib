// THE AUTOGENERATED LICENSE. ALL THE RIGHTS ARE RESERVED BY ROBOTS.

// WARNING: This file has automatically been generated on Tue, 01 Jun 2021 11:29:38 CST.
// Code generated by https://git.io/c-for-go. DO NOT EDIT.

package raylib

/*
#include "../lib/raylib/src/raylib.h"
#include "../lib/raylib/src/raymath.h"
#include "../lib/raylib/src/easings.h"
#include <stdlib.h>
#include "cgo_helpers.h"
*/
import "C"
import (
	"runtime"
	"unsafe"
)

// InitWindow function as declared in src/raylib.h:899
func InitWindow(width int32, height int32, title string) {
	cwidth, _ := (C.int)(width), cgoAllocsUnknown
	cheight, _ := (C.int)(height), cgoAllocsUnknown
	title = safeString(title)
	ctitle, _ := unpackPCharString(title)
	C.InitWindow(cwidth, cheight, ctitle)
	runtime.KeepAlive(title)
}

// WindowShouldClose function as declared in src/raylib.h:900
func WindowShouldClose() bool {
	__ret := C.WindowShouldClose()
	__v := (bool)(__ret)
	return __v
}

// CloseWindow function as declared in src/raylib.h:901
func CloseWindow() {
	C.CloseWindow()
}

// IsWindowReady function as declared in src/raylib.h:902
func IsWindowReady() bool {
	__ret := C.IsWindowReady()
	__v := (bool)(__ret)
	return __v
}

// IsWindowFullscreen function as declared in src/raylib.h:903
func IsWindowFullscreen() bool {
	__ret := C.IsWindowFullscreen()
	__v := (bool)(__ret)
	return __v
}

// IsWindowHidden function as declared in src/raylib.h:904
func IsWindowHidden() bool {
	__ret := C.IsWindowHidden()
	__v := (bool)(__ret)
	return __v
}

// IsWindowMinimized function as declared in src/raylib.h:905
func IsWindowMinimized() bool {
	__ret := C.IsWindowMinimized()
	__v := (bool)(__ret)
	return __v
}

// IsWindowMaximized function as declared in src/raylib.h:906
func IsWindowMaximized() bool {
	__ret := C.IsWindowMaximized()
	__v := (bool)(__ret)
	return __v
}

// IsWindowFocused function as declared in src/raylib.h:907
func IsWindowFocused() bool {
	__ret := C.IsWindowFocused()
	__v := (bool)(__ret)
	return __v
}

// IsWindowResized function as declared in src/raylib.h:908
func IsWindowResized() bool {
	__ret := C.IsWindowResized()
	__v := (bool)(__ret)
	return __v
}

// IsWindowState function as declared in src/raylib.h:909
func IsWindowState(flag uint32) bool {
	cflag, _ := (C.uint)(flag), cgoAllocsUnknown
	__ret := C.IsWindowState(cflag)
	__v := (bool)(__ret)
	return __v
}

// SetWindowState function as declared in src/raylib.h:910
func SetWindowState(flags uint32) {
	cflags, _ := (C.uint)(flags), cgoAllocsUnknown
	C.SetWindowState(cflags)
}

// ClearWindowState function as declared in src/raylib.h:911
func ClearWindowState(flags uint32) {
	cflags, _ := (C.uint)(flags), cgoAllocsUnknown
	C.ClearWindowState(cflags)
}

// ToggleFullscreen function as declared in src/raylib.h:912
func ToggleFullscreen() {
	C.ToggleFullscreen()
}

// MaximizeWindow function as declared in src/raylib.h:913
func MaximizeWindow() {
	C.MaximizeWindow()
}

// MinimizeWindow function as declared in src/raylib.h:914
func MinimizeWindow() {
	C.MinimizeWindow()
}

// RestoreWindow function as declared in src/raylib.h:915
func RestoreWindow() {
	C.RestoreWindow()
}

// SetWindowIcon function as declared in src/raylib.h:916
func SetWindowIcon(image Image) {
	cimage, _ := *(*C.Image)(unsafe.Pointer(&image)), cgoAllocsUnknown
	C.SetWindowIcon(cimage)
}

// SetWindowTitle function as declared in src/raylib.h:917
func SetWindowTitle(title string) {
	title = safeString(title)
	ctitle, _ := unpackPCharString(title)
	C.SetWindowTitle(ctitle)
	runtime.KeepAlive(title)
}

// SetWindowPosition function as declared in src/raylib.h:918
func SetWindowPosition(x int32, y int32) {
	cx, _ := (C.int)(x), cgoAllocsUnknown
	cy, _ := (C.int)(y), cgoAllocsUnknown
	C.SetWindowPosition(cx, cy)
}

// SetWindowMonitor function as declared in src/raylib.h:919
func SetWindowMonitor(monitor int32) {
	cmonitor, _ := (C.int)(monitor), cgoAllocsUnknown
	C.SetWindowMonitor(cmonitor)
}

// SetWindowMinSize function as declared in src/raylib.h:920
func SetWindowMinSize(width int32, height int32) {
	cwidth, _ := (C.int)(width), cgoAllocsUnknown
	cheight, _ := (C.int)(height), cgoAllocsUnknown
	C.SetWindowMinSize(cwidth, cheight)
}

// SetWindowSize function as declared in src/raylib.h:921
func SetWindowSize(width int32, height int32) {
	cwidth, _ := (C.int)(width), cgoAllocsUnknown
	cheight, _ := (C.int)(height), cgoAllocsUnknown
	C.SetWindowSize(cwidth, cheight)
}

// GetWindowHandle function as declared in src/raylib.h:922
func GetWindowHandle() unsafe.Pointer {
	__ret := C.GetWindowHandle()
	__v := *(*unsafe.Pointer)(unsafe.Pointer(&__ret))
	return __v
}

// GetScreenWidth function as declared in src/raylib.h:923
func GetScreenWidth() int32 {
	__ret := C.GetScreenWidth()
	__v := (int32)(__ret)
	return __v
}

// GetScreenHeight function as declared in src/raylib.h:924
func GetScreenHeight() int32 {
	__ret := C.GetScreenHeight()
	__v := (int32)(__ret)
	return __v
}

// GetMonitorCount function as declared in src/raylib.h:925
func GetMonitorCount() int32 {
	__ret := C.GetMonitorCount()
	__v := (int32)(__ret)
	return __v
}

// GetCurrentMonitor function as declared in src/raylib.h:926
func GetCurrentMonitor() int32 {
	__ret := C.GetCurrentMonitor()
	__v := (int32)(__ret)
	return __v
}

// GetMonitorPosition function as declared in src/raylib.h:927
func GetMonitorPosition(monitor int32) Vector2 {
	cmonitor, _ := (C.int)(monitor), cgoAllocsUnknown
	__ret := C.GetMonitorPosition(cmonitor)
	__v := *newVector2Ref(unsafe.Pointer(&__ret)).convert()
	return __v
}

// GetMonitorWidth function as declared in src/raylib.h:928
func GetMonitorWidth(monitor int32) int32 {
	cmonitor, _ := (C.int)(monitor), cgoAllocsUnknown
	__ret := C.GetMonitorWidth(cmonitor)
	__v := (int32)(__ret)
	return __v
}

// GetMonitorHeight function as declared in src/raylib.h:929
func GetMonitorHeight(monitor int32) int32 {
	cmonitor, _ := (C.int)(monitor), cgoAllocsUnknown
	__ret := C.GetMonitorHeight(cmonitor)
	__v := (int32)(__ret)
	return __v
}

// GetMonitorPhysicalWidth function as declared in src/raylib.h:930
func GetMonitorPhysicalWidth(monitor int32) int32 {
	cmonitor, _ := (C.int)(monitor), cgoAllocsUnknown
	__ret := C.GetMonitorPhysicalWidth(cmonitor)
	__v := (int32)(__ret)
	return __v
}

// GetMonitorPhysicalHeight function as declared in src/raylib.h:931
func GetMonitorPhysicalHeight(monitor int32) int32 {
	cmonitor, _ := (C.int)(monitor), cgoAllocsUnknown
	__ret := C.GetMonitorPhysicalHeight(cmonitor)
	__v := (int32)(__ret)
	return __v
}

// GetMonitorRefreshRate function as declared in src/raylib.h:932
func GetMonitorRefreshRate(monitor int32) int32 {
	cmonitor, _ := (C.int)(monitor), cgoAllocsUnknown
	__ret := C.GetMonitorRefreshRate(cmonitor)
	__v := (int32)(__ret)
	return __v
}

// GetWindowPosition function as declared in src/raylib.h:933
func GetWindowPosition() Vector2 {
	__ret := C.GetWindowPosition()
	__v := *newVector2Ref(unsafe.Pointer(&__ret)).convert()
	return __v
}

// GetWindowScaleDPI function as declared in src/raylib.h:934
func GetWindowScaleDPI() Vector2 {
	__ret := C.GetWindowScaleDPI()
	__v := *newVector2Ref(unsafe.Pointer(&__ret)).convert()
	return __v
}

// GetMonitorName function as declared in src/raylib.h:935
func GetMonitorName(monitor int32) string {
	cmonitor, _ := (C.int)(monitor), cgoAllocsUnknown
	__ret := C.GetMonitorName(cmonitor)
	__v := packPCharString(__ret)
	return __v
}

// SetClipboardText function as declared in src/raylib.h:936
func SetClipboardText(text string) {
	text = safeString(text)
	ctext, _ := unpackPCharString(text)
	C.SetClipboardText(ctext)
	runtime.KeepAlive(text)
}

// GetClipboardText function as declared in src/raylib.h:937
func GetClipboardText() string {
	__ret := C.GetClipboardText()
	__v := packPCharString(__ret)
	return __v
}

// ShowCursor function as declared in src/raylib.h:940
func ShowCursor() {
	C.ShowCursor()
}

// HideCursor function as declared in src/raylib.h:941
func HideCursor() {
	C.HideCursor()
}

// IsCursorHidden function as declared in src/raylib.h:942
func IsCursorHidden() bool {
	__ret := C.IsCursorHidden()
	__v := (bool)(__ret)
	return __v
}

// EnableCursor function as declared in src/raylib.h:943
func EnableCursor() {
	C.EnableCursor()
}

// DisableCursor function as declared in src/raylib.h:944
func DisableCursor() {
	C.DisableCursor()
}

// IsCursorOnScreen function as declared in src/raylib.h:945
func IsCursorOnScreen() bool {
	__ret := C.IsCursorOnScreen()
	__v := (bool)(__ret)
	return __v
}

// ClearBackground function as declared in src/raylib.h:948
func ClearBackground(color Color) {
	ccolor, _ := *(*C.Color)(unsafe.Pointer(&color)), cgoAllocsUnknown
	C.ClearBackground(ccolor)
}

// BeginDrawing function as declared in src/raylib.h:949
func BeginDrawing() {
	C.BeginDrawing()
}

// EndDrawing function as declared in src/raylib.h:950
func EndDrawing() {
	C.EndDrawing()
}

// BeginMode2D function as declared in src/raylib.h:951
func BeginMode2D(camera Camera2D) {
	ccamera, _ := *(*C.Camera2D)(unsafe.Pointer(&camera)), cgoAllocsUnknown
	C.BeginMode2D(ccamera)
}

// EndMode2D function as declared in src/raylib.h:952
func EndMode2D() {
	C.EndMode2D()
}

// BeginMode3D function as declared in src/raylib.h:953
func BeginMode3D(camera Camera3D) {
	ccamera, _ := *(*C.Camera3D)(unsafe.Pointer(&camera)), cgoAllocsUnknown
	C.BeginMode3D(ccamera)
}

// EndMode3D function as declared in src/raylib.h:954
func EndMode3D() {
	C.EndMode3D()
}

// BeginTextureMode function as declared in src/raylib.h:955
func BeginTextureMode(target RenderTexture2D) {
	ctarget, _ := *(*C.RenderTexture2D)(unsafe.Pointer(&target)), cgoAllocsUnknown
	C.BeginTextureMode(ctarget)
}

// EndTextureMode function as declared in src/raylib.h:956
func EndTextureMode() {
	C.EndTextureMode()
}

// BeginScissorMode function as declared in src/raylib.h:957
func BeginScissorMode(x int32, y int32, width int32, height int32) {
	cx, _ := (C.int)(x), cgoAllocsUnknown
	cy, _ := (C.int)(y), cgoAllocsUnknown
	cwidth, _ := (C.int)(width), cgoAllocsUnknown
	cheight, _ := (C.int)(height), cgoAllocsUnknown
	C.BeginScissorMode(cx, cy, cwidth, cheight)
}

// EndScissorMode function as declared in src/raylib.h:958
func EndScissorMode() {
	C.EndScissorMode()
}

// GetMouseRay function as declared in src/raylib.h:961
func GetMouseRay(mousePosition Vector2, camera Camera) Ray {
	cmousePosition, _ := *(*C.Vector2)(unsafe.Pointer(&mousePosition)), cgoAllocsUnknown
	ccamera, _ := *(*C.Camera)(unsafe.Pointer(&camera)), cgoAllocsUnknown
	__ret := C.GetMouseRay(cmousePosition, ccamera)
	__v := *newRayRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// GetCameraMatrix function as declared in src/raylib.h:962
func GetCameraMatrix(camera Camera) Matrix {
	ccamera, _ := *(*C.Camera)(unsafe.Pointer(&camera)), cgoAllocsUnknown
	__ret := C.GetCameraMatrix(ccamera)
	__v := *newMatrixRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// GetCameraMatrix2D function as declared in src/raylib.h:963
func GetCameraMatrix2D(camera Camera2D) Matrix {
	ccamera, _ := *(*C.Camera2D)(unsafe.Pointer(&camera)), cgoAllocsUnknown
	__ret := C.GetCameraMatrix2D(ccamera)
	__v := *newMatrixRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// GetWorldToScreen function as declared in src/raylib.h:964
func GetWorldToScreen(position Vector3, camera Camera) Vector2 {
	cposition, _ := *(*C.Vector3)(unsafe.Pointer(&position)), cgoAllocsUnknown
	ccamera, _ := *(*C.Camera)(unsafe.Pointer(&camera)), cgoAllocsUnknown
	__ret := C.GetWorldToScreen(cposition, ccamera)
	__v := *newVector2Ref(unsafe.Pointer(&__ret)).convert()
	return __v
}

// GetWorldToScreenEx function as declared in src/raylib.h:965
func GetWorldToScreenEx(position Vector3, camera Camera, width int32, height int32) Vector2 {
	cposition, _ := *(*C.Vector3)(unsafe.Pointer(&position)), cgoAllocsUnknown
	ccamera, _ := *(*C.Camera)(unsafe.Pointer(&camera)), cgoAllocsUnknown
	cwidth, _ := (C.int)(width), cgoAllocsUnknown
	cheight, _ := (C.int)(height), cgoAllocsUnknown
	__ret := C.GetWorldToScreenEx(cposition, ccamera, cwidth, cheight)
	__v := *newVector2Ref(unsafe.Pointer(&__ret)).convert()
	return __v
}

// GetWorldToScreen2D function as declared in src/raylib.h:966
func GetWorldToScreen2D(position Vector2, camera Camera2D) Vector2 {
	cposition, _ := *(*C.Vector2)(unsafe.Pointer(&position)), cgoAllocsUnknown
	ccamera, _ := *(*C.Camera2D)(unsafe.Pointer(&camera)), cgoAllocsUnknown
	__ret := C.GetWorldToScreen2D(cposition, ccamera)
	__v := *newVector2Ref(unsafe.Pointer(&__ret)).convert()
	return __v
}

// GetScreenToWorld2D function as declared in src/raylib.h:967
func GetScreenToWorld2D(position Vector2, camera Camera2D) Vector2 {
	cposition, _ := *(*C.Vector2)(unsafe.Pointer(&position)), cgoAllocsUnknown
	ccamera, _ := *(*C.Camera2D)(unsafe.Pointer(&camera)), cgoAllocsUnknown
	__ret := C.GetScreenToWorld2D(cposition, ccamera)
	__v := *newVector2Ref(unsafe.Pointer(&__ret)).convert()
	return __v
}

// SetTargetFPS function as declared in src/raylib.h:970
func SetTargetFPS(fps int32) {
	cfps, _ := (C.int)(fps), cgoAllocsUnknown
	C.SetTargetFPS(cfps)
}

// GetFPS function as declared in src/raylib.h:971
func GetFPS() int32 {
	__ret := C.GetFPS()
	__v := (int32)(__ret)
	return __v
}

// GetFrameTime function as declared in src/raylib.h:972
func GetFrameTime() float32 {
	__ret := C.GetFrameTime()
	__v := (float32)(__ret)
	return __v
}

// GetTime function as declared in src/raylib.h:973
func GetTime() float64 {
	__ret := C.GetTime()
	__v := (float64)(__ret)
	return __v
}

// SetConfigFlags function as declared in src/raylib.h:976
func SetConfigFlags(flags uint32) {
	cflags, _ := (C.uint)(flags), cgoAllocsUnknown
	C.SetConfigFlags(cflags)
}

// MemAlloc function as declared in src/raylib.h:983
func MemAlloc(size int32) unsafe.Pointer {
	csize, _ := (C.int)(size), cgoAllocsUnknown
	__ret := C.MemAlloc(csize)
	__v := *(*unsafe.Pointer)(unsafe.Pointer(&__ret))
	return __v
}

// MemFree function as declared in src/raylib.h:984
func MemFree(ptr unsafe.Pointer) {
	cptr, _ := ptr, cgoAllocsUnknown
	C.MemFree(cptr)
}

// TakeScreenshot function as declared in src/raylib.h:985
func TakeScreenshot(fileName string) {
	fileName = safeString(fileName)
	cfileName, _ := unpackPCharString(fileName)
	C.TakeScreenshot(cfileName)
	runtime.KeepAlive(fileName)
}

// GetRandomValue function as declared in src/raylib.h:986
func GetRandomValue(min int32, max int32) int32 {
	cmin, _ := (C.int)(min), cgoAllocsUnknown
	cmax, _ := (C.int)(max), cgoAllocsUnknown
	__ret := C.GetRandomValue(cmin, cmax)
	__v := (int32)(__ret)
	return __v
}

// LoadFileData function as declared in src/raylib.h:989
func LoadFileData(fileName string, bytesRead *uint32) *byte {
	fileName = safeString(fileName)
	cfileName, _ := unpackPCharString(fileName)
	cbytesRead, _ := (*C.uint)(unsafe.Pointer(bytesRead)), cgoAllocsUnknown
	__ret := C.LoadFileData(cfileName, cbytesRead)
	runtime.KeepAlive(fileName)
	__v := *(**byte)(unsafe.Pointer(&__ret))
	return __v
}

// UnloadFileData function as declared in src/raylib.h:990
func UnloadFileData(data *byte) {
	cdata, _ := (*C.uchar)(unsafe.Pointer(data)), cgoAllocsUnknown
	C.UnloadFileData(cdata)
}

// SaveFileData function as declared in src/raylib.h:991
func SaveFileData(fileName string, data unsafe.Pointer, bytesToWrite uint32) bool {
	fileName = safeString(fileName)
	cfileName, _ := unpackPCharString(fileName)
	cdata, _ := data, cgoAllocsUnknown
	cbytesToWrite, _ := (C.uint)(bytesToWrite), cgoAllocsUnknown
	__ret := C.SaveFileData(cfileName, cdata, cbytesToWrite)
	runtime.KeepAlive(fileName)
	__v := (bool)(__ret)
	return __v
}

// LoadFileText function as declared in src/raylib.h:992
func LoadFileText(fileName string) *byte {
	fileName = safeString(fileName)
	cfileName, _ := unpackPCharString(fileName)
	__ret := C.LoadFileText(cfileName)
	runtime.KeepAlive(fileName)
	__v := *(**byte)(unsafe.Pointer(&__ret))
	return __v
}

// UnloadFileText function as declared in src/raylib.h:993
func UnloadFileText(text *byte) {
	ctext, _ := (*C.uchar)(unsafe.Pointer(text)), cgoAllocsUnknown
	C.UnloadFileText(ctext)
}

// SaveFileText function as declared in src/raylib.h:994
func SaveFileText(fileName string, text *byte) bool {
	fileName = safeString(fileName)
	cfileName, _ := unpackPCharString(fileName)
	ctext, _ := (*C.char)(unsafe.Pointer(text)), cgoAllocsUnknown
	__ret := C.SaveFileText(cfileName, ctext)
	runtime.KeepAlive(fileName)
	__v := (bool)(__ret)
	return __v
}

// FileExists function as declared in src/raylib.h:995
func FileExists(fileName string) bool {
	fileName = safeString(fileName)
	cfileName, _ := unpackPCharString(fileName)
	__ret := C.FileExists(cfileName)
	runtime.KeepAlive(fileName)
	__v := (bool)(__ret)
	return __v
}

// DirectoryExists function as declared in src/raylib.h:996
func DirectoryExists(dirPath string) bool {
	dirPath = safeString(dirPath)
	cdirPath, _ := unpackPCharString(dirPath)
	__ret := C.DirectoryExists(cdirPath)
	runtime.KeepAlive(dirPath)
	__v := (bool)(__ret)
	return __v
}

// IsFileExtension function as declared in src/raylib.h:997
func IsFileExtension(fileName string, ext string) bool {
	fileName = safeString(fileName)
	cfileName, _ := unpackPCharString(fileName)
	ext = safeString(ext)
	cext, _ := unpackPCharString(ext)
	__ret := C.IsFileExtension(cfileName, cext)
	runtime.KeepAlive(ext)
	runtime.KeepAlive(fileName)
	__v := (bool)(__ret)
	return __v
}

// GetFileExtension function as declared in src/raylib.h:998
func GetFileExtension(fileName string) string {
	fileName = safeString(fileName)
	cfileName, _ := unpackPCharString(fileName)
	__ret := C.GetFileExtension(cfileName)
	runtime.KeepAlive(fileName)
	__v := packPCharString(__ret)
	return __v
}

// GetFileName function as declared in src/raylib.h:999
func GetFileName(filePath string) string {
	filePath = safeString(filePath)
	cfilePath, _ := unpackPCharString(filePath)
	__ret := C.GetFileName(cfilePath)
	runtime.KeepAlive(filePath)
	__v := packPCharString(__ret)
	return __v
}

// GetFileNameWithoutExt function as declared in src/raylib.h:1000
func GetFileNameWithoutExt(filePath string) string {
	filePath = safeString(filePath)
	cfilePath, _ := unpackPCharString(filePath)
	__ret := C.GetFileNameWithoutExt(cfilePath)
	runtime.KeepAlive(filePath)
	__v := packPCharString(__ret)
	return __v
}

// GetDirectoryPath function as declared in src/raylib.h:1001
func GetDirectoryPath(filePath string) string {
	filePath = safeString(filePath)
	cfilePath, _ := unpackPCharString(filePath)
	__ret := C.GetDirectoryPath(cfilePath)
	runtime.KeepAlive(filePath)
	__v := packPCharString(__ret)
	return __v
}

// GetPrevDirectoryPath function as declared in src/raylib.h:1002
func GetPrevDirectoryPath(dirPath string) string {
	dirPath = safeString(dirPath)
	cdirPath, _ := unpackPCharString(dirPath)
	__ret := C.GetPrevDirectoryPath(cdirPath)
	runtime.KeepAlive(dirPath)
	__v := packPCharString(__ret)
	return __v
}

// GetWorkingDirectory function as declared in src/raylib.h:1003
func GetWorkingDirectory() string {
	__ret := C.GetWorkingDirectory()
	__v := packPCharString(__ret)
	return __v
}

// GetDirectoryFiles function as declared in src/raylib.h:1004
func GetDirectoryFiles(dirPath string, count *int32) **byte {
	dirPath = safeString(dirPath)
	cdirPath, _ := unpackPCharString(dirPath)
	ccount, _ := (*C.int)(unsafe.Pointer(count)), cgoAllocsUnknown
	__ret := C.GetDirectoryFiles(cdirPath, ccount)
	runtime.KeepAlive(dirPath)
	__v := *(***byte)(unsafe.Pointer(&__ret))
	return __v
}

// ClearDirectoryFiles function as declared in src/raylib.h:1005
func ClearDirectoryFiles() {
	C.ClearDirectoryFiles()
}

// ChangeDirectory function as declared in src/raylib.h:1006
func ChangeDirectory(dir string) bool {
	dir = safeString(dir)
	cdir, _ := unpackPCharString(dir)
	__ret := C.ChangeDirectory(cdir)
	runtime.KeepAlive(dir)
	__v := (bool)(__ret)
	return __v
}

// IsFileDropped function as declared in src/raylib.h:1007
func IsFileDropped() bool {
	__ret := C.IsFileDropped()
	__v := (bool)(__ret)
	return __v
}

// GetDroppedFiles function as declared in src/raylib.h:1008
func GetDroppedFiles(count *int32) **byte {
	ccount, _ := (*C.int)(unsafe.Pointer(count)), cgoAllocsUnknown
	__ret := C.GetDroppedFiles(ccount)
	__v := *(***byte)(unsafe.Pointer(&__ret))
	return __v
}

// ClearDroppedFiles function as declared in src/raylib.h:1009
func ClearDroppedFiles() {
	C.ClearDroppedFiles()
}

// GetFileModTime function as declared in src/raylib.h:1010
func GetFileModTime(fileName string) int {
	fileName = safeString(fileName)
	cfileName, _ := unpackPCharString(fileName)
	__ret := C.GetFileModTime(cfileName)
	runtime.KeepAlive(fileName)
	__v := (int)(__ret)
	return __v
}

// CompressData function as declared in src/raylib.h:1012
func CompressData(data *byte, dataLength int32, compDataLength *int32) *byte {
	cdata, _ := (*C.uchar)(unsafe.Pointer(data)), cgoAllocsUnknown
	cdataLength, _ := (C.int)(dataLength), cgoAllocsUnknown
	ccompDataLength, _ := (*C.int)(unsafe.Pointer(compDataLength)), cgoAllocsUnknown
	__ret := C.CompressData(cdata, cdataLength, ccompDataLength)
	__v := *(**byte)(unsafe.Pointer(&__ret))
	return __v
}

// DecompressData function as declared in src/raylib.h:1013
func DecompressData(compData *byte, compDataLength int32, dataLength *int32) *byte {
	ccompData, _ := (*C.uchar)(unsafe.Pointer(compData)), cgoAllocsUnknown
	ccompDataLength, _ := (C.int)(compDataLength), cgoAllocsUnknown
	cdataLength, _ := (*C.int)(unsafe.Pointer(dataLength)), cgoAllocsUnknown
	__ret := C.DecompressData(ccompData, ccompDataLength, cdataLength)
	__v := *(**byte)(unsafe.Pointer(&__ret))
	return __v
}

// SaveStorageValue function as declared in src/raylib.h:1016
func SaveStorageValue(position uint32, value int32) bool {
	cposition, _ := (C.uint)(position), cgoAllocsUnknown
	cvalue, _ := (C.int)(value), cgoAllocsUnknown
	__ret := C.SaveStorageValue(cposition, cvalue)
	__v := (bool)(__ret)
	return __v
}

// LoadStorageValue function as declared in src/raylib.h:1017
func LoadStorageValue(position uint32) int32 {
	cposition, _ := (C.uint)(position), cgoAllocsUnknown
	__ret := C.LoadStorageValue(cposition)
	__v := (int32)(__ret)
	return __v
}

// OpenURL function as declared in src/raylib.h:1019
func OpenURL(url string) {
	url = safeString(url)
	curl, _ := unpackPCharString(url)
	C.OpenURL(curl)
	runtime.KeepAlive(url)
}

// IsKeyPressed function as declared in src/raylib.h:1026
func IsKeyPressed(key int32) bool {
	ckey, _ := (C.int)(key), cgoAllocsUnknown
	__ret := C.IsKeyPressed(ckey)
	__v := (bool)(__ret)
	return __v
}

// IsKeyDown function as declared in src/raylib.h:1027
func IsKeyDown(key int32) bool {
	ckey, _ := (C.int)(key), cgoAllocsUnknown
	__ret := C.IsKeyDown(ckey)
	__v := (bool)(__ret)
	return __v
}

// IsKeyReleased function as declared in src/raylib.h:1028
func IsKeyReleased(key int32) bool {
	ckey, _ := (C.int)(key), cgoAllocsUnknown
	__ret := C.IsKeyReleased(ckey)
	__v := (bool)(__ret)
	return __v
}

// IsKeyUp function as declared in src/raylib.h:1029
func IsKeyUp(key int32) bool {
	ckey, _ := (C.int)(key), cgoAllocsUnknown
	__ret := C.IsKeyUp(ckey)
	__v := (bool)(__ret)
	return __v
}

// SetExitKey function as declared in src/raylib.h:1030
func SetExitKey(key int32) {
	ckey, _ := (C.int)(key), cgoAllocsUnknown
	C.SetExitKey(ckey)
}

// GetKeyPressed function as declared in src/raylib.h:1031
func GetKeyPressed() int32 {
	__ret := C.GetKeyPressed()
	__v := (int32)(__ret)
	return __v
}

// GetCharPressed function as declared in src/raylib.h:1032
func GetCharPressed() int32 {
	__ret := C.GetCharPressed()
	__v := (int32)(__ret)
	return __v
}

// IsGamepadAvailable function as declared in src/raylib.h:1035
func IsGamepadAvailable(gamepad int32) bool {
	cgamepad, _ := (C.int)(gamepad), cgoAllocsUnknown
	__ret := C.IsGamepadAvailable(cgamepad)
	__v := (bool)(__ret)
	return __v
}

// IsGamepadName function as declared in src/raylib.h:1036
func IsGamepadName(gamepad int32, name string) bool {
	cgamepad, _ := (C.int)(gamepad), cgoAllocsUnknown
	name = safeString(name)
	cname, _ := unpackPCharString(name)
	__ret := C.IsGamepadName(cgamepad, cname)
	runtime.KeepAlive(name)
	__v := (bool)(__ret)
	return __v
}

// GetGamepadName function as declared in src/raylib.h:1037
func GetGamepadName(gamepad int32) string {
	cgamepad, _ := (C.int)(gamepad), cgoAllocsUnknown
	__ret := C.GetGamepadName(cgamepad)
	__v := packPCharString(__ret)
	return __v
}

// IsGamepadButtonPressed function as declared in src/raylib.h:1038
func IsGamepadButtonPressed(gamepad int32, button int32) bool {
	cgamepad, _ := (C.int)(gamepad), cgoAllocsUnknown
	cbutton, _ := (C.int)(button), cgoAllocsUnknown
	__ret := C.IsGamepadButtonPressed(cgamepad, cbutton)
	__v := (bool)(__ret)
	return __v
}

// IsGamepadButtonDown function as declared in src/raylib.h:1039
func IsGamepadButtonDown(gamepad int32, button int32) bool {
	cgamepad, _ := (C.int)(gamepad), cgoAllocsUnknown
	cbutton, _ := (C.int)(button), cgoAllocsUnknown
	__ret := C.IsGamepadButtonDown(cgamepad, cbutton)
	__v := (bool)(__ret)
	return __v
}

// IsGamepadButtonReleased function as declared in src/raylib.h:1040
func IsGamepadButtonReleased(gamepad int32, button int32) bool {
	cgamepad, _ := (C.int)(gamepad), cgoAllocsUnknown
	cbutton, _ := (C.int)(button), cgoAllocsUnknown
	__ret := C.IsGamepadButtonReleased(cgamepad, cbutton)
	__v := (bool)(__ret)
	return __v
}

// IsGamepadButtonUp function as declared in src/raylib.h:1041
func IsGamepadButtonUp(gamepad int32, button int32) bool {
	cgamepad, _ := (C.int)(gamepad), cgoAllocsUnknown
	cbutton, _ := (C.int)(button), cgoAllocsUnknown
	__ret := C.IsGamepadButtonUp(cgamepad, cbutton)
	__v := (bool)(__ret)
	return __v
}

// GetGamepadButtonPressed function as declared in src/raylib.h:1042
func GetGamepadButtonPressed() int32 {
	__ret := C.GetGamepadButtonPressed()
	__v := (int32)(__ret)
	return __v
}

// GetGamepadAxisCount function as declared in src/raylib.h:1043
func GetGamepadAxisCount(gamepad int32) int32 {
	cgamepad, _ := (C.int)(gamepad), cgoAllocsUnknown
	__ret := C.GetGamepadAxisCount(cgamepad)
	__v := (int32)(__ret)
	return __v
}

// GetGamepadAxisMovement function as declared in src/raylib.h:1044
func GetGamepadAxisMovement(gamepad int32, axis int32) float32 {
	cgamepad, _ := (C.int)(gamepad), cgoAllocsUnknown
	caxis, _ := (C.int)(axis), cgoAllocsUnknown
	__ret := C.GetGamepadAxisMovement(cgamepad, caxis)
	__v := (float32)(__ret)
	return __v
}

// IsMouseButtonPressed function as declared in src/raylib.h:1047
func IsMouseButtonPressed(button int32) bool {
	cbutton, _ := (C.int)(button), cgoAllocsUnknown
	__ret := C.IsMouseButtonPressed(cbutton)
	__v := (bool)(__ret)
	return __v
}

// IsMouseButtonDown function as declared in src/raylib.h:1048
func IsMouseButtonDown(button int32) bool {
	cbutton, _ := (C.int)(button), cgoAllocsUnknown
	__ret := C.IsMouseButtonDown(cbutton)
	__v := (bool)(__ret)
	return __v
}

// IsMouseButtonReleased function as declared in src/raylib.h:1049
func IsMouseButtonReleased(button int32) bool {
	cbutton, _ := (C.int)(button), cgoAllocsUnknown
	__ret := C.IsMouseButtonReleased(cbutton)
	__v := (bool)(__ret)
	return __v
}

// IsMouseButtonUp function as declared in src/raylib.h:1050
func IsMouseButtonUp(button int32) bool {
	cbutton, _ := (C.int)(button), cgoAllocsUnknown
	__ret := C.IsMouseButtonUp(cbutton)
	__v := (bool)(__ret)
	return __v
}

// GetMouseX function as declared in src/raylib.h:1051
func GetMouseX() int32 {
	__ret := C.GetMouseX()
	__v := (int32)(__ret)
	return __v
}

// GetMouseY function as declared in src/raylib.h:1052
func GetMouseY() int32 {
	__ret := C.GetMouseY()
	__v := (int32)(__ret)
	return __v
}

// GetMousePosition function as declared in src/raylib.h:1053
func GetMousePosition() Vector2 {
	__ret := C.GetMousePosition()
	__v := *newVector2Ref(unsafe.Pointer(&__ret)).convert()
	return __v
}

// SetMousePosition function as declared in src/raylib.h:1054
func SetMousePosition(x int32, y int32) {
	cx, _ := (C.int)(x), cgoAllocsUnknown
	cy, _ := (C.int)(y), cgoAllocsUnknown
	C.SetMousePosition(cx, cy)
}

// SetMouseOffset function as declared in src/raylib.h:1055
func SetMouseOffset(offsetX int32, offsetY int32) {
	coffsetX, _ := (C.int)(offsetX), cgoAllocsUnknown
	coffsetY, _ := (C.int)(offsetY), cgoAllocsUnknown
	C.SetMouseOffset(coffsetX, coffsetY)
}

// SetMouseScale function as declared in src/raylib.h:1056
func SetMouseScale(scaleX float32, scaleY float32) {
	cscaleX, _ := (C.float)(scaleX), cgoAllocsUnknown
	cscaleY, _ := (C.float)(scaleY), cgoAllocsUnknown
	C.SetMouseScale(cscaleX, cscaleY)
}

// GetMouseWheelMove function as declared in src/raylib.h:1057
func GetMouseWheelMove() float32 {
	__ret := C.GetMouseWheelMove()
	__v := (float32)(__ret)
	return __v
}

// GetMouseCursor function as declared in src/raylib.h:1058
func GetMouseCursor() int32 {
	__ret := C.GetMouseCursor()
	__v := (int32)(__ret)
	return __v
}

// SetMouseCursor function as declared in src/raylib.h:1059
func SetMouseCursor(cursor int32) {
	ccursor, _ := (C.int)(cursor), cgoAllocsUnknown
	C.SetMouseCursor(ccursor)
}

// GetTouchX function as declared in src/raylib.h:1062
func GetTouchX() int32 {
	__ret := C.GetTouchX()
	__v := (int32)(__ret)
	return __v
}

// GetTouchY function as declared in src/raylib.h:1063
func GetTouchY() int32 {
	__ret := C.GetTouchY()
	__v := (int32)(__ret)
	return __v
}

// GetTouchPosition function as declared in src/raylib.h:1064
func GetTouchPosition(index int32) Vector2 {
	cindex, _ := (C.int)(index), cgoAllocsUnknown
	__ret := C.GetTouchPosition(cindex)
	__v := *newVector2Ref(unsafe.Pointer(&__ret)).convert()
	return __v
}

// SetGesturesEnabled function as declared in src/raylib.h:1069
func SetGesturesEnabled(gestureFlags uint32) {
	cgestureFlags, _ := (C.uint)(gestureFlags), cgoAllocsUnknown
	C.SetGesturesEnabled(cgestureFlags)
}

// IsGestureDetected function as declared in src/raylib.h:1070
func IsGestureDetected(gesture int32) bool {
	cgesture, _ := (C.int)(gesture), cgoAllocsUnknown
	__ret := C.IsGestureDetected(cgesture)
	__v := (bool)(__ret)
	return __v
}

// GetGestureDetected function as declared in src/raylib.h:1071
func GetGestureDetected() int32 {
	__ret := C.GetGestureDetected()
	__v := (int32)(__ret)
	return __v
}

// GetTouchPointsCount function as declared in src/raylib.h:1072
func GetTouchPointsCount() int32 {
	__ret := C.GetTouchPointsCount()
	__v := (int32)(__ret)
	return __v
}

// GetGestureHoldDuration function as declared in src/raylib.h:1073
func GetGestureHoldDuration() float32 {
	__ret := C.GetGestureHoldDuration()
	__v := (float32)(__ret)
	return __v
}

// GetGestureDragVector function as declared in src/raylib.h:1074
func GetGestureDragVector() Vector2 {
	__ret := C.GetGestureDragVector()
	__v := *newVector2Ref(unsafe.Pointer(&__ret)).convert()
	return __v
}

// GetGestureDragAngle function as declared in src/raylib.h:1075
func GetGestureDragAngle() float32 {
	__ret := C.GetGestureDragAngle()
	__v := (float32)(__ret)
	return __v
}

// GetGesturePinchVector function as declared in src/raylib.h:1076
func GetGesturePinchVector() Vector2 {
	__ret := C.GetGesturePinchVector()
	__v := *newVector2Ref(unsafe.Pointer(&__ret)).convert()
	return __v
}

// GetGesturePinchAngle function as declared in src/raylib.h:1077
func GetGesturePinchAngle() float32 {
	__ret := C.GetGesturePinchAngle()
	__v := (float32)(__ret)
	return __v
}

// SetCameraMode function as declared in src/raylib.h:1082
func SetCameraMode(camera Camera, mode int32) {
	ccamera, _ := *(*C.Camera)(unsafe.Pointer(&camera)), cgoAllocsUnknown
	cmode, _ := (C.int)(mode), cgoAllocsUnknown
	C.SetCameraMode(ccamera, cmode)
}

// UpdateCamera function as declared in src/raylib.h:1083
func UpdateCamera(camera *Camera) {
	ccamera, _ := (*C.Camera)(unsafe.Pointer(camera)), cgoAllocsUnknown
	C.UpdateCamera(ccamera)
}

// SetCameraPanControl function as declared in src/raylib.h:1085
func SetCameraPanControl(keyPan int32) {
	ckeyPan, _ := (C.int)(keyPan), cgoAllocsUnknown
	C.SetCameraPanControl(ckeyPan)
}

// SetCameraAltControl function as declared in src/raylib.h:1086
func SetCameraAltControl(keyAlt int32) {
	ckeyAlt, _ := (C.int)(keyAlt), cgoAllocsUnknown
	C.SetCameraAltControl(ckeyAlt)
}

// SetCameraSmoothZoomControl function as declared in src/raylib.h:1087
func SetCameraSmoothZoomControl(keySmoothZoom int32) {
	ckeySmoothZoom, _ := (C.int)(keySmoothZoom), cgoAllocsUnknown
	C.SetCameraSmoothZoomControl(ckeySmoothZoom)
}

// SetCameraMoveControls function as declared in src/raylib.h:1088
func SetCameraMoveControls(keyFront int32, keyBack int32, keyRight int32, keyLeft int32, keyUp int32, keyDown int32) {
	ckeyFront, _ := (C.int)(keyFront), cgoAllocsUnknown
	ckeyBack, _ := (C.int)(keyBack), cgoAllocsUnknown
	ckeyRight, _ := (C.int)(keyRight), cgoAllocsUnknown
	ckeyLeft, _ := (C.int)(keyLeft), cgoAllocsUnknown
	ckeyUp, _ := (C.int)(keyUp), cgoAllocsUnknown
	ckeyDown, _ := (C.int)(keyDown), cgoAllocsUnknown
	C.SetCameraMoveControls(ckeyFront, ckeyBack, ckeyRight, ckeyLeft, ckeyUp, ckeyDown)
}

// DrawPixel function as declared in src/raylib.h:1095
func DrawPixel(posX int32, posY int32, color Color) {
	cposX, _ := (C.int)(posX), cgoAllocsUnknown
	cposY, _ := (C.int)(posY), cgoAllocsUnknown
	ccolor, _ := *(*C.Color)(unsafe.Pointer(&color)), cgoAllocsUnknown
	C.DrawPixel(cposX, cposY, ccolor)
}

// DrawPixelV function as declared in src/raylib.h:1096
func DrawPixelV(position Vector2, color Color) {
	cposition, _ := *(*C.Vector2)(unsafe.Pointer(&position)), cgoAllocsUnknown
	ccolor, _ := *(*C.Color)(unsafe.Pointer(&color)), cgoAllocsUnknown
	C.DrawPixelV(cposition, ccolor)
}

// DrawLine function as declared in src/raylib.h:1097
func DrawLine(startPosX int32, startPosY int32, endPosX int32, endPosY int32, color Color) {
	cstartPosX, _ := (C.int)(startPosX), cgoAllocsUnknown
	cstartPosY, _ := (C.int)(startPosY), cgoAllocsUnknown
	cendPosX, _ := (C.int)(endPosX), cgoAllocsUnknown
	cendPosY, _ := (C.int)(endPosY), cgoAllocsUnknown
	ccolor, _ := *(*C.Color)(unsafe.Pointer(&color)), cgoAllocsUnknown
	C.DrawLine(cstartPosX, cstartPosY, cendPosX, cendPosY, ccolor)
}

// DrawLineV function as declared in src/raylib.h:1098
func DrawLineV(startPos Vector2, endPos Vector2, color Color) {
	cstartPos, _ := *(*C.Vector2)(unsafe.Pointer(&startPos)), cgoAllocsUnknown
	cendPos, _ := *(*C.Vector2)(unsafe.Pointer(&endPos)), cgoAllocsUnknown
	ccolor, _ := *(*C.Color)(unsafe.Pointer(&color)), cgoAllocsUnknown
	C.DrawLineV(cstartPos, cendPos, ccolor)
}

// DrawLineEx function as declared in src/raylib.h:1099
func DrawLineEx(startPos Vector2, endPos Vector2, thick float32, color Color) {
	cstartPos, _ := *(*C.Vector2)(unsafe.Pointer(&startPos)), cgoAllocsUnknown
	cendPos, _ := *(*C.Vector2)(unsafe.Pointer(&endPos)), cgoAllocsUnknown
	cthick, _ := (C.float)(thick), cgoAllocsUnknown
	ccolor, _ := *(*C.Color)(unsafe.Pointer(&color)), cgoAllocsUnknown
	C.DrawLineEx(cstartPos, cendPos, cthick, ccolor)
}

// DrawLineBezier function as declared in src/raylib.h:1100
func DrawLineBezier(startPos Vector2, endPos Vector2, thick float32, color Color) {
	cstartPos, _ := *(*C.Vector2)(unsafe.Pointer(&startPos)), cgoAllocsUnknown
	cendPos, _ := *(*C.Vector2)(unsafe.Pointer(&endPos)), cgoAllocsUnknown
	cthick, _ := (C.float)(thick), cgoAllocsUnknown
	ccolor, _ := *(*C.Color)(unsafe.Pointer(&color)), cgoAllocsUnknown
	C.DrawLineBezier(cstartPos, cendPos, cthick, ccolor)
}

// DrawLineBezierQuad function as declared in src/raylib.h:1101
func DrawLineBezierQuad(startPos Vector2, endPos Vector2, controlPos Vector2, thick float32, color Color) {
	cstartPos, _ := *(*C.Vector2)(unsafe.Pointer(&startPos)), cgoAllocsUnknown
	cendPos, _ := *(*C.Vector2)(unsafe.Pointer(&endPos)), cgoAllocsUnknown
	ccontrolPos, _ := *(*C.Vector2)(unsafe.Pointer(&controlPos)), cgoAllocsUnknown
	cthick, _ := (C.float)(thick), cgoAllocsUnknown
	ccolor, _ := *(*C.Color)(unsafe.Pointer(&color)), cgoAllocsUnknown
	C.DrawLineBezierQuad(cstartPos, cendPos, ccontrolPos, cthick, ccolor)
}

// DrawLineStrip function as declared in src/raylib.h:1102
func DrawLineStrip(points *Vector2, pointsCount int32, color Color) {
	cpoints, _ := (*C.Vector2)(unsafe.Pointer(points)), cgoAllocsUnknown
	cpointsCount, _ := (C.int)(pointsCount), cgoAllocsUnknown
	ccolor, _ := *(*C.Color)(unsafe.Pointer(&color)), cgoAllocsUnknown
	C.DrawLineStrip(cpoints, cpointsCount, ccolor)
}

// DrawCircle function as declared in src/raylib.h:1103
func DrawCircle(centerX int32, centerY int32, radius float32, color Color) {
	ccenterX, _ := (C.int)(centerX), cgoAllocsUnknown
	ccenterY, _ := (C.int)(centerY), cgoAllocsUnknown
	cradius, _ := (C.float)(radius), cgoAllocsUnknown
	ccolor, _ := *(*C.Color)(unsafe.Pointer(&color)), cgoAllocsUnknown
	C.DrawCircle(ccenterX, ccenterY, cradius, ccolor)
}

// DrawCircleSector function as declared in src/raylib.h:1104
func DrawCircleSector(center Vector2, radius float32, startAngle int32, endAngle int32, segments int32, color Color) {
	ccenter, _ := *(*C.Vector2)(unsafe.Pointer(&center)), cgoAllocsUnknown
	cradius, _ := (C.float)(radius), cgoAllocsUnknown
	cstartAngle, _ := (C.int)(startAngle), cgoAllocsUnknown
	cendAngle, _ := (C.int)(endAngle), cgoAllocsUnknown
	csegments, _ := (C.int)(segments), cgoAllocsUnknown
	ccolor, _ := *(*C.Color)(unsafe.Pointer(&color)), cgoAllocsUnknown
	C.DrawCircleSector(ccenter, cradius, cstartAngle, cendAngle, csegments, ccolor)
}

// DrawCircleSectorLines function as declared in src/raylib.h:1105
func DrawCircleSectorLines(center Vector2, radius float32, startAngle int32, endAngle int32, segments int32, color Color) {
	ccenter, _ := *(*C.Vector2)(unsafe.Pointer(&center)), cgoAllocsUnknown
	cradius, _ := (C.float)(radius), cgoAllocsUnknown
	cstartAngle, _ := (C.int)(startAngle), cgoAllocsUnknown
	cendAngle, _ := (C.int)(endAngle), cgoAllocsUnknown
	csegments, _ := (C.int)(segments), cgoAllocsUnknown
	ccolor, _ := *(*C.Color)(unsafe.Pointer(&color)), cgoAllocsUnknown
	C.DrawCircleSectorLines(ccenter, cradius, cstartAngle, cendAngle, csegments, ccolor)
}

// DrawCircleGradient function as declared in src/raylib.h:1106
func DrawCircleGradient(centerX int32, centerY int32, radius float32, color1 Color, color2 Color) {
	ccenterX, _ := (C.int)(centerX), cgoAllocsUnknown
	ccenterY, _ := (C.int)(centerY), cgoAllocsUnknown
	cradius, _ := (C.float)(radius), cgoAllocsUnknown
	ccolor1, _ := *(*C.Color)(unsafe.Pointer(&color1)), cgoAllocsUnknown
	ccolor2, _ := *(*C.Color)(unsafe.Pointer(&color2)), cgoAllocsUnknown
	C.DrawCircleGradient(ccenterX, ccenterY, cradius, ccolor1, ccolor2)
}

// DrawCircleV function as declared in src/raylib.h:1107
func DrawCircleV(center Vector2, radius float32, color Color) {
	ccenter, _ := *(*C.Vector2)(unsafe.Pointer(&center)), cgoAllocsUnknown
	cradius, _ := (C.float)(radius), cgoAllocsUnknown
	ccolor, _ := *(*C.Color)(unsafe.Pointer(&color)), cgoAllocsUnknown
	C.DrawCircleV(ccenter, cradius, ccolor)
}

// DrawCircleLines function as declared in src/raylib.h:1108
func DrawCircleLines(centerX int32, centerY int32, radius float32, color Color) {
	ccenterX, _ := (C.int)(centerX), cgoAllocsUnknown
	ccenterY, _ := (C.int)(centerY), cgoAllocsUnknown
	cradius, _ := (C.float)(radius), cgoAllocsUnknown
	ccolor, _ := *(*C.Color)(unsafe.Pointer(&color)), cgoAllocsUnknown
	C.DrawCircleLines(ccenterX, ccenterY, cradius, ccolor)
}

// DrawEllipse function as declared in src/raylib.h:1109
func DrawEllipse(centerX int32, centerY int32, radiusH float32, radiusV float32, color Color) {
	ccenterX, _ := (C.int)(centerX), cgoAllocsUnknown
	ccenterY, _ := (C.int)(centerY), cgoAllocsUnknown
	cradiusH, _ := (C.float)(radiusH), cgoAllocsUnknown
	cradiusV, _ := (C.float)(radiusV), cgoAllocsUnknown
	ccolor, _ := *(*C.Color)(unsafe.Pointer(&color)), cgoAllocsUnknown
	C.DrawEllipse(ccenterX, ccenterY, cradiusH, cradiusV, ccolor)
}

// DrawEllipseLines function as declared in src/raylib.h:1110
func DrawEllipseLines(centerX int32, centerY int32, radiusH float32, radiusV float32, color Color) {
	ccenterX, _ := (C.int)(centerX), cgoAllocsUnknown
	ccenterY, _ := (C.int)(centerY), cgoAllocsUnknown
	cradiusH, _ := (C.float)(radiusH), cgoAllocsUnknown
	cradiusV, _ := (C.float)(radiusV), cgoAllocsUnknown
	ccolor, _ := *(*C.Color)(unsafe.Pointer(&color)), cgoAllocsUnknown
	C.DrawEllipseLines(ccenterX, ccenterY, cradiusH, cradiusV, ccolor)
}

// DrawRing function as declared in src/raylib.h:1111
func DrawRing(center Vector2, innerRadius float32, outerRadius float32, startAngle int32, endAngle int32, segments int32, color Color) {
	ccenter, _ := *(*C.Vector2)(unsafe.Pointer(&center)), cgoAllocsUnknown
	cinnerRadius, _ := (C.float)(innerRadius), cgoAllocsUnknown
	couterRadius, _ := (C.float)(outerRadius), cgoAllocsUnknown
	cstartAngle, _ := (C.int)(startAngle), cgoAllocsUnknown
	cendAngle, _ := (C.int)(endAngle), cgoAllocsUnknown
	csegments, _ := (C.int)(segments), cgoAllocsUnknown
	ccolor, _ := *(*C.Color)(unsafe.Pointer(&color)), cgoAllocsUnknown
	C.DrawRing(ccenter, cinnerRadius, couterRadius, cstartAngle, cendAngle, csegments, ccolor)
}

// DrawRingLines function as declared in src/raylib.h:1112
func DrawRingLines(center Vector2, innerRadius float32, outerRadius float32, startAngle int32, endAngle int32, segments int32, color Color) {
	ccenter, _ := *(*C.Vector2)(unsafe.Pointer(&center)), cgoAllocsUnknown
	cinnerRadius, _ := (C.float)(innerRadius), cgoAllocsUnknown
	couterRadius, _ := (C.float)(outerRadius), cgoAllocsUnknown
	cstartAngle, _ := (C.int)(startAngle), cgoAllocsUnknown
	cendAngle, _ := (C.int)(endAngle), cgoAllocsUnknown
	csegments, _ := (C.int)(segments), cgoAllocsUnknown
	ccolor, _ := *(*C.Color)(unsafe.Pointer(&color)), cgoAllocsUnknown
	C.DrawRingLines(ccenter, cinnerRadius, couterRadius, cstartAngle, cendAngle, csegments, ccolor)
}

// DrawRectangle function as declared in src/raylib.h:1113
func DrawRectangle(posX int32, posY int32, width int32, height int32, color Color) {
	cposX, _ := (C.int)(posX), cgoAllocsUnknown
	cposY, _ := (C.int)(posY), cgoAllocsUnknown
	cwidth, _ := (C.int)(width), cgoAllocsUnknown
	cheight, _ := (C.int)(height), cgoAllocsUnknown
	ccolor, _ := *(*C.Color)(unsafe.Pointer(&color)), cgoAllocsUnknown
	C.DrawRectangle(cposX, cposY, cwidth, cheight, ccolor)
}

// DrawRectangleV function as declared in src/raylib.h:1114
func DrawRectangleV(position Vector2, size Vector2, color Color) {
	cposition, _ := *(*C.Vector2)(unsafe.Pointer(&position)), cgoAllocsUnknown
	csize, _ := *(*C.Vector2)(unsafe.Pointer(&size)), cgoAllocsUnknown
	ccolor, _ := *(*C.Color)(unsafe.Pointer(&color)), cgoAllocsUnknown
	C.DrawRectangleV(cposition, csize, ccolor)
}

// DrawRectangleRec function as declared in src/raylib.h:1115
func DrawRectangleRec(rec Rectangle, color Color) {
	crec, _ := *(*C.Rectangle)(unsafe.Pointer(&rec)), cgoAllocsUnknown
	ccolor, _ := *(*C.Color)(unsafe.Pointer(&color)), cgoAllocsUnknown
	C.DrawRectangleRec(crec, ccolor)
}

// DrawRectanglePro function as declared in src/raylib.h:1116
func DrawRectanglePro(rec Rectangle, origin Vector2, rotation float32, color Color) {
	crec, _ := *(*C.Rectangle)(unsafe.Pointer(&rec)), cgoAllocsUnknown
	corigin, _ := *(*C.Vector2)(unsafe.Pointer(&origin)), cgoAllocsUnknown
	crotation, _ := (C.float)(rotation), cgoAllocsUnknown
	ccolor, _ := *(*C.Color)(unsafe.Pointer(&color)), cgoAllocsUnknown
	C.DrawRectanglePro(crec, corigin, crotation, ccolor)
}

// DrawRectangleGradientV function as declared in src/raylib.h:1117
func DrawRectangleGradientV(posX int32, posY int32, width int32, height int32, color1 Color, color2 Color) {
	cposX, _ := (C.int)(posX), cgoAllocsUnknown
	cposY, _ := (C.int)(posY), cgoAllocsUnknown
	cwidth, _ := (C.int)(width), cgoAllocsUnknown
	cheight, _ := (C.int)(height), cgoAllocsUnknown
	ccolor1, _ := *(*C.Color)(unsafe.Pointer(&color1)), cgoAllocsUnknown
	ccolor2, _ := *(*C.Color)(unsafe.Pointer(&color2)), cgoAllocsUnknown
	C.DrawRectangleGradientV(cposX, cposY, cwidth, cheight, ccolor1, ccolor2)
}

// DrawRectangleGradientH function as declared in src/raylib.h:1118
func DrawRectangleGradientH(posX int32, posY int32, width int32, height int32, color1 Color, color2 Color) {
	cposX, _ := (C.int)(posX), cgoAllocsUnknown
	cposY, _ := (C.int)(posY), cgoAllocsUnknown
	cwidth, _ := (C.int)(width), cgoAllocsUnknown
	cheight, _ := (C.int)(height), cgoAllocsUnknown
	ccolor1, _ := *(*C.Color)(unsafe.Pointer(&color1)), cgoAllocsUnknown
	ccolor2, _ := *(*C.Color)(unsafe.Pointer(&color2)), cgoAllocsUnknown
	C.DrawRectangleGradientH(cposX, cposY, cwidth, cheight, ccolor1, ccolor2)
}

// DrawRectangleGradientEx function as declared in src/raylib.h:1119
func DrawRectangleGradientEx(rec Rectangle, col1 Color, col2 Color, col3 Color, col4 Color) {
	crec, _ := *(*C.Rectangle)(unsafe.Pointer(&rec)), cgoAllocsUnknown
	ccol1, _ := *(*C.Color)(unsafe.Pointer(&col1)), cgoAllocsUnknown
	ccol2, _ := *(*C.Color)(unsafe.Pointer(&col2)), cgoAllocsUnknown
	ccol3, _ := *(*C.Color)(unsafe.Pointer(&col3)), cgoAllocsUnknown
	ccol4, _ := *(*C.Color)(unsafe.Pointer(&col4)), cgoAllocsUnknown
	C.DrawRectangleGradientEx(crec, ccol1, ccol2, ccol3, ccol4)
}

// DrawRectangleLines function as declared in src/raylib.h:1120
func DrawRectangleLines(posX int32, posY int32, width int32, height int32, color Color) {
	cposX, _ := (C.int)(posX), cgoAllocsUnknown
	cposY, _ := (C.int)(posY), cgoAllocsUnknown
	cwidth, _ := (C.int)(width), cgoAllocsUnknown
	cheight, _ := (C.int)(height), cgoAllocsUnknown
	ccolor, _ := *(*C.Color)(unsafe.Pointer(&color)), cgoAllocsUnknown
	C.DrawRectangleLines(cposX, cposY, cwidth, cheight, ccolor)
}

// DrawRectangleLinesEx function as declared in src/raylib.h:1121
func DrawRectangleLinesEx(rec Rectangle, lineThick int32, color Color) {
	crec, _ := *(*C.Rectangle)(unsafe.Pointer(&rec)), cgoAllocsUnknown
	clineThick, _ := (C.int)(lineThick), cgoAllocsUnknown
	ccolor, _ := *(*C.Color)(unsafe.Pointer(&color)), cgoAllocsUnknown
	C.DrawRectangleLinesEx(crec, clineThick, ccolor)
}

// DrawRectangleRounded function as declared in src/raylib.h:1122
func DrawRectangleRounded(rec Rectangle, roundness float32, segments int32, color Color) {
	crec, _ := *(*C.Rectangle)(unsafe.Pointer(&rec)), cgoAllocsUnknown
	croundness, _ := (C.float)(roundness), cgoAllocsUnknown
	csegments, _ := (C.int)(segments), cgoAllocsUnknown
	ccolor, _ := *(*C.Color)(unsafe.Pointer(&color)), cgoAllocsUnknown
	C.DrawRectangleRounded(crec, croundness, csegments, ccolor)
}

// DrawRectangleRoundedLines function as declared in src/raylib.h:1123
func DrawRectangleRoundedLines(rec Rectangle, roundness float32, segments int32, lineThick int32, color Color) {
	crec, _ := *(*C.Rectangle)(unsafe.Pointer(&rec)), cgoAllocsUnknown
	croundness, _ := (C.float)(roundness), cgoAllocsUnknown
	csegments, _ := (C.int)(segments), cgoAllocsUnknown
	clineThick, _ := (C.int)(lineThick), cgoAllocsUnknown
	ccolor, _ := *(*C.Color)(unsafe.Pointer(&color)), cgoAllocsUnknown
	C.DrawRectangleRoundedLines(crec, croundness, csegments, clineThick, ccolor)
}

// DrawTriangle function as declared in src/raylib.h:1124
func DrawTriangle(v1 Vector2, v2 Vector2, v3 Vector2, color Color) {
	cv1, _ := *(*C.Vector2)(unsafe.Pointer(&v1)), cgoAllocsUnknown
	cv2, _ := *(*C.Vector2)(unsafe.Pointer(&v2)), cgoAllocsUnknown
	cv3, _ := *(*C.Vector2)(unsafe.Pointer(&v3)), cgoAllocsUnknown
	ccolor, _ := *(*C.Color)(unsafe.Pointer(&color)), cgoAllocsUnknown
	C.DrawTriangle(cv1, cv2, cv3, ccolor)
}

// DrawTriangleLines function as declared in src/raylib.h:1125
func DrawTriangleLines(v1 Vector2, v2 Vector2, v3 Vector2, color Color) {
	cv1, _ := *(*C.Vector2)(unsafe.Pointer(&v1)), cgoAllocsUnknown
	cv2, _ := *(*C.Vector2)(unsafe.Pointer(&v2)), cgoAllocsUnknown
	cv3, _ := *(*C.Vector2)(unsafe.Pointer(&v3)), cgoAllocsUnknown
	ccolor, _ := *(*C.Color)(unsafe.Pointer(&color)), cgoAllocsUnknown
	C.DrawTriangleLines(cv1, cv2, cv3, ccolor)
}

// DrawTriangleFan function as declared in src/raylib.h:1126
func DrawTriangleFan(points *Vector2, pointsCount int32, color Color) {
	cpoints, _ := (*C.Vector2)(unsafe.Pointer(points)), cgoAllocsUnknown
	cpointsCount, _ := (C.int)(pointsCount), cgoAllocsUnknown
	ccolor, _ := *(*C.Color)(unsafe.Pointer(&color)), cgoAllocsUnknown
	C.DrawTriangleFan(cpoints, cpointsCount, ccolor)
}

// DrawTriangleStrip function as declared in src/raylib.h:1127
func DrawTriangleStrip(points *Vector2, pointsCount int32, color Color) {
	cpoints, _ := (*C.Vector2)(unsafe.Pointer(points)), cgoAllocsUnknown
	cpointsCount, _ := (C.int)(pointsCount), cgoAllocsUnknown
	ccolor, _ := *(*C.Color)(unsafe.Pointer(&color)), cgoAllocsUnknown
	C.DrawTriangleStrip(cpoints, cpointsCount, ccolor)
}

// DrawPoly function as declared in src/raylib.h:1128
func DrawPoly(center Vector2, sides int32, radius float32, rotation float32, color Color) {
	ccenter, _ := *(*C.Vector2)(unsafe.Pointer(&center)), cgoAllocsUnknown
	csides, _ := (C.int)(sides), cgoAllocsUnknown
	cradius, _ := (C.float)(radius), cgoAllocsUnknown
	crotation, _ := (C.float)(rotation), cgoAllocsUnknown
	ccolor, _ := *(*C.Color)(unsafe.Pointer(&color)), cgoAllocsUnknown
	C.DrawPoly(ccenter, csides, cradius, crotation, ccolor)
}

// DrawPolyLines function as declared in src/raylib.h:1129
func DrawPolyLines(center Vector2, sides int32, radius float32, rotation float32, color Color) {
	ccenter, _ := *(*C.Vector2)(unsafe.Pointer(&center)), cgoAllocsUnknown
	csides, _ := (C.int)(sides), cgoAllocsUnknown
	cradius, _ := (C.float)(radius), cgoAllocsUnknown
	crotation, _ := (C.float)(rotation), cgoAllocsUnknown
	ccolor, _ := *(*C.Color)(unsafe.Pointer(&color)), cgoAllocsUnknown
	C.DrawPolyLines(ccenter, csides, cradius, crotation, ccolor)
}

// CheckCollisionRecs function as declared in src/raylib.h:1132
func CheckCollisionRecs(rec1 Rectangle, rec2 Rectangle) bool {
	crec1, _ := *(*C.Rectangle)(unsafe.Pointer(&rec1)), cgoAllocsUnknown
	crec2, _ := *(*C.Rectangle)(unsafe.Pointer(&rec2)), cgoAllocsUnknown
	__ret := C.CheckCollisionRecs(crec1, crec2)
	__v := (bool)(__ret)
	return __v
}

// CheckCollisionCircles function as declared in src/raylib.h:1133
func CheckCollisionCircles(center1 Vector2, radius1 float32, center2 Vector2, radius2 float32) bool {
	ccenter1, _ := *(*C.Vector2)(unsafe.Pointer(&center1)), cgoAllocsUnknown
	cradius1, _ := (C.float)(radius1), cgoAllocsUnknown
	ccenter2, _ := *(*C.Vector2)(unsafe.Pointer(&center2)), cgoAllocsUnknown
	cradius2, _ := (C.float)(radius2), cgoAllocsUnknown
	__ret := C.CheckCollisionCircles(ccenter1, cradius1, ccenter2, cradius2)
	__v := (bool)(__ret)
	return __v
}

// CheckCollisionCircleRec function as declared in src/raylib.h:1134
func CheckCollisionCircleRec(center Vector2, radius float32, rec Rectangle) bool {
	ccenter, _ := *(*C.Vector2)(unsafe.Pointer(&center)), cgoAllocsUnknown
	cradius, _ := (C.float)(radius), cgoAllocsUnknown
	crec, _ := *(*C.Rectangle)(unsafe.Pointer(&rec)), cgoAllocsUnknown
	__ret := C.CheckCollisionCircleRec(ccenter, cradius, crec)
	__v := (bool)(__ret)
	return __v
}

// CheckCollisionPointRec function as declared in src/raylib.h:1135
func CheckCollisionPointRec(point Vector2, rec Rectangle) bool {
	cpoint, _ := *(*C.Vector2)(unsafe.Pointer(&point)), cgoAllocsUnknown
	crec, _ := *(*C.Rectangle)(unsafe.Pointer(&rec)), cgoAllocsUnknown
	__ret := C.CheckCollisionPointRec(cpoint, crec)
	__v := (bool)(__ret)
	return __v
}

// CheckCollisionPointCircle function as declared in src/raylib.h:1136
func CheckCollisionPointCircle(point Vector2, center Vector2, radius float32) bool {
	cpoint, _ := *(*C.Vector2)(unsafe.Pointer(&point)), cgoAllocsUnknown
	ccenter, _ := *(*C.Vector2)(unsafe.Pointer(&center)), cgoAllocsUnknown
	cradius, _ := (C.float)(radius), cgoAllocsUnknown
	__ret := C.CheckCollisionPointCircle(cpoint, ccenter, cradius)
	__v := (bool)(__ret)
	return __v
}

// CheckCollisionPointTriangle function as declared in src/raylib.h:1137
func CheckCollisionPointTriangle(point Vector2, p1 Vector2, p2 Vector2, p3 Vector2) bool {
	cpoint, _ := *(*C.Vector2)(unsafe.Pointer(&point)), cgoAllocsUnknown
	cp1, _ := *(*C.Vector2)(unsafe.Pointer(&p1)), cgoAllocsUnknown
	cp2, _ := *(*C.Vector2)(unsafe.Pointer(&p2)), cgoAllocsUnknown
	cp3, _ := *(*C.Vector2)(unsafe.Pointer(&p3)), cgoAllocsUnknown
	__ret := C.CheckCollisionPointTriangle(cpoint, cp1, cp2, cp3)
	__v := (bool)(__ret)
	return __v
}

// CheckCollisionLines function as declared in src/raylib.h:1138
func CheckCollisionLines(startPos1 Vector2, endPos1 Vector2, startPos2 Vector2, endPos2 Vector2, collisionPoint *Vector2) bool {
	cstartPos1, _ := *(*C.Vector2)(unsafe.Pointer(&startPos1)), cgoAllocsUnknown
	cendPos1, _ := *(*C.Vector2)(unsafe.Pointer(&endPos1)), cgoAllocsUnknown
	cstartPos2, _ := *(*C.Vector2)(unsafe.Pointer(&startPos2)), cgoAllocsUnknown
	cendPos2, _ := *(*C.Vector2)(unsafe.Pointer(&endPos2)), cgoAllocsUnknown
	ccollisionPoint, _ := (*C.Vector2)(unsafe.Pointer(collisionPoint)), cgoAllocsUnknown
	__ret := C.CheckCollisionLines(cstartPos1, cendPos1, cstartPos2, cendPos2, ccollisionPoint)
	__v := (bool)(__ret)
	return __v
}

// GetCollisionRec function as declared in src/raylib.h:1139
func GetCollisionRec(rec1 Rectangle, rec2 Rectangle) Rectangle {
	crec1, _ := *(*C.Rectangle)(unsafe.Pointer(&rec1)), cgoAllocsUnknown
	crec2, _ := *(*C.Rectangle)(unsafe.Pointer(&rec2)), cgoAllocsUnknown
	__ret := C.GetCollisionRec(crec1, crec2)
	__v := *newRectangleRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// LoadImage function as declared in src/raylib.h:1147
func LoadImage(fileName string) Image {
	fileName = safeString(fileName)
	cfileName, _ := unpackPCharString(fileName)
	__ret := C.LoadImage(cfileName)
	runtime.KeepAlive(fileName)
	__v := *newImageRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// LoadImageRaw function as declared in src/raylib.h:1148
func LoadImageRaw(fileName string, width int32, height int32, format int32, headerSize int32) Image {
	fileName = safeString(fileName)
	cfileName, _ := unpackPCharString(fileName)
	cwidth, _ := (C.int)(width), cgoAllocsUnknown
	cheight, _ := (C.int)(height), cgoAllocsUnknown
	cformat, _ := (C.int)(format), cgoAllocsUnknown
	cheaderSize, _ := (C.int)(headerSize), cgoAllocsUnknown
	__ret := C.LoadImageRaw(cfileName, cwidth, cheight, cformat, cheaderSize)
	runtime.KeepAlive(fileName)
	__v := *newImageRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// LoadImageAnim function as declared in src/raylib.h:1149
func LoadImageAnim(fileName string, frames *int32) Image {
	fileName = safeString(fileName)
	cfileName, _ := unpackPCharString(fileName)
	cframes, _ := (*C.int)(unsafe.Pointer(frames)), cgoAllocsUnknown
	__ret := C.LoadImageAnim(cfileName, cframes)
	runtime.KeepAlive(fileName)
	__v := *newImageRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// LoadImageFromMemory function as declared in src/raylib.h:1150
func LoadImageFromMemory(fileType string, fileData []byte, dataSize int32) Image {
	fileType = safeString(fileType)
	cfileType, _ := unpackPCharString(fileType)
	cfileData, _ := (*C.uchar)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&fileData)).Data)), cgoAllocsUnknown
	cdataSize, _ := (C.int)(dataSize), cgoAllocsUnknown
	__ret := C.LoadImageFromMemory(cfileType, cfileData, cdataSize)
	runtime.KeepAlive(fileType)
	__v := *newImageRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// UnloadImage function as declared in src/raylib.h:1151
func UnloadImage(image Image) {
	cimage, _ := *(*C.Image)(unsafe.Pointer(&image)), cgoAllocsUnknown
	C.UnloadImage(cimage)
}

// ExportImage function as declared in src/raylib.h:1152
func ExportImage(image Image, fileName string) bool {
	cimage, _ := *(*C.Image)(unsafe.Pointer(&image)), cgoAllocsUnknown
	fileName = safeString(fileName)
	cfileName, _ := unpackPCharString(fileName)
	__ret := C.ExportImage(cimage, cfileName)
	runtime.KeepAlive(fileName)
	__v := (bool)(__ret)
	return __v
}

// ExportImageAsCode function as declared in src/raylib.h:1153
func ExportImageAsCode(image Image, fileName string) bool {
	cimage, _ := *(*C.Image)(unsafe.Pointer(&image)), cgoAllocsUnknown
	fileName = safeString(fileName)
	cfileName, _ := unpackPCharString(fileName)
	__ret := C.ExportImageAsCode(cimage, cfileName)
	runtime.KeepAlive(fileName)
	__v := (bool)(__ret)
	return __v
}

// GenImageColor function as declared in src/raylib.h:1156
func GenImageColor(width int32, height int32, color Color) Image {
	cwidth, _ := (C.int)(width), cgoAllocsUnknown
	cheight, _ := (C.int)(height), cgoAllocsUnknown
	ccolor, _ := *(*C.Color)(unsafe.Pointer(&color)), cgoAllocsUnknown
	__ret := C.GenImageColor(cwidth, cheight, ccolor)
	__v := *newImageRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// GenImageGradientV function as declared in src/raylib.h:1157
func GenImageGradientV(width int32, height int32, top Color, bottom Color) Image {
	cwidth, _ := (C.int)(width), cgoAllocsUnknown
	cheight, _ := (C.int)(height), cgoAllocsUnknown
	ctop, _ := *(*C.Color)(unsafe.Pointer(&top)), cgoAllocsUnknown
	cbottom, _ := *(*C.Color)(unsafe.Pointer(&bottom)), cgoAllocsUnknown
	__ret := C.GenImageGradientV(cwidth, cheight, ctop, cbottom)
	__v := *newImageRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// GenImageGradientH function as declared in src/raylib.h:1158
func GenImageGradientH(width int32, height int32, left Color, right Color) Image {
	cwidth, _ := (C.int)(width), cgoAllocsUnknown
	cheight, _ := (C.int)(height), cgoAllocsUnknown
	cleft, _ := *(*C.Color)(unsafe.Pointer(&left)), cgoAllocsUnknown
	cright, _ := *(*C.Color)(unsafe.Pointer(&right)), cgoAllocsUnknown
	__ret := C.GenImageGradientH(cwidth, cheight, cleft, cright)
	__v := *newImageRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// GenImageGradientRadial function as declared in src/raylib.h:1159
func GenImageGradientRadial(width int32, height int32, density float32, inner Color, outer Color) Image {
	cwidth, _ := (C.int)(width), cgoAllocsUnknown
	cheight, _ := (C.int)(height), cgoAllocsUnknown
	cdensity, _ := (C.float)(density), cgoAllocsUnknown
	cinner, _ := *(*C.Color)(unsafe.Pointer(&inner)), cgoAllocsUnknown
	couter, _ := *(*C.Color)(unsafe.Pointer(&outer)), cgoAllocsUnknown
	__ret := C.GenImageGradientRadial(cwidth, cheight, cdensity, cinner, couter)
	__v := *newImageRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// GenImageChecked function as declared in src/raylib.h:1160
func GenImageChecked(width int32, height int32, checksX int32, checksY int32, col1 Color, col2 Color) Image {
	cwidth, _ := (C.int)(width), cgoAllocsUnknown
	cheight, _ := (C.int)(height), cgoAllocsUnknown
	cchecksX, _ := (C.int)(checksX), cgoAllocsUnknown
	cchecksY, _ := (C.int)(checksY), cgoAllocsUnknown
	ccol1, _ := *(*C.Color)(unsafe.Pointer(&col1)), cgoAllocsUnknown
	ccol2, _ := *(*C.Color)(unsafe.Pointer(&col2)), cgoAllocsUnknown
	__ret := C.GenImageChecked(cwidth, cheight, cchecksX, cchecksY, ccol1, ccol2)
	__v := *newImageRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// GenImageWhiteNoise function as declared in src/raylib.h:1161
func GenImageWhiteNoise(width int32, height int32, factor float32) Image {
	cwidth, _ := (C.int)(width), cgoAllocsUnknown
	cheight, _ := (C.int)(height), cgoAllocsUnknown
	cfactor, _ := (C.float)(factor), cgoAllocsUnknown
	__ret := C.GenImageWhiteNoise(cwidth, cheight, cfactor)
	__v := *newImageRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// GenImagePerlinNoise function as declared in src/raylib.h:1162
func GenImagePerlinNoise(width int32, height int32, offsetX int32, offsetY int32, scale float32) Image {
	cwidth, _ := (C.int)(width), cgoAllocsUnknown
	cheight, _ := (C.int)(height), cgoAllocsUnknown
	coffsetX, _ := (C.int)(offsetX), cgoAllocsUnknown
	coffsetY, _ := (C.int)(offsetY), cgoAllocsUnknown
	cscale, _ := (C.float)(scale), cgoAllocsUnknown
	__ret := C.GenImagePerlinNoise(cwidth, cheight, coffsetX, coffsetY, cscale)
	__v := *newImageRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// GenImageCellular function as declared in src/raylib.h:1163
func GenImageCellular(width int32, height int32, tileSize int32) Image {
	cwidth, _ := (C.int)(width), cgoAllocsUnknown
	cheight, _ := (C.int)(height), cgoAllocsUnknown
	ctileSize, _ := (C.int)(tileSize), cgoAllocsUnknown
	__ret := C.GenImageCellular(cwidth, cheight, ctileSize)
	__v := *newImageRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// ImageCopy function as declared in src/raylib.h:1166
func ImageCopy(image Image) Image {
	cimage, _ := *(*C.Image)(unsafe.Pointer(&image)), cgoAllocsUnknown
	__ret := C.ImageCopy(cimage)
	__v := *newImageRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// ImageFromImage function as declared in src/raylib.h:1167
func ImageFromImage(image Image, rec Rectangle) Image {
	cimage, _ := *(*C.Image)(unsafe.Pointer(&image)), cgoAllocsUnknown
	crec, _ := *(*C.Rectangle)(unsafe.Pointer(&rec)), cgoAllocsUnknown
	__ret := C.ImageFromImage(cimage, crec)
	__v := *newImageRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// ImageText function as declared in src/raylib.h:1168
func ImageText(text string, fontSize int32, color Color) Image {
	text = safeString(text)
	ctext, _ := unpackPCharString(text)
	cfontSize, _ := (C.int)(fontSize), cgoAllocsUnknown
	ccolor, _ := *(*C.Color)(unsafe.Pointer(&color)), cgoAllocsUnknown
	__ret := C.ImageText(ctext, cfontSize, ccolor)
	runtime.KeepAlive(text)
	__v := *newImageRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// ImageTextEx function as declared in src/raylib.h:1169
func ImageTextEx(font Font, text string, fontSize float32, spacing float32, tint Color) Image {
	cfont, _ := *(*C.Font)(unsafe.Pointer(&font)), cgoAllocsUnknown
	text = safeString(text)
	ctext, _ := unpackPCharString(text)
	cfontSize, _ := (C.float)(fontSize), cgoAllocsUnknown
	cspacing, _ := (C.float)(spacing), cgoAllocsUnknown
	ctint, _ := *(*C.Color)(unsafe.Pointer(&tint)), cgoAllocsUnknown
	__ret := C.ImageTextEx(cfont, ctext, cfontSize, cspacing, ctint)
	runtime.KeepAlive(text)
	__v := *newImageRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// ImageFormat function as declared in src/raylib.h:1170
func ImageFormat(image *Image, newFormat int32) {
	cimage, _ := (*C.Image)(unsafe.Pointer(image)), cgoAllocsUnknown
	cnewFormat, _ := (C.int)(newFormat), cgoAllocsUnknown
	C.ImageFormat(cimage, cnewFormat)
}

// ImageToPOT function as declared in src/raylib.h:1171
func ImageToPOT(image *Image, fill Color) {
	cimage, _ := (*C.Image)(unsafe.Pointer(image)), cgoAllocsUnknown
	cfill, _ := *(*C.Color)(unsafe.Pointer(&fill)), cgoAllocsUnknown
	C.ImageToPOT(cimage, cfill)
}

// ImageCrop function as declared in src/raylib.h:1172
func ImageCrop(image *Image, crop Rectangle) {
	cimage, _ := (*C.Image)(unsafe.Pointer(image)), cgoAllocsUnknown
	ccrop, _ := *(*C.Rectangle)(unsafe.Pointer(&crop)), cgoAllocsUnknown
	C.ImageCrop(cimage, ccrop)
}

// ImageAlphaCrop function as declared in src/raylib.h:1173
func ImageAlphaCrop(image *Image, threshold float32) {
	cimage, _ := (*C.Image)(unsafe.Pointer(image)), cgoAllocsUnknown
	cthreshold, _ := (C.float)(threshold), cgoAllocsUnknown
	C.ImageAlphaCrop(cimage, cthreshold)
}

// ImageAlphaClear function as declared in src/raylib.h:1174
func ImageAlphaClear(image *Image, color Color, threshold float32) {
	cimage, _ := (*C.Image)(unsafe.Pointer(image)), cgoAllocsUnknown
	ccolor, _ := *(*C.Color)(unsafe.Pointer(&color)), cgoAllocsUnknown
	cthreshold, _ := (C.float)(threshold), cgoAllocsUnknown
	C.ImageAlphaClear(cimage, ccolor, cthreshold)
}

// ImageAlphaMask function as declared in src/raylib.h:1175
func ImageAlphaMask(image *Image, alphaMask Image) {
	cimage, _ := (*C.Image)(unsafe.Pointer(image)), cgoAllocsUnknown
	calphaMask, _ := *(*C.Image)(unsafe.Pointer(&alphaMask)), cgoAllocsUnknown
	C.ImageAlphaMask(cimage, calphaMask)
}

// ImageAlphaPremultiply function as declared in src/raylib.h:1176
func ImageAlphaPremultiply(image *Image) {
	cimage, _ := (*C.Image)(unsafe.Pointer(image)), cgoAllocsUnknown
	C.ImageAlphaPremultiply(cimage)
}

// ImageResize function as declared in src/raylib.h:1177
func ImageResize(image *Image, newWidth int32, newHeight int32) {
	cimage, _ := (*C.Image)(unsafe.Pointer(image)), cgoAllocsUnknown
	cnewWidth, _ := (C.int)(newWidth), cgoAllocsUnknown
	cnewHeight, _ := (C.int)(newHeight), cgoAllocsUnknown
	C.ImageResize(cimage, cnewWidth, cnewHeight)
}

// ImageResizeNN function as declared in src/raylib.h:1178
func ImageResizeNN(image *Image, newWidth int32, newHeight int32) {
	cimage, _ := (*C.Image)(unsafe.Pointer(image)), cgoAllocsUnknown
	cnewWidth, _ := (C.int)(newWidth), cgoAllocsUnknown
	cnewHeight, _ := (C.int)(newHeight), cgoAllocsUnknown
	C.ImageResizeNN(cimage, cnewWidth, cnewHeight)
}

// ImageResizeCanvas function as declared in src/raylib.h:1179
func ImageResizeCanvas(image *Image, newWidth int32, newHeight int32, offsetX int32, offsetY int32, fill Color) {
	cimage, _ := (*C.Image)(unsafe.Pointer(image)), cgoAllocsUnknown
	cnewWidth, _ := (C.int)(newWidth), cgoAllocsUnknown
	cnewHeight, _ := (C.int)(newHeight), cgoAllocsUnknown
	coffsetX, _ := (C.int)(offsetX), cgoAllocsUnknown
	coffsetY, _ := (C.int)(offsetY), cgoAllocsUnknown
	cfill, _ := *(*C.Color)(unsafe.Pointer(&fill)), cgoAllocsUnknown
	C.ImageResizeCanvas(cimage, cnewWidth, cnewHeight, coffsetX, coffsetY, cfill)
}

// ImageMipmaps function as declared in src/raylib.h:1180
func ImageMipmaps(image *Image) {
	cimage, _ := (*C.Image)(unsafe.Pointer(image)), cgoAllocsUnknown
	C.ImageMipmaps(cimage)
}

// ImageDither function as declared in src/raylib.h:1181
func ImageDither(image *Image, rBpp int32, gBpp int32, bBpp int32, aBpp int32) {
	cimage, _ := (*C.Image)(unsafe.Pointer(image)), cgoAllocsUnknown
	crBpp, _ := (C.int)(rBpp), cgoAllocsUnknown
	cgBpp, _ := (C.int)(gBpp), cgoAllocsUnknown
	cbBpp, _ := (C.int)(bBpp), cgoAllocsUnknown
	caBpp, _ := (C.int)(aBpp), cgoAllocsUnknown
	C.ImageDither(cimage, crBpp, cgBpp, cbBpp, caBpp)
}

// ImageFlipVertical function as declared in src/raylib.h:1182
func ImageFlipVertical(image *Image) {
	cimage, _ := (*C.Image)(unsafe.Pointer(image)), cgoAllocsUnknown
	C.ImageFlipVertical(cimage)
}

// ImageFlipHorizontal function as declared in src/raylib.h:1183
func ImageFlipHorizontal(image *Image) {
	cimage, _ := (*C.Image)(unsafe.Pointer(image)), cgoAllocsUnknown
	C.ImageFlipHorizontal(cimage)
}

// ImageRotateCW function as declared in src/raylib.h:1184
func ImageRotateCW(image *Image) {
	cimage, _ := (*C.Image)(unsafe.Pointer(image)), cgoAllocsUnknown
	C.ImageRotateCW(cimage)
}

// ImageRotateCCW function as declared in src/raylib.h:1185
func ImageRotateCCW(image *Image) {
	cimage, _ := (*C.Image)(unsafe.Pointer(image)), cgoAllocsUnknown
	C.ImageRotateCCW(cimage)
}

// ImageColorTint function as declared in src/raylib.h:1186
func ImageColorTint(image *Image, color Color) {
	cimage, _ := (*C.Image)(unsafe.Pointer(image)), cgoAllocsUnknown
	ccolor, _ := *(*C.Color)(unsafe.Pointer(&color)), cgoAllocsUnknown
	C.ImageColorTint(cimage, ccolor)
}

// ImageColorInvert function as declared in src/raylib.h:1187
func ImageColorInvert(image *Image) {
	cimage, _ := (*C.Image)(unsafe.Pointer(image)), cgoAllocsUnknown
	C.ImageColorInvert(cimage)
}

// ImageColorGrayscale function as declared in src/raylib.h:1188
func ImageColorGrayscale(image *Image) {
	cimage, _ := (*C.Image)(unsafe.Pointer(image)), cgoAllocsUnknown
	C.ImageColorGrayscale(cimage)
}

// ImageColorContrast function as declared in src/raylib.h:1189
func ImageColorContrast(image *Image, contrast float32) {
	cimage, _ := (*C.Image)(unsafe.Pointer(image)), cgoAllocsUnknown
	ccontrast, _ := (C.float)(contrast), cgoAllocsUnknown
	C.ImageColorContrast(cimage, ccontrast)
}

// ImageColorBrightness function as declared in src/raylib.h:1190
func ImageColorBrightness(image *Image, brightness int32) {
	cimage, _ := (*C.Image)(unsafe.Pointer(image)), cgoAllocsUnknown
	cbrightness, _ := (C.int)(brightness), cgoAllocsUnknown
	C.ImageColorBrightness(cimage, cbrightness)
}

// ImageColorReplace function as declared in src/raylib.h:1191
func ImageColorReplace(image *Image, color Color, replace Color) {
	cimage, _ := (*C.Image)(unsafe.Pointer(image)), cgoAllocsUnknown
	ccolor, _ := *(*C.Color)(unsafe.Pointer(&color)), cgoAllocsUnknown
	creplace, _ := *(*C.Color)(unsafe.Pointer(&replace)), cgoAllocsUnknown
	C.ImageColorReplace(cimage, ccolor, creplace)
}

// LoadImageColors function as declared in src/raylib.h:1192
func LoadImageColors(image Image) *Color {
	cimage, _ := *(*C.Image)(unsafe.Pointer(&image)), cgoAllocsUnknown
	__ret := C.LoadImageColors(cimage)
	__v := newColorRef(unsafe.Pointer(__ret)).convert()
	return __v
}

// LoadImagePalette function as declared in src/raylib.h:1193
func LoadImagePalette(image Image, maxPaletteSize int32, colorsCount *int32) *Color {
	cimage, _ := *(*C.Image)(unsafe.Pointer(&image)), cgoAllocsUnknown
	cmaxPaletteSize, _ := (C.int)(maxPaletteSize), cgoAllocsUnknown
	ccolorsCount, _ := (*C.int)(unsafe.Pointer(colorsCount)), cgoAllocsUnknown
	__ret := C.LoadImagePalette(cimage, cmaxPaletteSize, ccolorsCount)
	__v := newColorRef(unsafe.Pointer(__ret)).convert()
	return __v
}

// UnloadImageColors function as declared in src/raylib.h:1194
func UnloadImageColors(colors *Color) {
	ccolors, _ := (*C.Color)(unsafe.Pointer(colors)), cgoAllocsUnknown
	C.UnloadImageColors(ccolors)
}

// UnloadImagePalette function as declared in src/raylib.h:1195
func UnloadImagePalette(colors *Color) {
	ccolors, _ := (*C.Color)(unsafe.Pointer(colors)), cgoAllocsUnknown
	C.UnloadImagePalette(ccolors)
}

// GetImageAlphaBorder function as declared in src/raylib.h:1196
func GetImageAlphaBorder(image Image, threshold float32) Rectangle {
	cimage, _ := *(*C.Image)(unsafe.Pointer(&image)), cgoAllocsUnknown
	cthreshold, _ := (C.float)(threshold), cgoAllocsUnknown
	__ret := C.GetImageAlphaBorder(cimage, cthreshold)
	__v := *newRectangleRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// ImageClearBackground function as declared in src/raylib.h:1200
func ImageClearBackground(dst *Image, color Color) {
	cdst, _ := (*C.Image)(unsafe.Pointer(dst)), cgoAllocsUnknown
	ccolor, _ := *(*C.Color)(unsafe.Pointer(&color)), cgoAllocsUnknown
	C.ImageClearBackground(cdst, ccolor)
}

// ImageDrawPixel function as declared in src/raylib.h:1201
func ImageDrawPixel(dst *Image, posX int32, posY int32, color Color) {
	cdst, _ := (*C.Image)(unsafe.Pointer(dst)), cgoAllocsUnknown
	cposX, _ := (C.int)(posX), cgoAllocsUnknown
	cposY, _ := (C.int)(posY), cgoAllocsUnknown
	ccolor, _ := *(*C.Color)(unsafe.Pointer(&color)), cgoAllocsUnknown
	C.ImageDrawPixel(cdst, cposX, cposY, ccolor)
}

// ImageDrawPixelV function as declared in src/raylib.h:1202
func ImageDrawPixelV(dst *Image, position Vector2, color Color) {
	cdst, _ := (*C.Image)(unsafe.Pointer(dst)), cgoAllocsUnknown
	cposition, _ := *(*C.Vector2)(unsafe.Pointer(&position)), cgoAllocsUnknown
	ccolor, _ := *(*C.Color)(unsafe.Pointer(&color)), cgoAllocsUnknown
	C.ImageDrawPixelV(cdst, cposition, ccolor)
}

// ImageDrawLine function as declared in src/raylib.h:1203
func ImageDrawLine(dst *Image, startPosX int32, startPosY int32, endPosX int32, endPosY int32, color Color) {
	cdst, _ := (*C.Image)(unsafe.Pointer(dst)), cgoAllocsUnknown
	cstartPosX, _ := (C.int)(startPosX), cgoAllocsUnknown
	cstartPosY, _ := (C.int)(startPosY), cgoAllocsUnknown
	cendPosX, _ := (C.int)(endPosX), cgoAllocsUnknown
	cendPosY, _ := (C.int)(endPosY), cgoAllocsUnknown
	ccolor, _ := *(*C.Color)(unsafe.Pointer(&color)), cgoAllocsUnknown
	C.ImageDrawLine(cdst, cstartPosX, cstartPosY, cendPosX, cendPosY, ccolor)
}

// ImageDrawLineV function as declared in src/raylib.h:1204
func ImageDrawLineV(dst *Image, start Vector2, end Vector2, color Color) {
	cdst, _ := (*C.Image)(unsafe.Pointer(dst)), cgoAllocsUnknown
	cstart, _ := *(*C.Vector2)(unsafe.Pointer(&start)), cgoAllocsUnknown
	cend, _ := *(*C.Vector2)(unsafe.Pointer(&end)), cgoAllocsUnknown
	ccolor, _ := *(*C.Color)(unsafe.Pointer(&color)), cgoAllocsUnknown
	C.ImageDrawLineV(cdst, cstart, cend, ccolor)
}

// ImageDrawCircle function as declared in src/raylib.h:1205
func ImageDrawCircle(dst *Image, centerX int32, centerY int32, radius int32, color Color) {
	cdst, _ := (*C.Image)(unsafe.Pointer(dst)), cgoAllocsUnknown
	ccenterX, _ := (C.int)(centerX), cgoAllocsUnknown
	ccenterY, _ := (C.int)(centerY), cgoAllocsUnknown
	cradius, _ := (C.int)(radius), cgoAllocsUnknown
	ccolor, _ := *(*C.Color)(unsafe.Pointer(&color)), cgoAllocsUnknown
	C.ImageDrawCircle(cdst, ccenterX, ccenterY, cradius, ccolor)
}

// ImageDrawCircleV function as declared in src/raylib.h:1206
func ImageDrawCircleV(dst *Image, center Vector2, radius int32, color Color) {
	cdst, _ := (*C.Image)(unsafe.Pointer(dst)), cgoAllocsUnknown
	ccenter, _ := *(*C.Vector2)(unsafe.Pointer(&center)), cgoAllocsUnknown
	cradius, _ := (C.int)(radius), cgoAllocsUnknown
	ccolor, _ := *(*C.Color)(unsafe.Pointer(&color)), cgoAllocsUnknown
	C.ImageDrawCircleV(cdst, ccenter, cradius, ccolor)
}

// ImageDrawRectangle function as declared in src/raylib.h:1207
func ImageDrawRectangle(dst *Image, posX int32, posY int32, width int32, height int32, color Color) {
	cdst, _ := (*C.Image)(unsafe.Pointer(dst)), cgoAllocsUnknown
	cposX, _ := (C.int)(posX), cgoAllocsUnknown
	cposY, _ := (C.int)(posY), cgoAllocsUnknown
	cwidth, _ := (C.int)(width), cgoAllocsUnknown
	cheight, _ := (C.int)(height), cgoAllocsUnknown
	ccolor, _ := *(*C.Color)(unsafe.Pointer(&color)), cgoAllocsUnknown
	C.ImageDrawRectangle(cdst, cposX, cposY, cwidth, cheight, ccolor)
}

// ImageDrawRectangleV function as declared in src/raylib.h:1208
func ImageDrawRectangleV(dst *Image, position Vector2, size Vector2, color Color) {
	cdst, _ := (*C.Image)(unsafe.Pointer(dst)), cgoAllocsUnknown
	cposition, _ := *(*C.Vector2)(unsafe.Pointer(&position)), cgoAllocsUnknown
	csize, _ := *(*C.Vector2)(unsafe.Pointer(&size)), cgoAllocsUnknown
	ccolor, _ := *(*C.Color)(unsafe.Pointer(&color)), cgoAllocsUnknown
	C.ImageDrawRectangleV(cdst, cposition, csize, ccolor)
}

// ImageDrawRectangleRec function as declared in src/raylib.h:1209
func ImageDrawRectangleRec(dst *Image, rec Rectangle, color Color) {
	cdst, _ := (*C.Image)(unsafe.Pointer(dst)), cgoAllocsUnknown
	crec, _ := *(*C.Rectangle)(unsafe.Pointer(&rec)), cgoAllocsUnknown
	ccolor, _ := *(*C.Color)(unsafe.Pointer(&color)), cgoAllocsUnknown
	C.ImageDrawRectangleRec(cdst, crec, ccolor)
}

// ImageDrawRectangleLines function as declared in src/raylib.h:1210
func ImageDrawRectangleLines(dst *Image, rec Rectangle, thick int32, color Color) {
	cdst, _ := (*C.Image)(unsafe.Pointer(dst)), cgoAllocsUnknown
	crec, _ := *(*C.Rectangle)(unsafe.Pointer(&rec)), cgoAllocsUnknown
	cthick, _ := (C.int)(thick), cgoAllocsUnknown
	ccolor, _ := *(*C.Color)(unsafe.Pointer(&color)), cgoAllocsUnknown
	C.ImageDrawRectangleLines(cdst, crec, cthick, ccolor)
}

// ImageDraw function as declared in src/raylib.h:1211
func ImageDraw(dst *Image, src Image, srcRec Rectangle, dstRec Rectangle, tint Color) {
	cdst, _ := (*C.Image)(unsafe.Pointer(dst)), cgoAllocsUnknown
	csrc, _ := *(*C.Image)(unsafe.Pointer(&src)), cgoAllocsUnknown
	csrcRec, _ := *(*C.Rectangle)(unsafe.Pointer(&srcRec)), cgoAllocsUnknown
	cdstRec, _ := *(*C.Rectangle)(unsafe.Pointer(&dstRec)), cgoAllocsUnknown
	ctint, _ := *(*C.Color)(unsafe.Pointer(&tint)), cgoAllocsUnknown
	C.ImageDraw(cdst, csrc, csrcRec, cdstRec, ctint)
}

// ImageDrawText function as declared in src/raylib.h:1212
func ImageDrawText(dst *Image, text string, posX int32, posY int32, fontSize int32, color Color) {
	cdst, _ := (*C.Image)(unsafe.Pointer(dst)), cgoAllocsUnknown
	text = safeString(text)
	ctext, _ := unpackPCharString(text)
	cposX, _ := (C.int)(posX), cgoAllocsUnknown
	cposY, _ := (C.int)(posY), cgoAllocsUnknown
	cfontSize, _ := (C.int)(fontSize), cgoAllocsUnknown
	ccolor, _ := *(*C.Color)(unsafe.Pointer(&color)), cgoAllocsUnknown
	C.ImageDrawText(cdst, ctext, cposX, cposY, cfontSize, ccolor)
	runtime.KeepAlive(text)
}

// ImageDrawTextEx function as declared in src/raylib.h:1213
func ImageDrawTextEx(dst *Image, font Font, text string, position Vector2, fontSize float32, spacing float32, tint Color) {
	cdst, _ := (*C.Image)(unsafe.Pointer(dst)), cgoAllocsUnknown
	cfont, _ := *(*C.Font)(unsafe.Pointer(&font)), cgoAllocsUnknown
	text = safeString(text)
	ctext, _ := unpackPCharString(text)
	cposition, _ := *(*C.Vector2)(unsafe.Pointer(&position)), cgoAllocsUnknown
	cfontSize, _ := (C.float)(fontSize), cgoAllocsUnknown
	cspacing, _ := (C.float)(spacing), cgoAllocsUnknown
	ctint, _ := *(*C.Color)(unsafe.Pointer(&tint)), cgoAllocsUnknown
	C.ImageDrawTextEx(cdst, cfont, ctext, cposition, cfontSize, cspacing, ctint)
	runtime.KeepAlive(text)
}

// LoadTexture function as declared in src/raylib.h:1217
func LoadTexture(fileName string) Texture2D {
	fileName = safeString(fileName)
	cfileName, _ := unpackPCharString(fileName)
	__ret := C.LoadTexture(cfileName)
	runtime.KeepAlive(fileName)
	__v := *newTexture2DRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// LoadTextureFromImage function as declared in src/raylib.h:1218
func LoadTextureFromImage(image Image) Texture2D {
	cimage, _ := *(*C.Image)(unsafe.Pointer(&image)), cgoAllocsUnknown
	__ret := C.LoadTextureFromImage(cimage)
	__v := *newTexture2DRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// LoadTextureCubemap function as declared in src/raylib.h:1219
func LoadTextureCubemap(image Image, layoutType int32) TextureCubemap {
	cimage, _ := *(*C.Image)(unsafe.Pointer(&image)), cgoAllocsUnknown
	clayoutType, _ := (C.int)(layoutType), cgoAllocsUnknown
	__ret := C.LoadTextureCubemap(cimage, clayoutType)
	__v := *newTextureCubemapRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// LoadRenderTexture function as declared in src/raylib.h:1220
func LoadRenderTexture(width int32, height int32) RenderTexture2D {
	cwidth, _ := (C.int)(width), cgoAllocsUnknown
	cheight, _ := (C.int)(height), cgoAllocsUnknown
	__ret := C.LoadRenderTexture(cwidth, cheight)
	__v := *newRenderTexture2DRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// UnloadTexture function as declared in src/raylib.h:1221
func UnloadTexture(texture Texture2D) {
	ctexture, _ := *(*C.Texture2D)(unsafe.Pointer(&texture)), cgoAllocsUnknown
	C.UnloadTexture(ctexture)
}

// UnloadRenderTexture function as declared in src/raylib.h:1222
func UnloadRenderTexture(target RenderTexture2D) {
	ctarget, _ := *(*C.RenderTexture2D)(unsafe.Pointer(&target)), cgoAllocsUnknown
	C.UnloadRenderTexture(ctarget)
}

// UpdateTexture function as declared in src/raylib.h:1223
func UpdateTexture(texture Texture2D, pixels unsafe.Pointer) {
	ctexture, _ := *(*C.Texture2D)(unsafe.Pointer(&texture)), cgoAllocsUnknown
	cpixels, _ := pixels, cgoAllocsUnknown
	C.UpdateTexture(ctexture, cpixels)
}

// UpdateTextureRec function as declared in src/raylib.h:1224
func UpdateTextureRec(texture Texture2D, rec Rectangle, pixels unsafe.Pointer) {
	ctexture, _ := *(*C.Texture2D)(unsafe.Pointer(&texture)), cgoAllocsUnknown
	crec, _ := *(*C.Rectangle)(unsafe.Pointer(&rec)), cgoAllocsUnknown
	cpixels, _ := pixels, cgoAllocsUnknown
	C.UpdateTextureRec(ctexture, crec, cpixels)
}

// GetTextureData function as declared in src/raylib.h:1225
func GetTextureData(texture Texture2D) Image {
	ctexture, _ := *(*C.Texture2D)(unsafe.Pointer(&texture)), cgoAllocsUnknown
	__ret := C.GetTextureData(ctexture)
	__v := *newImageRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// GetScreenData function as declared in src/raylib.h:1226
func GetScreenData() Image {
	__ret := C.GetScreenData()
	__v := *newImageRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// GenTextureMipmaps function as declared in src/raylib.h:1229
func GenTextureMipmaps(texture *Texture2D) {
	ctexture, _ := (*C.Texture2D)(unsafe.Pointer(texture)), cgoAllocsUnknown
	C.GenTextureMipmaps(ctexture)
}

// SetTextureFilter function as declared in src/raylib.h:1230
func SetTextureFilter(texture Texture2D, filterMode int32) {
	ctexture, _ := *(*C.Texture2D)(unsafe.Pointer(&texture)), cgoAllocsUnknown
	cfilterMode, _ := (C.int)(filterMode), cgoAllocsUnknown
	C.SetTextureFilter(ctexture, cfilterMode)
}

// SetTextureWrap function as declared in src/raylib.h:1231
func SetTextureWrap(texture Texture2D, wrapMode int32) {
	ctexture, _ := *(*C.Texture2D)(unsafe.Pointer(&texture)), cgoAllocsUnknown
	cwrapMode, _ := (C.int)(wrapMode), cgoAllocsUnknown
	C.SetTextureWrap(ctexture, cwrapMode)
}

// DrawTexture function as declared in src/raylib.h:1234
func DrawTexture(texture Texture2D, posX int32, posY int32, tint Color) {
	ctexture, _ := *(*C.Texture2D)(unsafe.Pointer(&texture)), cgoAllocsUnknown
	cposX, _ := (C.int)(posX), cgoAllocsUnknown
	cposY, _ := (C.int)(posY), cgoAllocsUnknown
	ctint, _ := *(*C.Color)(unsafe.Pointer(&tint)), cgoAllocsUnknown
	C.DrawTexture(ctexture, cposX, cposY, ctint)
}

// DrawTextureV function as declared in src/raylib.h:1235
func DrawTextureV(texture Texture2D, position Vector2, tint Color) {
	ctexture, _ := *(*C.Texture2D)(unsafe.Pointer(&texture)), cgoAllocsUnknown
	cposition, _ := *(*C.Vector2)(unsafe.Pointer(&position)), cgoAllocsUnknown
	ctint, _ := *(*C.Color)(unsafe.Pointer(&tint)), cgoAllocsUnknown
	C.DrawTextureV(ctexture, cposition, ctint)
}

// DrawTextureEx function as declared in src/raylib.h:1236
func DrawTextureEx(texture Texture2D, position Vector2, rotation float32, scale float32, tint Color) {
	ctexture, _ := *(*C.Texture2D)(unsafe.Pointer(&texture)), cgoAllocsUnknown
	cposition, _ := *(*C.Vector2)(unsafe.Pointer(&position)), cgoAllocsUnknown
	crotation, _ := (C.float)(rotation), cgoAllocsUnknown
	cscale, _ := (C.float)(scale), cgoAllocsUnknown
	ctint, _ := *(*C.Color)(unsafe.Pointer(&tint)), cgoAllocsUnknown
	C.DrawTextureEx(ctexture, cposition, crotation, cscale, ctint)
}

// DrawTextureRec function as declared in src/raylib.h:1237
func DrawTextureRec(texture Texture2D, source Rectangle, position Vector2, tint Color) {
	ctexture, _ := *(*C.Texture2D)(unsafe.Pointer(&texture)), cgoAllocsUnknown
	csource, _ := *(*C.Rectangle)(unsafe.Pointer(&source)), cgoAllocsUnknown
	cposition, _ := *(*C.Vector2)(unsafe.Pointer(&position)), cgoAllocsUnknown
	ctint, _ := *(*C.Color)(unsafe.Pointer(&tint)), cgoAllocsUnknown
	C.DrawTextureRec(ctexture, csource, cposition, ctint)
}

// DrawTextureQuad function as declared in src/raylib.h:1238
func DrawTextureQuad(texture Texture2D, tiling Vector2, offset Vector2, quad Rectangle, tint Color) {
	ctexture, _ := *(*C.Texture2D)(unsafe.Pointer(&texture)), cgoAllocsUnknown
	ctiling, _ := *(*C.Vector2)(unsafe.Pointer(&tiling)), cgoAllocsUnknown
	coffset, _ := *(*C.Vector2)(unsafe.Pointer(&offset)), cgoAllocsUnknown
	cquad, _ := *(*C.Rectangle)(unsafe.Pointer(&quad)), cgoAllocsUnknown
	ctint, _ := *(*C.Color)(unsafe.Pointer(&tint)), cgoAllocsUnknown
	C.DrawTextureQuad(ctexture, ctiling, coffset, cquad, ctint)
}

// DrawTextureTiled function as declared in src/raylib.h:1239
func DrawTextureTiled(texture Texture2D, source Rectangle, dest Rectangle, origin Vector2, rotation float32, scale float32, tint Color) {
	ctexture, _ := *(*C.Texture2D)(unsafe.Pointer(&texture)), cgoAllocsUnknown
	csource, _ := *(*C.Rectangle)(unsafe.Pointer(&source)), cgoAllocsUnknown
	cdest, _ := *(*C.Rectangle)(unsafe.Pointer(&dest)), cgoAllocsUnknown
	corigin, _ := *(*C.Vector2)(unsafe.Pointer(&origin)), cgoAllocsUnknown
	crotation, _ := (C.float)(rotation), cgoAllocsUnknown
	cscale, _ := (C.float)(scale), cgoAllocsUnknown
	ctint, _ := *(*C.Color)(unsafe.Pointer(&tint)), cgoAllocsUnknown
	C.DrawTextureTiled(ctexture, csource, cdest, corigin, crotation, cscale, ctint)
}

// DrawTexturePro function as declared in src/raylib.h:1240
func DrawTexturePro(texture Texture2D, source Rectangle, dest Rectangle, origin Vector2, rotation float32, tint Color) {
	ctexture, _ := *(*C.Texture2D)(unsafe.Pointer(&texture)), cgoAllocsUnknown
	csource, _ := *(*C.Rectangle)(unsafe.Pointer(&source)), cgoAllocsUnknown
	cdest, _ := *(*C.Rectangle)(unsafe.Pointer(&dest)), cgoAllocsUnknown
	corigin, _ := *(*C.Vector2)(unsafe.Pointer(&origin)), cgoAllocsUnknown
	crotation, _ := (C.float)(rotation), cgoAllocsUnknown
	ctint, _ := *(*C.Color)(unsafe.Pointer(&tint)), cgoAllocsUnknown
	C.DrawTexturePro(ctexture, csource, cdest, corigin, crotation, ctint)
}

// DrawTextureNPatch function as declared in src/raylib.h:1241
func DrawTextureNPatch(texture Texture2D, nPatchInfo NPatchInfo, dest Rectangle, origin Vector2, rotation float32, tint Color) {
	ctexture, _ := *(*C.Texture2D)(unsafe.Pointer(&texture)), cgoAllocsUnknown
	cnPatchInfo, _ := *(*C.NPatchInfo)(unsafe.Pointer(&nPatchInfo)), cgoAllocsUnknown
	cdest, _ := *(*C.Rectangle)(unsafe.Pointer(&dest)), cgoAllocsUnknown
	corigin, _ := *(*C.Vector2)(unsafe.Pointer(&origin)), cgoAllocsUnknown
	crotation, _ := (C.float)(rotation), cgoAllocsUnknown
	ctint, _ := *(*C.Color)(unsafe.Pointer(&tint)), cgoAllocsUnknown
	C.DrawTextureNPatch(ctexture, cnPatchInfo, cdest, corigin, crotation, ctint)
}

// Fade function as declared in src/raylib.h:1244
func Fade(color Color, alpha float32) Color {
	ccolor, _ := *(*C.Color)(unsafe.Pointer(&color)), cgoAllocsUnknown
	calpha, _ := (C.float)(alpha), cgoAllocsUnknown
	__ret := C.Fade(ccolor, calpha)
	__v := *newColorRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// ColorToInt function as declared in src/raylib.h:1245
func ColorToInt(color Color) int32 {
	ccolor, _ := *(*C.Color)(unsafe.Pointer(&color)), cgoAllocsUnknown
	__ret := C.ColorToInt(ccolor)
	__v := (int32)(__ret)
	return __v
}

// ColorNormalize function as declared in src/raylib.h:1246
func ColorNormalize(color Color) Vector4 {
	ccolor, _ := *(*C.Color)(unsafe.Pointer(&color)), cgoAllocsUnknown
	__ret := C.ColorNormalize(ccolor)
	__v := *newVector4Ref(unsafe.Pointer(&__ret)).convert()
	return __v
}

// ColorFromNormalized function as declared in src/raylib.h:1247
func ColorFromNormalized(normalized Vector4) Color {
	cnormalized, _ := *(*C.Vector4)(unsafe.Pointer(&normalized)), cgoAllocsUnknown
	__ret := C.ColorFromNormalized(cnormalized)
	__v := *newColorRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// ColorToHSV function as declared in src/raylib.h:1248
func ColorToHSV(color Color) Vector3 {
	ccolor, _ := *(*C.Color)(unsafe.Pointer(&color)), cgoAllocsUnknown
	__ret := C.ColorToHSV(ccolor)
	__v := *newVector3Ref(unsafe.Pointer(&__ret)).convert()
	return __v
}

// ColorFromHSV function as declared in src/raylib.h:1249
func ColorFromHSV(hue float32, saturation float32, value float32) Color {
	chue, _ := (C.float)(hue), cgoAllocsUnknown
	csaturation, _ := (C.float)(saturation), cgoAllocsUnknown
	cvalue, _ := (C.float)(value), cgoAllocsUnknown
	__ret := C.ColorFromHSV(chue, csaturation, cvalue)
	__v := *newColorRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// ColorAlpha function as declared in src/raylib.h:1250
func ColorAlpha(color Color, alpha float32) Color {
	ccolor, _ := *(*C.Color)(unsafe.Pointer(&color)), cgoAllocsUnknown
	calpha, _ := (C.float)(alpha), cgoAllocsUnknown
	__ret := C.ColorAlpha(ccolor, calpha)
	__v := *newColorRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// ColorAlphaBlend function as declared in src/raylib.h:1251
func ColorAlphaBlend(dst Color, src Color, tint Color) Color {
	cdst, _ := *(*C.Color)(unsafe.Pointer(&dst)), cgoAllocsUnknown
	csrc, _ := *(*C.Color)(unsafe.Pointer(&src)), cgoAllocsUnknown
	ctint, _ := *(*C.Color)(unsafe.Pointer(&tint)), cgoAllocsUnknown
	__ret := C.ColorAlphaBlend(cdst, csrc, ctint)
	__v := *newColorRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// GetColor function as declared in src/raylib.h:1252
func GetColor(hexValue int32) Color {
	chexValue, _ := (C.int)(hexValue), cgoAllocsUnknown
	__ret := C.GetColor(chexValue)
	__v := *newColorRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// GetPixelColor function as declared in src/raylib.h:1253
func GetPixelColor(srcPtr unsafe.Pointer, format int32) Color {
	csrcPtr, _ := srcPtr, cgoAllocsUnknown
	cformat, _ := (C.int)(format), cgoAllocsUnknown
	__ret := C.GetPixelColor(csrcPtr, cformat)
	__v := *newColorRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// SetPixelColor function as declared in src/raylib.h:1254
func SetPixelColor(dstPtr unsafe.Pointer, color Color, format int32) {
	cdstPtr, _ := dstPtr, cgoAllocsUnknown
	ccolor, _ := *(*C.Color)(unsafe.Pointer(&color)), cgoAllocsUnknown
	cformat, _ := (C.int)(format), cgoAllocsUnknown
	C.SetPixelColor(cdstPtr, ccolor, cformat)
}

// GetPixelDataSize function as declared in src/raylib.h:1255
func GetPixelDataSize(width int32, height int32, format int32) int32 {
	cwidth, _ := (C.int)(width), cgoAllocsUnknown
	cheight, _ := (C.int)(height), cgoAllocsUnknown
	cformat, _ := (C.int)(format), cgoAllocsUnknown
	__ret := C.GetPixelDataSize(cwidth, cheight, cformat)
	__v := (int32)(__ret)
	return __v
}

// GetFontDefault function as declared in src/raylib.h:1262
func GetFontDefault() Font {
	__ret := C.GetFontDefault()
	__v := *newFontRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// LoadFont function as declared in src/raylib.h:1263
func LoadFont(fileName string) Font {
	fileName = safeString(fileName)
	cfileName, _ := unpackPCharString(fileName)
	__ret := C.LoadFont(cfileName)
	runtime.KeepAlive(fileName)
	__v := *newFontRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// LoadFontEx function as declared in src/raylib.h:1264
func LoadFontEx(fileName string, fontSize int32, fontChars *int32, charsCount int32) Font {
	fileName = safeString(fileName)
	cfileName, _ := unpackPCharString(fileName)
	cfontSize, _ := (C.int)(fontSize), cgoAllocsUnknown
	cfontChars, _ := (*C.int)(unsafe.Pointer(fontChars)), cgoAllocsUnknown
	ccharsCount, _ := (C.int)(charsCount), cgoAllocsUnknown
	__ret := C.LoadFontEx(cfileName, cfontSize, cfontChars, ccharsCount)
	runtime.KeepAlive(fileName)
	__v := *newFontRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// LoadFontFromImage function as declared in src/raylib.h:1265
func LoadFontFromImage(image Image, key Color, firstChar int32) Font {
	cimage, _ := *(*C.Image)(unsafe.Pointer(&image)), cgoAllocsUnknown
	ckey, _ := *(*C.Color)(unsafe.Pointer(&key)), cgoAllocsUnknown
	cfirstChar, _ := (C.int)(firstChar), cgoAllocsUnknown
	__ret := C.LoadFontFromImage(cimage, ckey, cfirstChar)
	__v := *newFontRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// LoadFontFromMemory function as declared in src/raylib.h:1266
func LoadFontFromMemory(fileType string, fileData []byte, dataSize int32, fontSize int32, fontChars *int32, charsCount int32) Font {
	fileType = safeString(fileType)
	cfileType, _ := unpackPCharString(fileType)
	cfileData, _ := (*C.uchar)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&fileData)).Data)), cgoAllocsUnknown
	cdataSize, _ := (C.int)(dataSize), cgoAllocsUnknown
	cfontSize, _ := (C.int)(fontSize), cgoAllocsUnknown
	cfontChars, _ := (*C.int)(unsafe.Pointer(fontChars)), cgoAllocsUnknown
	ccharsCount, _ := (C.int)(charsCount), cgoAllocsUnknown
	__ret := C.LoadFontFromMemory(cfileType, cfileData, cdataSize, cfontSize, cfontChars, ccharsCount)
	runtime.KeepAlive(fileType)
	__v := *newFontRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// LoadFontData function as declared in src/raylib.h:1268
func LoadFontData(fileData *byte, dataSize int32, fontSize int32, fontChars *int32, charsCount int32, kind int32) *CharInfo {
	cfileData, _ := (*C.uchar)(unsafe.Pointer(fileData)), cgoAllocsUnknown
	cdataSize, _ := (C.int)(dataSize), cgoAllocsUnknown
	cfontSize, _ := (C.int)(fontSize), cgoAllocsUnknown
	cfontChars, _ := (*C.int)(unsafe.Pointer(fontChars)), cgoAllocsUnknown
	ccharsCount, _ := (C.int)(charsCount), cgoAllocsUnknown
	ckind, _ := (C.int)(kind), cgoAllocsUnknown
	__ret := C.LoadFontData(cfileData, cdataSize, cfontSize, cfontChars, ccharsCount, ckind)
	__v := newCharInfoRef(unsafe.Pointer(__ret)).convert()
	return __v
}

// UnloadFontData function as declared in src/raylib.h:1271
func UnloadFontData(chars *CharInfo, charsCount int32) {
	cchars, _ := (*C.CharInfo)(unsafe.Pointer(chars)), cgoAllocsUnknown
	ccharsCount, _ := (C.int)(charsCount), cgoAllocsUnknown
	C.UnloadFontData(cchars, ccharsCount)
}

// UnloadFont function as declared in src/raylib.h:1272
func UnloadFont(font Font) {
	cfont, _ := *(*C.Font)(unsafe.Pointer(&font)), cgoAllocsUnknown
	C.UnloadFont(cfont)
}

// DrawFPS function as declared in src/raylib.h:1275
func DrawFPS(posX int32, posY int32) {
	cposX, _ := (C.int)(posX), cgoAllocsUnknown
	cposY, _ := (C.int)(posY), cgoAllocsUnknown
	C.DrawFPS(cposX, cposY)
}

// DrawText function as declared in src/raylib.h:1276
func DrawText(text string, posX int32, posY int32, fontSize int32, color Color) {
	text = safeString(text)
	ctext, _ := unpackPCharString(text)
	cposX, _ := (C.int)(posX), cgoAllocsUnknown
	cposY, _ := (C.int)(posY), cgoAllocsUnknown
	cfontSize, _ := (C.int)(fontSize), cgoAllocsUnknown
	ccolor, _ := *(*C.Color)(unsafe.Pointer(&color)), cgoAllocsUnknown
	C.DrawText(ctext, cposX, cposY, cfontSize, ccolor)
	runtime.KeepAlive(text)
}

// DrawTextEx function as declared in src/raylib.h:1277
func DrawTextEx(font Font, text string, position Vector2, fontSize float32, spacing float32, tint Color) {
	cfont, _ := *(*C.Font)(unsafe.Pointer(&font)), cgoAllocsUnknown
	text = safeString(text)
	ctext, _ := unpackPCharString(text)
	cposition, _ := *(*C.Vector2)(unsafe.Pointer(&position)), cgoAllocsUnknown
	cfontSize, _ := (C.float)(fontSize), cgoAllocsUnknown
	cspacing, _ := (C.float)(spacing), cgoAllocsUnknown
	ctint, _ := *(*C.Color)(unsafe.Pointer(&tint)), cgoAllocsUnknown
	C.DrawTextEx(cfont, ctext, cposition, cfontSize, cspacing, ctint)
	runtime.KeepAlive(text)
}

// DrawTextRec function as declared in src/raylib.h:1278
func DrawTextRec(font Font, text string, rec Rectangle, fontSize float32, spacing float32, wordWrap bool, tint Color) {
	cfont, _ := *(*C.Font)(unsafe.Pointer(&font)), cgoAllocsUnknown
	text = safeString(text)
	ctext, _ := unpackPCharString(text)
	crec, _ := *(*C.Rectangle)(unsafe.Pointer(&rec)), cgoAllocsUnknown
	cfontSize, _ := (C.float)(fontSize), cgoAllocsUnknown
	cspacing, _ := (C.float)(spacing), cgoAllocsUnknown
	cwordWrap, _ := (C._Bool)(wordWrap), cgoAllocsUnknown
	ctint, _ := *(*C.Color)(unsafe.Pointer(&tint)), cgoAllocsUnknown
	C.DrawTextRec(cfont, ctext, crec, cfontSize, cspacing, cwordWrap, ctint)
	runtime.KeepAlive(text)
}

// DrawTextRecEx function as declared in src/raylib.h:1279
func DrawTextRecEx(font Font, text string, rec Rectangle, fontSize float32, spacing float32, wordWrap bool, tint Color, selectStart int32, selectLength int32, selectTint Color, selectBackTint Color) {
	cfont, _ := *(*C.Font)(unsafe.Pointer(&font)), cgoAllocsUnknown
	text = safeString(text)
	ctext, _ := unpackPCharString(text)
	crec, _ := *(*C.Rectangle)(unsafe.Pointer(&rec)), cgoAllocsUnknown
	cfontSize, _ := (C.float)(fontSize), cgoAllocsUnknown
	cspacing, _ := (C.float)(spacing), cgoAllocsUnknown
	cwordWrap, _ := (C._Bool)(wordWrap), cgoAllocsUnknown
	ctint, _ := *(*C.Color)(unsafe.Pointer(&tint)), cgoAllocsUnknown
	cselectStart, _ := (C.int)(selectStart), cgoAllocsUnknown
	cselectLength, _ := (C.int)(selectLength), cgoAllocsUnknown
	cselectTint, _ := *(*C.Color)(unsafe.Pointer(&selectTint)), cgoAllocsUnknown
	cselectBackTint, _ := *(*C.Color)(unsafe.Pointer(&selectBackTint)), cgoAllocsUnknown
	C.DrawTextRecEx(cfont, ctext, crec, cfontSize, cspacing, cwordWrap, ctint, cselectStart, cselectLength, cselectTint, cselectBackTint)
	runtime.KeepAlive(text)
}

// DrawTextCodepoint function as declared in src/raylib.h:1281
func DrawTextCodepoint(font Font, codepoint int32, position Vector2, fontSize float32, tint Color) {
	cfont, _ := *(*C.Font)(unsafe.Pointer(&font)), cgoAllocsUnknown
	ccodepoint, _ := (C.int)(codepoint), cgoAllocsUnknown
	cposition, _ := *(*C.Vector2)(unsafe.Pointer(&position)), cgoAllocsUnknown
	cfontSize, _ := (C.float)(fontSize), cgoAllocsUnknown
	ctint, _ := *(*C.Color)(unsafe.Pointer(&tint)), cgoAllocsUnknown
	C.DrawTextCodepoint(cfont, ccodepoint, cposition, cfontSize, ctint)
}

// MeasureText function as declared in src/raylib.h:1284
func MeasureText(text string, fontSize int32) int32 {
	text = safeString(text)
	ctext, _ := unpackPCharString(text)
	cfontSize, _ := (C.int)(fontSize), cgoAllocsUnknown
	__ret := C.MeasureText(ctext, cfontSize)
	runtime.KeepAlive(text)
	__v := (int32)(__ret)
	return __v
}

// MeasureTextEx function as declared in src/raylib.h:1285
func MeasureTextEx(font Font, text string, fontSize float32, spacing float32) Vector2 {
	cfont, _ := *(*C.Font)(unsafe.Pointer(&font)), cgoAllocsUnknown
	text = safeString(text)
	ctext, _ := unpackPCharString(text)
	cfontSize, _ := (C.float)(fontSize), cgoAllocsUnknown
	cspacing, _ := (C.float)(spacing), cgoAllocsUnknown
	__ret := C.MeasureTextEx(cfont, ctext, cfontSize, cspacing)
	runtime.KeepAlive(text)
	__v := *newVector2Ref(unsafe.Pointer(&__ret)).convert()
	return __v
}

// GetGlyphIndex function as declared in src/raylib.h:1286
func GetGlyphIndex(font Font, codepoint int32) int32 {
	cfont, _ := *(*C.Font)(unsafe.Pointer(&font)), cgoAllocsUnknown
	ccodepoint, _ := (C.int)(codepoint), cgoAllocsUnknown
	__ret := C.GetGlyphIndex(cfont, ccodepoint)
	__v := (int32)(__ret)
	return __v
}

// TextCopy function as declared in src/raylib.h:1290
func TextCopy(dst *byte, src string) int32 {
	cdst, _ := (*C.char)(unsafe.Pointer(dst)), cgoAllocsUnknown
	src = safeString(src)
	csrc, _ := unpackPCharString(src)
	__ret := C.TextCopy(cdst, csrc)
	runtime.KeepAlive(src)
	__v := (int32)(__ret)
	return __v
}

// TextIsEqual function as declared in src/raylib.h:1291
func TextIsEqual(text1 string, text2 string) bool {
	text1 = safeString(text1)
	ctext1, _ := unpackPCharString(text1)
	text2 = safeString(text2)
	ctext2, _ := unpackPCharString(text2)
	__ret := C.TextIsEqual(ctext1, ctext2)
	runtime.KeepAlive(text2)
	runtime.KeepAlive(text1)
	__v := (bool)(__ret)
	return __v
}

// TextLength function as declared in src/raylib.h:1292
func TextLength(text string) uint32 {
	text = safeString(text)
	ctext, _ := unpackPCharString(text)
	__ret := C.TextLength(ctext)
	runtime.KeepAlive(text)
	__v := (uint32)(__ret)
	return __v
}

// TextSubtext function as declared in src/raylib.h:1294
func TextSubtext(text string, position int32, length int32) string {
	text = safeString(text)
	ctext, _ := unpackPCharString(text)
	cposition, _ := (C.int)(position), cgoAllocsUnknown
	clength, _ := (C.int)(length), cgoAllocsUnknown
	__ret := C.TextSubtext(ctext, cposition, clength)
	runtime.KeepAlive(text)
	__v := packPCharString(__ret)
	return __v
}

// TextReplace function as declared in src/raylib.h:1295
func TextReplace(text *byte, replace string, by string) *byte {
	ctext, _ := (*C.char)(unsafe.Pointer(text)), cgoAllocsUnknown
	replace = safeString(replace)
	creplace, _ := unpackPCharString(replace)
	by = safeString(by)
	cby, _ := unpackPCharString(by)
	__ret := C.TextReplace(ctext, creplace, cby)
	runtime.KeepAlive(by)
	runtime.KeepAlive(replace)
	__v := *(**byte)(unsafe.Pointer(&__ret))
	return __v
}

// TextInsert function as declared in src/raylib.h:1296
func TextInsert(text string, insert string, position int32) *byte {
	text = safeString(text)
	ctext, _ := unpackPCharString(text)
	insert = safeString(insert)
	cinsert, _ := unpackPCharString(insert)
	cposition, _ := (C.int)(position), cgoAllocsUnknown
	__ret := C.TextInsert(ctext, cinsert, cposition)
	runtime.KeepAlive(insert)
	runtime.KeepAlive(text)
	__v := *(**byte)(unsafe.Pointer(&__ret))
	return __v
}

// TextSplit function as declared in src/raylib.h:1298
func TextSplit(text string, delimiter byte, count *int32) *string {
	text = safeString(text)
	ctext, _ := unpackPCharString(text)
	cdelimiter, _ := (C.char)(delimiter), cgoAllocsUnknown
	ccount, _ := (*C.int)(unsafe.Pointer(count)), cgoAllocsUnknown
	__ret := C.TextSplit(ctext, cdelimiter, ccount)
	runtime.KeepAlive(text)
	__v := packPCharString(*__ret)
	return &__v
}

// TextAppend function as declared in src/raylib.h:1299
func TextAppend(text *byte, append string, position *int32) {
	ctext, _ := (*C.char)(unsafe.Pointer(text)), cgoAllocsUnknown
	append = safeString(append)
	cappend, _ := unpackPCharString(append)
	cposition, _ := (*C.int)(unsafe.Pointer(position)), cgoAllocsUnknown
	C.TextAppend(ctext, cappend, cposition)
	runtime.KeepAlive(append)
}

// TextFindIndex function as declared in src/raylib.h:1300
func TextFindIndex(text string, find string) int32 {
	text = safeString(text)
	ctext, _ := unpackPCharString(text)
	find = safeString(find)
	cfind, _ := unpackPCharString(find)
	__ret := C.TextFindIndex(ctext, cfind)
	runtime.KeepAlive(find)
	runtime.KeepAlive(text)
	__v := (int32)(__ret)
	return __v
}

// TextToUpper function as declared in src/raylib.h:1301
func TextToUpper(text string) string {
	text = safeString(text)
	ctext, _ := unpackPCharString(text)
	__ret := C.TextToUpper(ctext)
	runtime.KeepAlive(text)
	__v := packPCharString(__ret)
	return __v
}

// TextToLower function as declared in src/raylib.h:1302
func TextToLower(text string) string {
	text = safeString(text)
	ctext, _ := unpackPCharString(text)
	__ret := C.TextToLower(ctext)
	runtime.KeepAlive(text)
	__v := packPCharString(__ret)
	return __v
}

// TextToPascal function as declared in src/raylib.h:1303
func TextToPascal(text string) string {
	text = safeString(text)
	ctext, _ := unpackPCharString(text)
	__ret := C.TextToPascal(ctext)
	runtime.KeepAlive(text)
	__v := packPCharString(__ret)
	return __v
}

// TextToInteger function as declared in src/raylib.h:1304
func TextToInteger(text string) int32 {
	text = safeString(text)
	ctext, _ := unpackPCharString(text)
	__ret := C.TextToInteger(ctext)
	runtime.KeepAlive(text)
	__v := (int32)(__ret)
	return __v
}

// TextToUtf8 function as declared in src/raylib.h:1305
func TextToUtf8(codepoints *int32, length int32) *byte {
	ccodepoints, _ := (*C.int)(unsafe.Pointer(codepoints)), cgoAllocsUnknown
	clength, _ := (C.int)(length), cgoAllocsUnknown
	__ret := C.TextToUtf8(ccodepoints, clength)
	__v := *(**byte)(unsafe.Pointer(&__ret))
	return __v
}

// GetCodepoints function as declared in src/raylib.h:1308
func GetCodepoints(text string, count *int32) *int32 {
	text = safeString(text)
	ctext, _ := unpackPCharString(text)
	ccount, _ := (*C.int)(unsafe.Pointer(count)), cgoAllocsUnknown
	__ret := C.GetCodepoints(ctext, ccount)
	runtime.KeepAlive(text)
	__v := *(**int32)(unsafe.Pointer(&__ret))
	return __v
}

// GetCodepointsCount function as declared in src/raylib.h:1309
func GetCodepointsCount(text string) int32 {
	text = safeString(text)
	ctext, _ := unpackPCharString(text)
	__ret := C.GetCodepointsCount(ctext)
	runtime.KeepAlive(text)
	__v := (int32)(__ret)
	return __v
}

// GetNextCodepoint function as declared in src/raylib.h:1310
func GetNextCodepoint(text string, bytesProcessed *int32) int32 {
	text = safeString(text)
	ctext, _ := unpackPCharString(text)
	cbytesProcessed, _ := (*C.int)(unsafe.Pointer(bytesProcessed)), cgoAllocsUnknown
	__ret := C.GetNextCodepoint(ctext, cbytesProcessed)
	runtime.KeepAlive(text)
	__v := (int32)(__ret)
	return __v
}

// CodepointToUtf8 function as declared in src/raylib.h:1311
func CodepointToUtf8(codepoint int32, byteLength *int32) string {
	ccodepoint, _ := (C.int)(codepoint), cgoAllocsUnknown
	cbyteLength, _ := (*C.int)(unsafe.Pointer(byteLength)), cgoAllocsUnknown
	__ret := C.CodepointToUtf8(ccodepoint, cbyteLength)
	__v := packPCharString(__ret)
	return __v
}

// DrawLine3D function as declared in src/raylib.h:1318
func DrawLine3D(startPos Vector3, endPos Vector3, color Color) {
	cstartPos, _ := *(*C.Vector3)(unsafe.Pointer(&startPos)), cgoAllocsUnknown
	cendPos, _ := *(*C.Vector3)(unsafe.Pointer(&endPos)), cgoAllocsUnknown
	ccolor, _ := *(*C.Color)(unsafe.Pointer(&color)), cgoAllocsUnknown
	C.DrawLine3D(cstartPos, cendPos, ccolor)
}

// DrawPoint3D function as declared in src/raylib.h:1319
func DrawPoint3D(position Vector3, color Color) {
	cposition, _ := *(*C.Vector3)(unsafe.Pointer(&position)), cgoAllocsUnknown
	ccolor, _ := *(*C.Color)(unsafe.Pointer(&color)), cgoAllocsUnknown
	C.DrawPoint3D(cposition, ccolor)
}

// DrawCircle3D function as declared in src/raylib.h:1320
func DrawCircle3D(center Vector3, radius float32, rotationAxis Vector3, rotationAngle float32, color Color) {
	ccenter, _ := *(*C.Vector3)(unsafe.Pointer(&center)), cgoAllocsUnknown
	cradius, _ := (C.float)(radius), cgoAllocsUnknown
	crotationAxis, _ := *(*C.Vector3)(unsafe.Pointer(&rotationAxis)), cgoAllocsUnknown
	crotationAngle, _ := (C.float)(rotationAngle), cgoAllocsUnknown
	ccolor, _ := *(*C.Color)(unsafe.Pointer(&color)), cgoAllocsUnknown
	C.DrawCircle3D(ccenter, cradius, crotationAxis, crotationAngle, ccolor)
}

// DrawTriangle3D function as declared in src/raylib.h:1321
func DrawTriangle3D(v1 Vector3, v2 Vector3, v3 Vector3, color Color) {
	cv1, _ := *(*C.Vector3)(unsafe.Pointer(&v1)), cgoAllocsUnknown
	cv2, _ := *(*C.Vector3)(unsafe.Pointer(&v2)), cgoAllocsUnknown
	cv3, _ := *(*C.Vector3)(unsafe.Pointer(&v3)), cgoAllocsUnknown
	ccolor, _ := *(*C.Color)(unsafe.Pointer(&color)), cgoAllocsUnknown
	C.DrawTriangle3D(cv1, cv2, cv3, ccolor)
}

// DrawTriangleStrip3D function as declared in src/raylib.h:1322
func DrawTriangleStrip3D(points *Vector3, pointsCount int32, color Color) {
	cpoints, _ := (*C.Vector3)(unsafe.Pointer(points)), cgoAllocsUnknown
	cpointsCount, _ := (C.int)(pointsCount), cgoAllocsUnknown
	ccolor, _ := *(*C.Color)(unsafe.Pointer(&color)), cgoAllocsUnknown
	C.DrawTriangleStrip3D(cpoints, cpointsCount, ccolor)
}

// DrawCube function as declared in src/raylib.h:1323
func DrawCube(position Vector3, width float32, height float32, length float32, color Color) {
	cposition, _ := *(*C.Vector3)(unsafe.Pointer(&position)), cgoAllocsUnknown
	cwidth, _ := (C.float)(width), cgoAllocsUnknown
	cheight, _ := (C.float)(height), cgoAllocsUnknown
	clength, _ := (C.float)(length), cgoAllocsUnknown
	ccolor, _ := *(*C.Color)(unsafe.Pointer(&color)), cgoAllocsUnknown
	C.DrawCube(cposition, cwidth, cheight, clength, ccolor)
}

// DrawCubeV function as declared in src/raylib.h:1324
func DrawCubeV(position Vector3, size Vector3, color Color) {
	cposition, _ := *(*C.Vector3)(unsafe.Pointer(&position)), cgoAllocsUnknown
	csize, _ := *(*C.Vector3)(unsafe.Pointer(&size)), cgoAllocsUnknown
	ccolor, _ := *(*C.Color)(unsafe.Pointer(&color)), cgoAllocsUnknown
	C.DrawCubeV(cposition, csize, ccolor)
}

// DrawCubeWires function as declared in src/raylib.h:1325
func DrawCubeWires(position Vector3, width float32, height float32, length float32, color Color) {
	cposition, _ := *(*C.Vector3)(unsafe.Pointer(&position)), cgoAllocsUnknown
	cwidth, _ := (C.float)(width), cgoAllocsUnknown
	cheight, _ := (C.float)(height), cgoAllocsUnknown
	clength, _ := (C.float)(length), cgoAllocsUnknown
	ccolor, _ := *(*C.Color)(unsafe.Pointer(&color)), cgoAllocsUnknown
	C.DrawCubeWires(cposition, cwidth, cheight, clength, ccolor)
}

// DrawCubeWiresV function as declared in src/raylib.h:1326
func DrawCubeWiresV(position Vector3, size Vector3, color Color) {
	cposition, _ := *(*C.Vector3)(unsafe.Pointer(&position)), cgoAllocsUnknown
	csize, _ := *(*C.Vector3)(unsafe.Pointer(&size)), cgoAllocsUnknown
	ccolor, _ := *(*C.Color)(unsafe.Pointer(&color)), cgoAllocsUnknown
	C.DrawCubeWiresV(cposition, csize, ccolor)
}

// DrawCubeTexture function as declared in src/raylib.h:1327
func DrawCubeTexture(texture Texture2D, position Vector3, width float32, height float32, length float32, color Color) {
	ctexture, _ := *(*C.Texture2D)(unsafe.Pointer(&texture)), cgoAllocsUnknown
	cposition, _ := *(*C.Vector3)(unsafe.Pointer(&position)), cgoAllocsUnknown
	cwidth, _ := (C.float)(width), cgoAllocsUnknown
	cheight, _ := (C.float)(height), cgoAllocsUnknown
	clength, _ := (C.float)(length), cgoAllocsUnknown
	ccolor, _ := *(*C.Color)(unsafe.Pointer(&color)), cgoAllocsUnknown
	C.DrawCubeTexture(ctexture, cposition, cwidth, cheight, clength, ccolor)
}

// DrawSphere function as declared in src/raylib.h:1328
func DrawSphere(centerPos Vector3, radius float32, color Color) {
	ccenterPos, _ := *(*C.Vector3)(unsafe.Pointer(&centerPos)), cgoAllocsUnknown
	cradius, _ := (C.float)(radius), cgoAllocsUnknown
	ccolor, _ := *(*C.Color)(unsafe.Pointer(&color)), cgoAllocsUnknown
	C.DrawSphere(ccenterPos, cradius, ccolor)
}

// DrawSphereEx function as declared in src/raylib.h:1329
func DrawSphereEx(centerPos Vector3, radius float32, rings int32, slices int32, color Color) {
	ccenterPos, _ := *(*C.Vector3)(unsafe.Pointer(&centerPos)), cgoAllocsUnknown
	cradius, _ := (C.float)(radius), cgoAllocsUnknown
	crings, _ := (C.int)(rings), cgoAllocsUnknown
	cslices, _ := (C.int)(slices), cgoAllocsUnknown
	ccolor, _ := *(*C.Color)(unsafe.Pointer(&color)), cgoAllocsUnknown
	C.DrawSphereEx(ccenterPos, cradius, crings, cslices, ccolor)
}

// DrawSphereWires function as declared in src/raylib.h:1330
func DrawSphereWires(centerPos Vector3, radius float32, rings int32, slices int32, color Color) {
	ccenterPos, _ := *(*C.Vector3)(unsafe.Pointer(&centerPos)), cgoAllocsUnknown
	cradius, _ := (C.float)(radius), cgoAllocsUnknown
	crings, _ := (C.int)(rings), cgoAllocsUnknown
	cslices, _ := (C.int)(slices), cgoAllocsUnknown
	ccolor, _ := *(*C.Color)(unsafe.Pointer(&color)), cgoAllocsUnknown
	C.DrawSphereWires(ccenterPos, cradius, crings, cslices, ccolor)
}

// DrawCylinder function as declared in src/raylib.h:1331
func DrawCylinder(position Vector3, radiusTop float32, radiusBottom float32, height float32, slices int32, color Color) {
	cposition, _ := *(*C.Vector3)(unsafe.Pointer(&position)), cgoAllocsUnknown
	cradiusTop, _ := (C.float)(radiusTop), cgoAllocsUnknown
	cradiusBottom, _ := (C.float)(radiusBottom), cgoAllocsUnknown
	cheight, _ := (C.float)(height), cgoAllocsUnknown
	cslices, _ := (C.int)(slices), cgoAllocsUnknown
	ccolor, _ := *(*C.Color)(unsafe.Pointer(&color)), cgoAllocsUnknown
	C.DrawCylinder(cposition, cradiusTop, cradiusBottom, cheight, cslices, ccolor)
}

// DrawCylinderWires function as declared in src/raylib.h:1332
func DrawCylinderWires(position Vector3, radiusTop float32, radiusBottom float32, height float32, slices int32, color Color) {
	cposition, _ := *(*C.Vector3)(unsafe.Pointer(&position)), cgoAllocsUnknown
	cradiusTop, _ := (C.float)(radiusTop), cgoAllocsUnknown
	cradiusBottom, _ := (C.float)(radiusBottom), cgoAllocsUnknown
	cheight, _ := (C.float)(height), cgoAllocsUnknown
	cslices, _ := (C.int)(slices), cgoAllocsUnknown
	ccolor, _ := *(*C.Color)(unsafe.Pointer(&color)), cgoAllocsUnknown
	C.DrawCylinderWires(cposition, cradiusTop, cradiusBottom, cheight, cslices, ccolor)
}

// DrawPlane function as declared in src/raylib.h:1333
func DrawPlane(centerPos Vector3, size Vector2, color Color) {
	ccenterPos, _ := *(*C.Vector3)(unsafe.Pointer(&centerPos)), cgoAllocsUnknown
	csize, _ := *(*C.Vector2)(unsafe.Pointer(&size)), cgoAllocsUnknown
	ccolor, _ := *(*C.Color)(unsafe.Pointer(&color)), cgoAllocsUnknown
	C.DrawPlane(ccenterPos, csize, ccolor)
}

// DrawRay function as declared in src/raylib.h:1334
func DrawRay(ray Ray, color Color) {
	cray, _ := *(*C.Ray)(unsafe.Pointer(&ray)), cgoAllocsUnknown
	ccolor, _ := *(*C.Color)(unsafe.Pointer(&color)), cgoAllocsUnknown
	C.DrawRay(cray, ccolor)
}

// DrawGrid function as declared in src/raylib.h:1335
func DrawGrid(slices int32, spacing float32) {
	cslices, _ := (C.int)(slices), cgoAllocsUnknown
	cspacing, _ := (C.float)(spacing), cgoAllocsUnknown
	C.DrawGrid(cslices, cspacing)
}

// DrawGizmo function as declared in src/raylib.h:1336
func DrawGizmo(position Vector3) {
	cposition, _ := *(*C.Vector3)(unsafe.Pointer(&position)), cgoAllocsUnknown
	C.DrawGizmo(cposition)
}

// LoadModel function as declared in src/raylib.h:1343
func LoadModel(fileName string) Model {
	fileName = safeString(fileName)
	cfileName, _ := unpackPCharString(fileName)
	__ret := C.LoadModel(cfileName)
	runtime.KeepAlive(fileName)
	__v := *newModelRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// LoadModelFromMesh function as declared in src/raylib.h:1344
func LoadModelFromMesh(mesh Mesh) Model {
	cmesh, _ := *(*C.Mesh)(unsafe.Pointer(&mesh)), cgoAllocsUnknown
	__ret := C.LoadModelFromMesh(cmesh)
	__v := *newModelRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// UnloadModel function as declared in src/raylib.h:1345
func UnloadModel(model Model) {
	cmodel, _ := *(*C.Model)(unsafe.Pointer(&model)), cgoAllocsUnknown
	C.UnloadModel(cmodel)
}

// UnloadModelKeepMeshes function as declared in src/raylib.h:1346
func UnloadModelKeepMeshes(model Model) {
	cmodel, _ := *(*C.Model)(unsafe.Pointer(&model)), cgoAllocsUnknown
	C.UnloadModelKeepMeshes(cmodel)
}

// LoadMeshes function as declared in src/raylib.h:1349
func LoadMeshes(fileName string, meshCount *int32) *Mesh {
	fileName = safeString(fileName)
	cfileName, _ := unpackPCharString(fileName)
	cmeshCount, _ := (*C.int)(unsafe.Pointer(meshCount)), cgoAllocsUnknown
	__ret := C.LoadMeshes(cfileName, cmeshCount)
	runtime.KeepAlive(fileName)
	__v := newMeshRef(unsafe.Pointer(__ret)).convert()
	return __v
}

// UnloadMesh function as declared in src/raylib.h:1350
func UnloadMesh(mesh Mesh) {
	cmesh, _ := *(*C.Mesh)(unsafe.Pointer(&mesh)), cgoAllocsUnknown
	C.UnloadMesh(cmesh)
}

// ExportMesh function as declared in src/raylib.h:1351
func ExportMesh(mesh Mesh, fileName string) bool {
	cmesh, _ := *(*C.Mesh)(unsafe.Pointer(&mesh)), cgoAllocsUnknown
	fileName = safeString(fileName)
	cfileName, _ := unpackPCharString(fileName)
	__ret := C.ExportMesh(cmesh, cfileName)
	runtime.KeepAlive(fileName)
	__v := (bool)(__ret)
	return __v
}

// LoadMaterials function as declared in src/raylib.h:1354
func LoadMaterials(fileName string, materialCount *int32) *Material {
	fileName = safeString(fileName)
	cfileName, _ := unpackPCharString(fileName)
	cmaterialCount, _ := (*C.int)(unsafe.Pointer(materialCount)), cgoAllocsUnknown
	__ret := C.LoadMaterials(cfileName, cmaterialCount)
	runtime.KeepAlive(fileName)
	__v := newMaterialRef(unsafe.Pointer(__ret)).convert()
	return __v
}

// LoadMaterialDefault function as declared in src/raylib.h:1355
func LoadMaterialDefault() Material {
	__ret := C.LoadMaterialDefault()
	__v := *newMaterialRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// UnloadMaterial function as declared in src/raylib.h:1356
func UnloadMaterial(material Material) {
	cmaterial, _ := *(*C.Material)(unsafe.Pointer(&material)), cgoAllocsUnknown
	C.UnloadMaterial(cmaterial)
}

// SetMaterialTexture function as declared in src/raylib.h:1357
func SetMaterialTexture(material *Material, mapType int32, texture Texture2D) {
	cmaterial, _ := (*C.Material)(unsafe.Pointer(material)), cgoAllocsUnknown
	cmapType, _ := (C.int)(mapType), cgoAllocsUnknown
	ctexture, _ := *(*C.Texture2D)(unsafe.Pointer(&texture)), cgoAllocsUnknown
	C.SetMaterialTexture(cmaterial, cmapType, ctexture)
}

// SetModelMeshMaterial function as declared in src/raylib.h:1358
func SetModelMeshMaterial(model *Model, meshId int32, materialId int32) {
	cmodel, _ := (*C.Model)(unsafe.Pointer(model)), cgoAllocsUnknown
	cmeshId, _ := (C.int)(meshId), cgoAllocsUnknown
	cmaterialId, _ := (C.int)(materialId), cgoAllocsUnknown
	C.SetModelMeshMaterial(cmodel, cmeshId, cmaterialId)
}

// LoadModelAnimations function as declared in src/raylib.h:1361
func LoadModelAnimations(fileName string, animsCount *int32) *ModelAnimation {
	fileName = safeString(fileName)
	cfileName, _ := unpackPCharString(fileName)
	canimsCount, _ := (*C.int)(unsafe.Pointer(animsCount)), cgoAllocsUnknown
	__ret := C.LoadModelAnimations(cfileName, canimsCount)
	runtime.KeepAlive(fileName)
	__v := newModelAnimationRef(unsafe.Pointer(__ret)).convert()
	return __v
}

// UpdateModelAnimation function as declared in src/raylib.h:1362
func UpdateModelAnimation(model Model, anim ModelAnimation, frame int32) {
	cmodel, _ := *(*C.Model)(unsafe.Pointer(&model)), cgoAllocsUnknown
	canim, _ := *(*C.ModelAnimation)(unsafe.Pointer(&anim)), cgoAllocsUnknown
	cframe, _ := (C.int)(frame), cgoAllocsUnknown
	C.UpdateModelAnimation(cmodel, canim, cframe)
}

// UnloadModelAnimation function as declared in src/raylib.h:1363
func UnloadModelAnimation(anim ModelAnimation) {
	canim, _ := *(*C.ModelAnimation)(unsafe.Pointer(&anim)), cgoAllocsUnknown
	C.UnloadModelAnimation(canim)
}

// IsModelAnimationValid function as declared in src/raylib.h:1364
func IsModelAnimationValid(model Model, anim ModelAnimation) bool {
	cmodel, _ := *(*C.Model)(unsafe.Pointer(&model)), cgoAllocsUnknown
	canim, _ := *(*C.ModelAnimation)(unsafe.Pointer(&anim)), cgoAllocsUnknown
	__ret := C.IsModelAnimationValid(cmodel, canim)
	__v := (bool)(__ret)
	return __v
}

// GenMeshPoly function as declared in src/raylib.h:1367
func GenMeshPoly(sides int32, radius float32) Mesh {
	csides, _ := (C.int)(sides), cgoAllocsUnknown
	cradius, _ := (C.float)(radius), cgoAllocsUnknown
	__ret := C.GenMeshPoly(csides, cradius)
	__v := *newMeshRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// GenMeshPlane function as declared in src/raylib.h:1368
func GenMeshPlane(width float32, length float32, resX int32, resZ int32) Mesh {
	cwidth, _ := (C.float)(width), cgoAllocsUnknown
	clength, _ := (C.float)(length), cgoAllocsUnknown
	cresX, _ := (C.int)(resX), cgoAllocsUnknown
	cresZ, _ := (C.int)(resZ), cgoAllocsUnknown
	__ret := C.GenMeshPlane(cwidth, clength, cresX, cresZ)
	__v := *newMeshRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// GenMeshCube function as declared in src/raylib.h:1369
func GenMeshCube(width float32, height float32, length float32) Mesh {
	cwidth, _ := (C.float)(width), cgoAllocsUnknown
	cheight, _ := (C.float)(height), cgoAllocsUnknown
	clength, _ := (C.float)(length), cgoAllocsUnknown
	__ret := C.GenMeshCube(cwidth, cheight, clength)
	__v := *newMeshRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// GenMeshSphere function as declared in src/raylib.h:1370
func GenMeshSphere(radius float32, rings int32, slices int32) Mesh {
	cradius, _ := (C.float)(radius), cgoAllocsUnknown
	crings, _ := (C.int)(rings), cgoAllocsUnknown
	cslices, _ := (C.int)(slices), cgoAllocsUnknown
	__ret := C.GenMeshSphere(cradius, crings, cslices)
	__v := *newMeshRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// GenMeshHemiSphere function as declared in src/raylib.h:1371
func GenMeshHemiSphere(radius float32, rings int32, slices int32) Mesh {
	cradius, _ := (C.float)(radius), cgoAllocsUnknown
	crings, _ := (C.int)(rings), cgoAllocsUnknown
	cslices, _ := (C.int)(slices), cgoAllocsUnknown
	__ret := C.GenMeshHemiSphere(cradius, crings, cslices)
	__v := *newMeshRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// GenMeshCylinder function as declared in src/raylib.h:1372
func GenMeshCylinder(radius float32, height float32, slices int32) Mesh {
	cradius, _ := (C.float)(radius), cgoAllocsUnknown
	cheight, _ := (C.float)(height), cgoAllocsUnknown
	cslices, _ := (C.int)(slices), cgoAllocsUnknown
	__ret := C.GenMeshCylinder(cradius, cheight, cslices)
	__v := *newMeshRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// GenMeshTorus function as declared in src/raylib.h:1373
func GenMeshTorus(radius float32, size float32, radSeg int32, sides int32) Mesh {
	cradius, _ := (C.float)(radius), cgoAllocsUnknown
	csize, _ := (C.float)(size), cgoAllocsUnknown
	cradSeg, _ := (C.int)(radSeg), cgoAllocsUnknown
	csides, _ := (C.int)(sides), cgoAllocsUnknown
	__ret := C.GenMeshTorus(cradius, csize, cradSeg, csides)
	__v := *newMeshRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// GenMeshKnot function as declared in src/raylib.h:1374
func GenMeshKnot(radius float32, size float32, radSeg int32, sides int32) Mesh {
	cradius, _ := (C.float)(radius), cgoAllocsUnknown
	csize, _ := (C.float)(size), cgoAllocsUnknown
	cradSeg, _ := (C.int)(radSeg), cgoAllocsUnknown
	csides, _ := (C.int)(sides), cgoAllocsUnknown
	__ret := C.GenMeshKnot(cradius, csize, cradSeg, csides)
	__v := *newMeshRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// GenMeshHeightmap function as declared in src/raylib.h:1375
func GenMeshHeightmap(heightmap Image, size Vector3) Mesh {
	cheightmap, _ := *(*C.Image)(unsafe.Pointer(&heightmap)), cgoAllocsUnknown
	csize, _ := *(*C.Vector3)(unsafe.Pointer(&size)), cgoAllocsUnknown
	__ret := C.GenMeshHeightmap(cheightmap, csize)
	__v := *newMeshRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// GenMeshCubicmap function as declared in src/raylib.h:1376
func GenMeshCubicmap(cubicmap Image, cubeSize Vector3) Mesh {
	ccubicmap, _ := *(*C.Image)(unsafe.Pointer(&cubicmap)), cgoAllocsUnknown
	ccubeSize, _ := *(*C.Vector3)(unsafe.Pointer(&cubeSize)), cgoAllocsUnknown
	__ret := C.GenMeshCubicmap(ccubicmap, ccubeSize)
	__v := *newMeshRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// MeshBoundingBox function as declared in src/raylib.h:1379
func MeshBoundingBox(mesh Mesh) BoundingBox {
	cmesh, _ := *(*C.Mesh)(unsafe.Pointer(&mesh)), cgoAllocsUnknown
	__ret := C.MeshBoundingBox(cmesh)
	__v := *newBoundingBoxRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// MeshTangents function as declared in src/raylib.h:1380
func MeshTangents(mesh *Mesh) {
	cmesh, _ := (*C.Mesh)(unsafe.Pointer(mesh)), cgoAllocsUnknown
	C.MeshTangents(cmesh)
}

// MeshBinormals function as declared in src/raylib.h:1381
func MeshBinormals(mesh *Mesh) {
	cmesh, _ := (*C.Mesh)(unsafe.Pointer(mesh)), cgoAllocsUnknown
	C.MeshBinormals(cmesh)
}

// MeshNormalsSmooth function as declared in src/raylib.h:1382
func MeshNormalsSmooth(mesh *Mesh) {
	cmesh, _ := (*C.Mesh)(unsafe.Pointer(mesh)), cgoAllocsUnknown
	C.MeshNormalsSmooth(cmesh)
}

// DrawModel function as declared in src/raylib.h:1385
func DrawModel(model Model, position Vector3, scale float32, tint Color) {
	cmodel, _ := *(*C.Model)(unsafe.Pointer(&model)), cgoAllocsUnknown
	cposition, _ := *(*C.Vector3)(unsafe.Pointer(&position)), cgoAllocsUnknown
	cscale, _ := (C.float)(scale), cgoAllocsUnknown
	ctint, _ := *(*C.Color)(unsafe.Pointer(&tint)), cgoAllocsUnknown
	C.DrawModel(cmodel, cposition, cscale, ctint)
}

// DrawModelEx function as declared in src/raylib.h:1386
func DrawModelEx(model Model, position Vector3, rotationAxis Vector3, rotationAngle float32, scale Vector3, tint Color) {
	cmodel, _ := *(*C.Model)(unsafe.Pointer(&model)), cgoAllocsUnknown
	cposition, _ := *(*C.Vector3)(unsafe.Pointer(&position)), cgoAllocsUnknown
	crotationAxis, _ := *(*C.Vector3)(unsafe.Pointer(&rotationAxis)), cgoAllocsUnknown
	crotationAngle, _ := (C.float)(rotationAngle), cgoAllocsUnknown
	cscale, _ := *(*C.Vector3)(unsafe.Pointer(&scale)), cgoAllocsUnknown
	ctint, _ := *(*C.Color)(unsafe.Pointer(&tint)), cgoAllocsUnknown
	C.DrawModelEx(cmodel, cposition, crotationAxis, crotationAngle, cscale, ctint)
}

// DrawModelWires function as declared in src/raylib.h:1387
func DrawModelWires(model Model, position Vector3, scale float32, tint Color) {
	cmodel, _ := *(*C.Model)(unsafe.Pointer(&model)), cgoAllocsUnknown
	cposition, _ := *(*C.Vector3)(unsafe.Pointer(&position)), cgoAllocsUnknown
	cscale, _ := (C.float)(scale), cgoAllocsUnknown
	ctint, _ := *(*C.Color)(unsafe.Pointer(&tint)), cgoAllocsUnknown
	C.DrawModelWires(cmodel, cposition, cscale, ctint)
}

// DrawModelWiresEx function as declared in src/raylib.h:1388
func DrawModelWiresEx(model Model, position Vector3, rotationAxis Vector3, rotationAngle float32, scale Vector3, tint Color) {
	cmodel, _ := *(*C.Model)(unsafe.Pointer(&model)), cgoAllocsUnknown
	cposition, _ := *(*C.Vector3)(unsafe.Pointer(&position)), cgoAllocsUnknown
	crotationAxis, _ := *(*C.Vector3)(unsafe.Pointer(&rotationAxis)), cgoAllocsUnknown
	crotationAngle, _ := (C.float)(rotationAngle), cgoAllocsUnknown
	cscale, _ := *(*C.Vector3)(unsafe.Pointer(&scale)), cgoAllocsUnknown
	ctint, _ := *(*C.Color)(unsafe.Pointer(&tint)), cgoAllocsUnknown
	C.DrawModelWiresEx(cmodel, cposition, crotationAxis, crotationAngle, cscale, ctint)
}

// DrawBoundingBox function as declared in src/raylib.h:1389
func DrawBoundingBox(box BoundingBox, color Color) {
	cbox, _ := *(*C.BoundingBox)(unsafe.Pointer(&box)), cgoAllocsUnknown
	ccolor, _ := *(*C.Color)(unsafe.Pointer(&color)), cgoAllocsUnknown
	C.DrawBoundingBox(cbox, ccolor)
}

// DrawBillboard function as declared in src/raylib.h:1390
func DrawBillboard(camera Camera, texture Texture2D, center Vector3, size float32, tint Color) {
	ccamera, _ := *(*C.Camera)(unsafe.Pointer(&camera)), cgoAllocsUnknown
	ctexture, _ := *(*C.Texture2D)(unsafe.Pointer(&texture)), cgoAllocsUnknown
	ccenter, _ := *(*C.Vector3)(unsafe.Pointer(&center)), cgoAllocsUnknown
	csize, _ := (C.float)(size), cgoAllocsUnknown
	ctint, _ := *(*C.Color)(unsafe.Pointer(&tint)), cgoAllocsUnknown
	C.DrawBillboard(ccamera, ctexture, ccenter, csize, ctint)
}

// DrawBillboardRec function as declared in src/raylib.h:1391
func DrawBillboardRec(camera Camera, texture Texture2D, source Rectangle, center Vector3, size float32, tint Color) {
	ccamera, _ := *(*C.Camera)(unsafe.Pointer(&camera)), cgoAllocsUnknown
	ctexture, _ := *(*C.Texture2D)(unsafe.Pointer(&texture)), cgoAllocsUnknown
	csource, _ := *(*C.Rectangle)(unsafe.Pointer(&source)), cgoAllocsUnknown
	ccenter, _ := *(*C.Vector3)(unsafe.Pointer(&center)), cgoAllocsUnknown
	csize, _ := (C.float)(size), cgoAllocsUnknown
	ctint, _ := *(*C.Color)(unsafe.Pointer(&tint)), cgoAllocsUnknown
	C.DrawBillboardRec(ccamera, ctexture, csource, ccenter, csize, ctint)
}

// CheckCollisionSpheres function as declared in src/raylib.h:1394
func CheckCollisionSpheres(center1 Vector3, radius1 float32, center2 Vector3, radius2 float32) bool {
	ccenter1, _ := *(*C.Vector3)(unsafe.Pointer(&center1)), cgoAllocsUnknown
	cradius1, _ := (C.float)(radius1), cgoAllocsUnknown
	ccenter2, _ := *(*C.Vector3)(unsafe.Pointer(&center2)), cgoAllocsUnknown
	cradius2, _ := (C.float)(radius2), cgoAllocsUnknown
	__ret := C.CheckCollisionSpheres(ccenter1, cradius1, ccenter2, cradius2)
	__v := (bool)(__ret)
	return __v
}

// CheckCollisionBoxes function as declared in src/raylib.h:1395
func CheckCollisionBoxes(box1 BoundingBox, box2 BoundingBox) bool {
	cbox1, _ := *(*C.BoundingBox)(unsafe.Pointer(&box1)), cgoAllocsUnknown
	cbox2, _ := *(*C.BoundingBox)(unsafe.Pointer(&box2)), cgoAllocsUnknown
	__ret := C.CheckCollisionBoxes(cbox1, cbox2)
	__v := (bool)(__ret)
	return __v
}

// CheckCollisionBoxSphere function as declared in src/raylib.h:1396
func CheckCollisionBoxSphere(box BoundingBox, center Vector3, radius float32) bool {
	cbox, _ := *(*C.BoundingBox)(unsafe.Pointer(&box)), cgoAllocsUnknown
	ccenter, _ := *(*C.Vector3)(unsafe.Pointer(&center)), cgoAllocsUnknown
	cradius, _ := (C.float)(radius), cgoAllocsUnknown
	__ret := C.CheckCollisionBoxSphere(cbox, ccenter, cradius)
	__v := (bool)(__ret)
	return __v
}

// CheckCollisionRaySphere function as declared in src/raylib.h:1397
func CheckCollisionRaySphere(ray Ray, center Vector3, radius float32) bool {
	cray, _ := *(*C.Ray)(unsafe.Pointer(&ray)), cgoAllocsUnknown
	ccenter, _ := *(*C.Vector3)(unsafe.Pointer(&center)), cgoAllocsUnknown
	cradius, _ := (C.float)(radius), cgoAllocsUnknown
	__ret := C.CheckCollisionRaySphere(cray, ccenter, cradius)
	__v := (bool)(__ret)
	return __v
}

// CheckCollisionRaySphereEx function as declared in src/raylib.h:1398
func CheckCollisionRaySphereEx(ray Ray, center Vector3, radius float32, collisionPoint *Vector3) bool {
	cray, _ := *(*C.Ray)(unsafe.Pointer(&ray)), cgoAllocsUnknown
	ccenter, _ := *(*C.Vector3)(unsafe.Pointer(&center)), cgoAllocsUnknown
	cradius, _ := (C.float)(radius), cgoAllocsUnknown
	ccollisionPoint, _ := (*C.Vector3)(unsafe.Pointer(collisionPoint)), cgoAllocsUnknown
	__ret := C.CheckCollisionRaySphereEx(cray, ccenter, cradius, ccollisionPoint)
	__v := (bool)(__ret)
	return __v
}

// CheckCollisionRayBox function as declared in src/raylib.h:1399
func CheckCollisionRayBox(ray Ray, box BoundingBox) bool {
	cray, _ := *(*C.Ray)(unsafe.Pointer(&ray)), cgoAllocsUnknown
	cbox, _ := *(*C.BoundingBox)(unsafe.Pointer(&box)), cgoAllocsUnknown
	__ret := C.CheckCollisionRayBox(cray, cbox)
	__v := (bool)(__ret)
	return __v
}

// GetCollisionRayMesh function as declared in src/raylib.h:1400
func GetCollisionRayMesh(ray Ray, mesh Mesh, transform Matrix) RayHitInfo {
	cray, _ := *(*C.Ray)(unsafe.Pointer(&ray)), cgoAllocsUnknown
	cmesh, _ := *(*C.Mesh)(unsafe.Pointer(&mesh)), cgoAllocsUnknown
	ctransform, _ := *(*C.Matrix)(unsafe.Pointer(&transform)), cgoAllocsUnknown
	__ret := C.GetCollisionRayMesh(cray, cmesh, ctransform)
	__v := *newRayHitInfoRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// GetCollisionRayModel function as declared in src/raylib.h:1401
func GetCollisionRayModel(ray Ray, model Model) RayHitInfo {
	cray, _ := *(*C.Ray)(unsafe.Pointer(&ray)), cgoAllocsUnknown
	cmodel, _ := *(*C.Model)(unsafe.Pointer(&model)), cgoAllocsUnknown
	__ret := C.GetCollisionRayModel(cray, cmodel)
	__v := *newRayHitInfoRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// GetCollisionRayTriangle function as declared in src/raylib.h:1402
func GetCollisionRayTriangle(ray Ray, p1 Vector3, p2 Vector3, p3 Vector3) RayHitInfo {
	cray, _ := *(*C.Ray)(unsafe.Pointer(&ray)), cgoAllocsUnknown
	cp1, _ := *(*C.Vector3)(unsafe.Pointer(&p1)), cgoAllocsUnknown
	cp2, _ := *(*C.Vector3)(unsafe.Pointer(&p2)), cgoAllocsUnknown
	cp3, _ := *(*C.Vector3)(unsafe.Pointer(&p3)), cgoAllocsUnknown
	__ret := C.GetCollisionRayTriangle(cray, cp1, cp2, cp3)
	__v := *newRayHitInfoRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// GetCollisionRayGround function as declared in src/raylib.h:1403
func GetCollisionRayGround(ray Ray, groundHeight float32) RayHitInfo {
	cray, _ := *(*C.Ray)(unsafe.Pointer(&ray)), cgoAllocsUnknown
	cgroundHeight, _ := (C.float)(groundHeight), cgoAllocsUnknown
	__ret := C.GetCollisionRayGround(cray, cgroundHeight)
	__v := *newRayHitInfoRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// LoadShader function as declared in src/raylib.h:1411
func LoadShader(vsFileName string, fsFileName string) Shader {
	vsFileName = safeString(vsFileName)
	cvsFileName, _ := unpackPCharString(vsFileName)
	fsFileName = safeString(fsFileName)
	cfsFileName, _ := unpackPCharString(fsFileName)
	__ret := C.LoadShader(cvsFileName, cfsFileName)
	runtime.KeepAlive(fsFileName)
	runtime.KeepAlive(vsFileName)
	__v := *newShaderRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// LoadShaderCode function as declared in src/raylib.h:1412
func LoadShaderCode(vsCode string, fsCode string) Shader {
	vsCode = safeString(vsCode)
	cvsCode, _ := unpackPCharString(vsCode)
	fsCode = safeString(fsCode)
	cfsCode, _ := unpackPCharString(fsCode)
	__ret := C.LoadShaderCode(cvsCode, cfsCode)
	runtime.KeepAlive(fsCode)
	runtime.KeepAlive(vsCode)
	__v := *newShaderRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// UnloadShader function as declared in src/raylib.h:1413
func UnloadShader(shader Shader) {
	cshader, _ := *(*C.Shader)(unsafe.Pointer(&shader)), cgoAllocsUnknown
	C.UnloadShader(cshader)
}

// GetShaderDefault function as declared in src/raylib.h:1415
func GetShaderDefault() Shader {
	__ret := C.GetShaderDefault()
	__v := *newShaderRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// GetTextureDefault function as declared in src/raylib.h:1416
func GetTextureDefault() Texture2D {
	__ret := C.GetTextureDefault()
	__v := *newTexture2DRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// GetShapesTexture function as declared in src/raylib.h:1417
func GetShapesTexture() Texture2D {
	__ret := C.GetShapesTexture()
	__v := *newTexture2DRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// GetShapesTextureRec function as declared in src/raylib.h:1418
func GetShapesTextureRec() Rectangle {
	__ret := C.GetShapesTextureRec()
	__v := *newRectangleRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// SetShapesTexture function as declared in src/raylib.h:1419
func SetShapesTexture(texture Texture2D, source Rectangle) {
	ctexture, _ := *(*C.Texture2D)(unsafe.Pointer(&texture)), cgoAllocsUnknown
	csource, _ := *(*C.Rectangle)(unsafe.Pointer(&source)), cgoAllocsUnknown
	C.SetShapesTexture(ctexture, csource)
}

// GetShaderLocation function as declared in src/raylib.h:1422
func GetShaderLocation(shader Shader, uniformName string) int32 {
	cshader, _ := *(*C.Shader)(unsafe.Pointer(&shader)), cgoAllocsUnknown
	uniformName = safeString(uniformName)
	cuniformName, _ := unpackPCharString(uniformName)
	__ret := C.GetShaderLocation(cshader, cuniformName)
	runtime.KeepAlive(uniformName)
	__v := (int32)(__ret)
	return __v
}

// GetShaderLocationAttrib function as declared in src/raylib.h:1423
func GetShaderLocationAttrib(shader Shader, attribName string) int32 {
	cshader, _ := *(*C.Shader)(unsafe.Pointer(&shader)), cgoAllocsUnknown
	attribName = safeString(attribName)
	cattribName, _ := unpackPCharString(attribName)
	__ret := C.GetShaderLocationAttrib(cshader, cattribName)
	runtime.KeepAlive(attribName)
	__v := (int32)(__ret)
	return __v
}

// SetShaderValue function as declared in src/raylib.h:1424
func SetShaderValue(shader Shader, uniformLoc int32, value unsafe.Pointer, uniformType int32) {
	cshader, _ := *(*C.Shader)(unsafe.Pointer(&shader)), cgoAllocsUnknown
	cuniformLoc, _ := (C.int)(uniformLoc), cgoAllocsUnknown
	cvalue, _ := value, cgoAllocsUnknown
	cuniformType, _ := (C.int)(uniformType), cgoAllocsUnknown
	C.SetShaderValue(cshader, cuniformLoc, cvalue, cuniformType)
}

// SetShaderValueV function as declared in src/raylib.h:1425
func SetShaderValueV(shader Shader, uniformLoc int32, value unsafe.Pointer, uniformType int32, count int32) {
	cshader, _ := *(*C.Shader)(unsafe.Pointer(&shader)), cgoAllocsUnknown
	cuniformLoc, _ := (C.int)(uniformLoc), cgoAllocsUnknown
	cvalue, _ := value, cgoAllocsUnknown
	cuniformType, _ := (C.int)(uniformType), cgoAllocsUnknown
	ccount, _ := (C.int)(count), cgoAllocsUnknown
	C.SetShaderValueV(cshader, cuniformLoc, cvalue, cuniformType, ccount)
}

// SetShaderValueMatrix function as declared in src/raylib.h:1426
func SetShaderValueMatrix(shader Shader, uniformLoc int32, mat Matrix) {
	cshader, _ := *(*C.Shader)(unsafe.Pointer(&shader)), cgoAllocsUnknown
	cuniformLoc, _ := (C.int)(uniformLoc), cgoAllocsUnknown
	cmat, _ := *(*C.Matrix)(unsafe.Pointer(&mat)), cgoAllocsUnknown
	C.SetShaderValueMatrix(cshader, cuniformLoc, cmat)
}

// SetShaderValueTexture function as declared in src/raylib.h:1427
func SetShaderValueTexture(shader Shader, uniformLoc int32, texture Texture2D) {
	cshader, _ := *(*C.Shader)(unsafe.Pointer(&shader)), cgoAllocsUnknown
	cuniformLoc, _ := (C.int)(uniformLoc), cgoAllocsUnknown
	ctexture, _ := *(*C.Texture2D)(unsafe.Pointer(&texture)), cgoAllocsUnknown
	C.SetShaderValueTexture(cshader, cuniformLoc, ctexture)
}

// SetMatrixProjection function as declared in src/raylib.h:1428
func SetMatrixProjection(proj Matrix) {
	cproj, _ := *(*C.Matrix)(unsafe.Pointer(&proj)), cgoAllocsUnknown
	C.SetMatrixProjection(cproj)
}

// SetMatrixModelview function as declared in src/raylib.h:1429
func SetMatrixModelview(view Matrix) {
	cview, _ := *(*C.Matrix)(unsafe.Pointer(&view)), cgoAllocsUnknown
	C.SetMatrixModelview(cview)
}

// GetMatrixModelview function as declared in src/raylib.h:1430
func GetMatrixModelview() Matrix {
	__ret := C.GetMatrixModelview()
	__v := *newMatrixRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// GetMatrixProjection function as declared in src/raylib.h:1431
func GetMatrixProjection() Matrix {
	__ret := C.GetMatrixProjection()
	__v := *newMatrixRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// GenTextureCubemap function as declared in src/raylib.h:1435
func GenTextureCubemap(shader Shader, panorama Texture2D, size int32, format int32) TextureCubemap {
	cshader, _ := *(*C.Shader)(unsafe.Pointer(&shader)), cgoAllocsUnknown
	cpanorama, _ := *(*C.Texture2D)(unsafe.Pointer(&panorama)), cgoAllocsUnknown
	csize, _ := (C.int)(size), cgoAllocsUnknown
	cformat, _ := (C.int)(format), cgoAllocsUnknown
	__ret := C.GenTextureCubemap(cshader, cpanorama, csize, cformat)
	__v := *newTextureCubemapRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// GenTextureIrradiance function as declared in src/raylib.h:1436
func GenTextureIrradiance(shader Shader, cubemap TextureCubemap, size int32) TextureCubemap {
	cshader, _ := *(*C.Shader)(unsafe.Pointer(&shader)), cgoAllocsUnknown
	ccubemap, _ := *(*C.TextureCubemap)(unsafe.Pointer(&cubemap)), cgoAllocsUnknown
	csize, _ := (C.int)(size), cgoAllocsUnknown
	__ret := C.GenTextureIrradiance(cshader, ccubemap, csize)
	__v := *newTextureCubemapRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// GenTexturePrefilter function as declared in src/raylib.h:1437
func GenTexturePrefilter(shader Shader, cubemap TextureCubemap, size int32) TextureCubemap {
	cshader, _ := *(*C.Shader)(unsafe.Pointer(&shader)), cgoAllocsUnknown
	ccubemap, _ := *(*C.TextureCubemap)(unsafe.Pointer(&cubemap)), cgoAllocsUnknown
	csize, _ := (C.int)(size), cgoAllocsUnknown
	__ret := C.GenTexturePrefilter(cshader, ccubemap, csize)
	__v := *newTextureCubemapRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// GenTextureBRDF function as declared in src/raylib.h:1438
func GenTextureBRDF(shader Shader, size int32) Texture2D {
	cshader, _ := *(*C.Shader)(unsafe.Pointer(&shader)), cgoAllocsUnknown
	csize, _ := (C.int)(size), cgoAllocsUnknown
	__ret := C.GenTextureBRDF(cshader, csize)
	__v := *newTexture2DRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// BeginShaderMode function as declared in src/raylib.h:1441
func BeginShaderMode(shader Shader) {
	cshader, _ := *(*C.Shader)(unsafe.Pointer(&shader)), cgoAllocsUnknown
	C.BeginShaderMode(cshader)
}

// EndShaderMode function as declared in src/raylib.h:1442
func EndShaderMode() {
	C.EndShaderMode()
}

// BeginBlendMode function as declared in src/raylib.h:1443
func BeginBlendMode(mode int32) {
	cmode, _ := (C.int)(mode), cgoAllocsUnknown
	C.BeginBlendMode(cmode)
}

// EndBlendMode function as declared in src/raylib.h:1444
func EndBlendMode() {
	C.EndBlendMode()
}

// InitVrSimulator function as declared in src/raylib.h:1447
func InitVrSimulator() {
	C.InitVrSimulator()
}

// CloseVrSimulator function as declared in src/raylib.h:1448
func CloseVrSimulator() {
	C.CloseVrSimulator()
}

// UpdateVrTracking function as declared in src/raylib.h:1449
func UpdateVrTracking(camera *Camera) {
	ccamera, _ := (*C.Camera)(unsafe.Pointer(camera)), cgoAllocsUnknown
	C.UpdateVrTracking(ccamera)
}

// SetVrConfiguration function as declared in src/raylib.h:1450
func SetVrConfiguration(info VrDeviceInfo, distortion Shader) {
	cinfo, _ := *(*C.VrDeviceInfo)(unsafe.Pointer(&info)), cgoAllocsUnknown
	cdistortion, _ := *(*C.Shader)(unsafe.Pointer(&distortion)), cgoAllocsUnknown
	C.SetVrConfiguration(cinfo, cdistortion)
}

// IsVrSimulatorReady function as declared in src/raylib.h:1451
func IsVrSimulatorReady() bool {
	__ret := C.IsVrSimulatorReady()
	__v := (bool)(__ret)
	return __v
}

// ToggleVrMode function as declared in src/raylib.h:1452
func ToggleVrMode() {
	C.ToggleVrMode()
}

// BeginVrDrawing function as declared in src/raylib.h:1453
func BeginVrDrawing() {
	C.BeginVrDrawing()
}

// EndVrDrawing function as declared in src/raylib.h:1454
func EndVrDrawing() {
	C.EndVrDrawing()
}

// InitAudioDevice function as declared in src/raylib.h:1461
func InitAudioDevice() {
	C.InitAudioDevice()
}

// CloseAudioDevice function as declared in src/raylib.h:1462
func CloseAudioDevice() {
	C.CloseAudioDevice()
}

// IsAudioDeviceReady function as declared in src/raylib.h:1463
func IsAudioDeviceReady() bool {
	__ret := C.IsAudioDeviceReady()
	__v := (bool)(__ret)
	return __v
}

// SetMasterVolume function as declared in src/raylib.h:1464
func SetMasterVolume(volume float32) {
	cvolume, _ := (C.float)(volume), cgoAllocsUnknown
	C.SetMasterVolume(cvolume)
}

// LoadWave function as declared in src/raylib.h:1467
func LoadWave(fileName string) Wave {
	fileName = safeString(fileName)
	cfileName, _ := unpackPCharString(fileName)
	__ret := C.LoadWave(cfileName)
	runtime.KeepAlive(fileName)
	__v := *newWaveRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// LoadWaveFromMemory function as declared in src/raylib.h:1468
func LoadWaveFromMemory(fileType string, fileData []byte, dataSize int32) Wave {
	fileType = safeString(fileType)
	cfileType, _ := unpackPCharString(fileType)
	cfileData, _ := (*C.uchar)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&fileData)).Data)), cgoAllocsUnknown
	cdataSize, _ := (C.int)(dataSize), cgoAllocsUnknown
	__ret := C.LoadWaveFromMemory(cfileType, cfileData, cdataSize)
	runtime.KeepAlive(fileType)
	__v := *newWaveRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// LoadSound function as declared in src/raylib.h:1469
func LoadSound(fileName string) Sound {
	fileName = safeString(fileName)
	cfileName, _ := unpackPCharString(fileName)
	__ret := C.LoadSound(cfileName)
	runtime.KeepAlive(fileName)
	__v := *newSoundRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// LoadSoundFromWave function as declared in src/raylib.h:1470
func LoadSoundFromWave(wave Wave) Sound {
	cwave, _ := *(*C.Wave)(unsafe.Pointer(&wave)), cgoAllocsUnknown
	__ret := C.LoadSoundFromWave(cwave)
	__v := *newSoundRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// UpdateSound function as declared in src/raylib.h:1471
func UpdateSound(sound Sound, data unsafe.Pointer, samplesCount int32) {
	csound, _ := *(*C.Sound)(unsafe.Pointer(&sound)), cgoAllocsUnknown
	cdata, _ := data, cgoAllocsUnknown
	csamplesCount, _ := (C.int)(samplesCount), cgoAllocsUnknown
	C.UpdateSound(csound, cdata, csamplesCount)
}

// UnloadWave function as declared in src/raylib.h:1472
func UnloadWave(wave Wave) {
	cwave, _ := *(*C.Wave)(unsafe.Pointer(&wave)), cgoAllocsUnknown
	C.UnloadWave(cwave)
}

// UnloadSound function as declared in src/raylib.h:1473
func UnloadSound(sound Sound) {
	csound, _ := *(*C.Sound)(unsafe.Pointer(&sound)), cgoAllocsUnknown
	C.UnloadSound(csound)
}

// ExportWave function as declared in src/raylib.h:1474
func ExportWave(wave Wave, fileName string) bool {
	cwave, _ := *(*C.Wave)(unsafe.Pointer(&wave)), cgoAllocsUnknown
	fileName = safeString(fileName)
	cfileName, _ := unpackPCharString(fileName)
	__ret := C.ExportWave(cwave, cfileName)
	runtime.KeepAlive(fileName)
	__v := (bool)(__ret)
	return __v
}

// ExportWaveAsCode function as declared in src/raylib.h:1475
func ExportWaveAsCode(wave Wave, fileName string) bool {
	cwave, _ := *(*C.Wave)(unsafe.Pointer(&wave)), cgoAllocsUnknown
	fileName = safeString(fileName)
	cfileName, _ := unpackPCharString(fileName)
	__ret := C.ExportWaveAsCode(cwave, cfileName)
	runtime.KeepAlive(fileName)
	__v := (bool)(__ret)
	return __v
}

// PlaySound function as declared in src/raylib.h:1478
func PlaySound(sound Sound) {
	csound, _ := *(*C.Sound)(unsafe.Pointer(&sound)), cgoAllocsUnknown
	C.PlaySound(csound)
}

// StopSound function as declared in src/raylib.h:1479
func StopSound(sound Sound) {
	csound, _ := *(*C.Sound)(unsafe.Pointer(&sound)), cgoAllocsUnknown
	C.StopSound(csound)
}

// PauseSound function as declared in src/raylib.h:1480
func PauseSound(sound Sound) {
	csound, _ := *(*C.Sound)(unsafe.Pointer(&sound)), cgoAllocsUnknown
	C.PauseSound(csound)
}

// ResumeSound function as declared in src/raylib.h:1481
func ResumeSound(sound Sound) {
	csound, _ := *(*C.Sound)(unsafe.Pointer(&sound)), cgoAllocsUnknown
	C.ResumeSound(csound)
}

// PlaySoundMulti function as declared in src/raylib.h:1482
func PlaySoundMulti(sound Sound) {
	csound, _ := *(*C.Sound)(unsafe.Pointer(&sound)), cgoAllocsUnknown
	C.PlaySoundMulti(csound)
}

// StopSoundMulti function as declared in src/raylib.h:1483
func StopSoundMulti() {
	C.StopSoundMulti()
}

// GetSoundsPlaying function as declared in src/raylib.h:1484
func GetSoundsPlaying() int32 {
	__ret := C.GetSoundsPlaying()
	__v := (int32)(__ret)
	return __v
}

// IsSoundPlaying function as declared in src/raylib.h:1485
func IsSoundPlaying(sound Sound) bool {
	csound, _ := *(*C.Sound)(unsafe.Pointer(&sound)), cgoAllocsUnknown
	__ret := C.IsSoundPlaying(csound)
	__v := (bool)(__ret)
	return __v
}

// SetSoundVolume function as declared in src/raylib.h:1486
func SetSoundVolume(sound Sound, volume float32) {
	csound, _ := *(*C.Sound)(unsafe.Pointer(&sound)), cgoAllocsUnknown
	cvolume, _ := (C.float)(volume), cgoAllocsUnknown
	C.SetSoundVolume(csound, cvolume)
}

// SetSoundPitch function as declared in src/raylib.h:1487
func SetSoundPitch(sound Sound, pitch float32) {
	csound, _ := *(*C.Sound)(unsafe.Pointer(&sound)), cgoAllocsUnknown
	cpitch, _ := (C.float)(pitch), cgoAllocsUnknown
	C.SetSoundPitch(csound, cpitch)
}

// WaveFormat function as declared in src/raylib.h:1488
func WaveFormat(wave *Wave, sampleRate int32, sampleSize int32, channels int32) {
	cwave, _ := (*C.Wave)(unsafe.Pointer(wave)), cgoAllocsUnknown
	csampleRate, _ := (C.int)(sampleRate), cgoAllocsUnknown
	csampleSize, _ := (C.int)(sampleSize), cgoAllocsUnknown
	cchannels, _ := (C.int)(channels), cgoAllocsUnknown
	C.WaveFormat(cwave, csampleRate, csampleSize, cchannels)
}

// WaveCopy function as declared in src/raylib.h:1489
func WaveCopy(wave Wave) Wave {
	cwave, _ := *(*C.Wave)(unsafe.Pointer(&wave)), cgoAllocsUnknown
	__ret := C.WaveCopy(cwave)
	__v := *newWaveRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// WaveCrop function as declared in src/raylib.h:1490
func WaveCrop(wave *Wave, initSample int32, finalSample int32) {
	cwave, _ := (*C.Wave)(unsafe.Pointer(wave)), cgoAllocsUnknown
	cinitSample, _ := (C.int)(initSample), cgoAllocsUnknown
	cfinalSample, _ := (C.int)(finalSample), cgoAllocsUnknown
	C.WaveCrop(cwave, cinitSample, cfinalSample)
}

// LoadWaveSamples function as declared in src/raylib.h:1491
func LoadWaveSamples(wave Wave) *float32 {
	cwave, _ := *(*C.Wave)(unsafe.Pointer(&wave)), cgoAllocsUnknown
	__ret := C.LoadWaveSamples(cwave)
	__v := *(**float32)(unsafe.Pointer(&__ret))
	return __v
}

// UnloadWaveSamples function as declared in src/raylib.h:1492
func UnloadWaveSamples(samples *float32) {
	csamples, _ := (*C.float)(unsafe.Pointer(samples)), cgoAllocsUnknown
	C.UnloadWaveSamples(csamples)
}

// LoadMusicStream function as declared in src/raylib.h:1495
func LoadMusicStream(fileName string) Music {
	fileName = safeString(fileName)
	cfileName, _ := unpackPCharString(fileName)
	__ret := C.LoadMusicStream(cfileName)
	runtime.KeepAlive(fileName)
	__v := *newMusicRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// UnloadMusicStream function as declared in src/raylib.h:1496
func UnloadMusicStream(music Music) {
	cmusic, _ := *(*C.Music)(unsafe.Pointer(&music)), cgoAllocsUnknown
	C.UnloadMusicStream(cmusic)
}

// PlayMusicStream function as declared in src/raylib.h:1497
func PlayMusicStream(music Music) {
	cmusic, _ := *(*C.Music)(unsafe.Pointer(&music)), cgoAllocsUnknown
	C.PlayMusicStream(cmusic)
}

// UpdateMusicStream function as declared in src/raylib.h:1498
func UpdateMusicStream(music Music) {
	cmusic, _ := *(*C.Music)(unsafe.Pointer(&music)), cgoAllocsUnknown
	C.UpdateMusicStream(cmusic)
}

// StopMusicStream function as declared in src/raylib.h:1499
func StopMusicStream(music Music) {
	cmusic, _ := *(*C.Music)(unsafe.Pointer(&music)), cgoAllocsUnknown
	C.StopMusicStream(cmusic)
}

// PauseMusicStream function as declared in src/raylib.h:1500
func PauseMusicStream(music Music) {
	cmusic, _ := *(*C.Music)(unsafe.Pointer(&music)), cgoAllocsUnknown
	C.PauseMusicStream(cmusic)
}

// ResumeMusicStream function as declared in src/raylib.h:1501
func ResumeMusicStream(music Music) {
	cmusic, _ := *(*C.Music)(unsafe.Pointer(&music)), cgoAllocsUnknown
	C.ResumeMusicStream(cmusic)
}

// IsMusicPlaying function as declared in src/raylib.h:1502
func IsMusicPlaying(music Music) bool {
	cmusic, _ := *(*C.Music)(unsafe.Pointer(&music)), cgoAllocsUnknown
	__ret := C.IsMusicPlaying(cmusic)
	__v := (bool)(__ret)
	return __v
}

// SetMusicVolume function as declared in src/raylib.h:1503
func SetMusicVolume(music Music, volume float32) {
	cmusic, _ := *(*C.Music)(unsafe.Pointer(&music)), cgoAllocsUnknown
	cvolume, _ := (C.float)(volume), cgoAllocsUnknown
	C.SetMusicVolume(cmusic, cvolume)
}

// SetMusicPitch function as declared in src/raylib.h:1504
func SetMusicPitch(music Music, pitch float32) {
	cmusic, _ := *(*C.Music)(unsafe.Pointer(&music)), cgoAllocsUnknown
	cpitch, _ := (C.float)(pitch), cgoAllocsUnknown
	C.SetMusicPitch(cmusic, cpitch)
}

// GetMusicTimeLength function as declared in src/raylib.h:1505
func GetMusicTimeLength(music Music) float32 {
	cmusic, _ := *(*C.Music)(unsafe.Pointer(&music)), cgoAllocsUnknown
	__ret := C.GetMusicTimeLength(cmusic)
	__v := (float32)(__ret)
	return __v
}

// GetMusicTimePlayed function as declared in src/raylib.h:1506
func GetMusicTimePlayed(music Music) float32 {
	cmusic, _ := *(*C.Music)(unsafe.Pointer(&music)), cgoAllocsUnknown
	__ret := C.GetMusicTimePlayed(cmusic)
	__v := (float32)(__ret)
	return __v
}

// InitAudioStream function as declared in src/raylib.h:1509
func InitAudioStream(sampleRate uint32, sampleSize uint32, channels uint32) AudioStream {
	csampleRate, _ := (C.uint)(sampleRate), cgoAllocsUnknown
	csampleSize, _ := (C.uint)(sampleSize), cgoAllocsUnknown
	cchannels, _ := (C.uint)(channels), cgoAllocsUnknown
	__ret := C.InitAudioStream(csampleRate, csampleSize, cchannels)
	__v := *newAudioStreamRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// UpdateAudioStream function as declared in src/raylib.h:1510
func UpdateAudioStream(stream AudioStream, data unsafe.Pointer, samplesCount int32) {
	cstream, _ := *(*C.AudioStream)(unsafe.Pointer(&stream)), cgoAllocsUnknown
	cdata, _ := data, cgoAllocsUnknown
	csamplesCount, _ := (C.int)(samplesCount), cgoAllocsUnknown
	C.UpdateAudioStream(cstream, cdata, csamplesCount)
}

// CloseAudioStream function as declared in src/raylib.h:1511
func CloseAudioStream(stream AudioStream) {
	cstream, _ := *(*C.AudioStream)(unsafe.Pointer(&stream)), cgoAllocsUnknown
	C.CloseAudioStream(cstream)
}

// IsAudioStreamProcessed function as declared in src/raylib.h:1512
func IsAudioStreamProcessed(stream AudioStream) bool {
	cstream, _ := *(*C.AudioStream)(unsafe.Pointer(&stream)), cgoAllocsUnknown
	__ret := C.IsAudioStreamProcessed(cstream)
	__v := (bool)(__ret)
	return __v
}

// PlayAudioStream function as declared in src/raylib.h:1513
func PlayAudioStream(stream AudioStream) {
	cstream, _ := *(*C.AudioStream)(unsafe.Pointer(&stream)), cgoAllocsUnknown
	C.PlayAudioStream(cstream)
}

// PauseAudioStream function as declared in src/raylib.h:1514
func PauseAudioStream(stream AudioStream) {
	cstream, _ := *(*C.AudioStream)(unsafe.Pointer(&stream)), cgoAllocsUnknown
	C.PauseAudioStream(cstream)
}

// ResumeAudioStream function as declared in src/raylib.h:1515
func ResumeAudioStream(stream AudioStream) {
	cstream, _ := *(*C.AudioStream)(unsafe.Pointer(&stream)), cgoAllocsUnknown
	C.ResumeAudioStream(cstream)
}

// IsAudioStreamPlaying function as declared in src/raylib.h:1516
func IsAudioStreamPlaying(stream AudioStream) bool {
	cstream, _ := *(*C.AudioStream)(unsafe.Pointer(&stream)), cgoAllocsUnknown
	__ret := C.IsAudioStreamPlaying(cstream)
	__v := (bool)(__ret)
	return __v
}

// StopAudioStream function as declared in src/raylib.h:1517
func StopAudioStream(stream AudioStream) {
	cstream, _ := *(*C.AudioStream)(unsafe.Pointer(&stream)), cgoAllocsUnknown
	C.StopAudioStream(cstream)
}

// SetAudioStreamVolume function as declared in src/raylib.h:1518
func SetAudioStreamVolume(stream AudioStream, volume float32) {
	cstream, _ := *(*C.AudioStream)(unsafe.Pointer(&stream)), cgoAllocsUnknown
	cvolume, _ := (C.float)(volume), cgoAllocsUnknown
	C.SetAudioStreamVolume(cstream, cvolume)
}

// SetAudioStreamPitch function as declared in src/raylib.h:1519
func SetAudioStreamPitch(stream AudioStream, pitch float32) {
	cstream, _ := *(*C.AudioStream)(unsafe.Pointer(&stream)), cgoAllocsUnknown
	cpitch, _ := (C.float)(pitch), cgoAllocsUnknown
	C.SetAudioStreamPitch(cstream, cpitch)
}

// SetAudioStreamBufferSizeDefault function as declared in src/raylib.h:1520
func SetAudioStreamBufferSizeDefault(size int32) {
	csize, _ := (C.int)(size), cgoAllocsUnknown
	C.SetAudioStreamBufferSizeDefault(csize)
}

// Clamp function as declared in src/raymath.h:148
func Clamp(value float32, min float32, max float32) float32 {
	cvalue, _ := (C.float)(value), cgoAllocsUnknown
	cmin, _ := (C.float)(min), cgoAllocsUnknown
	cmax, _ := (C.float)(max), cgoAllocsUnknown
	__ret := C.Clamp(cvalue, cmin, cmax)
	__v := (float32)(__ret)
	return __v
}

// Lerp function as declared in src/raymath.h:155
func Lerp(start float32, end float32, amount float32) float32 {
	cstart, _ := (C.float)(start), cgoAllocsUnknown
	cend, _ := (C.float)(end), cgoAllocsUnknown
	camount, _ := (C.float)(amount), cgoAllocsUnknown
	__ret := C.Lerp(cstart, cend, camount)
	__v := (float32)(__ret)
	return __v
}

// Normalize function as declared in src/raymath.h:161
func Normalize(value float32, start float32, end float32) float32 {
	cvalue, _ := (C.float)(value), cgoAllocsUnknown
	cstart, _ := (C.float)(start), cgoAllocsUnknown
	cend, _ := (C.float)(end), cgoAllocsUnknown
	__ret := C.Normalize(cvalue, cstart, cend)
	__v := (float32)(__ret)
	return __v
}

// Remap function as declared in src/raymath.h:167
func Remap(value float32, inputStart float32, inputEnd float32, outputStart float32, outputEnd float32) float32 {
	cvalue, _ := (C.float)(value), cgoAllocsUnknown
	cinputStart, _ := (C.float)(inputStart), cgoAllocsUnknown
	cinputEnd, _ := (C.float)(inputEnd), cgoAllocsUnknown
	coutputStart, _ := (C.float)(outputStart), cgoAllocsUnknown
	coutputEnd, _ := (C.float)(outputEnd), cgoAllocsUnknown
	__ret := C.Remap(cvalue, cinputStart, cinputEnd, coutputStart, coutputEnd)
	__v := (float32)(__ret)
	return __v
}

// Vector2Zero function as declared in src/raymath.h:177
func Vector2Zero() Vector2 {
	__ret := C.Vector2Zero()
	__v := *newVector2Ref(unsafe.Pointer(&__ret)).convert()
	return __v
}

// Vector2One function as declared in src/raymath.h:184
func Vector2One() Vector2 {
	__ret := C.Vector2One()
	__v := *newVector2Ref(unsafe.Pointer(&__ret)).convert()
	return __v
}

// Vector2Add function as declared in src/raymath.h:191
func Vector2Add(v1 Vector2, v2 Vector2) Vector2 {
	cv1, _ := *(*C.Vector2)(unsafe.Pointer(&v1)), cgoAllocsUnknown
	cv2, _ := *(*C.Vector2)(unsafe.Pointer(&v2)), cgoAllocsUnknown
	__ret := C.Vector2Add(cv1, cv2)
	__v := *newVector2Ref(unsafe.Pointer(&__ret)).convert()
	return __v
}

// Vector2AddValue function as declared in src/raymath.h:198
func Vector2AddValue(v Vector2, add float32) Vector2 {
	cv, _ := *(*C.Vector2)(unsafe.Pointer(&v)), cgoAllocsUnknown
	cadd, _ := (C.float)(add), cgoAllocsUnknown
	__ret := C.Vector2AddValue(cv, cadd)
	__v := *newVector2Ref(unsafe.Pointer(&__ret)).convert()
	return __v
}

// Vector2Subtract function as declared in src/raymath.h:205
func Vector2Subtract(v1 Vector2, v2 Vector2) Vector2 {
	cv1, _ := *(*C.Vector2)(unsafe.Pointer(&v1)), cgoAllocsUnknown
	cv2, _ := *(*C.Vector2)(unsafe.Pointer(&v2)), cgoAllocsUnknown
	__ret := C.Vector2Subtract(cv1, cv2)
	__v := *newVector2Ref(unsafe.Pointer(&__ret)).convert()
	return __v
}

// Vector2SubtractValue function as declared in src/raymath.h:212
func Vector2SubtractValue(v Vector2, sub float32) Vector2 {
	cv, _ := *(*C.Vector2)(unsafe.Pointer(&v)), cgoAllocsUnknown
	csub, _ := (C.float)(sub), cgoAllocsUnknown
	__ret := C.Vector2SubtractValue(cv, csub)
	__v := *newVector2Ref(unsafe.Pointer(&__ret)).convert()
	return __v
}

// Vector2Length function as declared in src/raymath.h:219
func Vector2Length(v Vector2) float32 {
	cv, _ := *(*C.Vector2)(unsafe.Pointer(&v)), cgoAllocsUnknown
	__ret := C.Vector2Length(cv)
	__v := (float32)(__ret)
	return __v
}

// Vector2LengthSqr function as declared in src/raymath.h:226
func Vector2LengthSqr(v Vector2) float32 {
	cv, _ := *(*C.Vector2)(unsafe.Pointer(&v)), cgoAllocsUnknown
	__ret := C.Vector2LengthSqr(cv)
	__v := (float32)(__ret)
	return __v
}

// Vector2DotProduct function as declared in src/raymath.h:233
func Vector2DotProduct(v1 Vector2, v2 Vector2) float32 {
	cv1, _ := *(*C.Vector2)(unsafe.Pointer(&v1)), cgoAllocsUnknown
	cv2, _ := *(*C.Vector2)(unsafe.Pointer(&v2)), cgoAllocsUnknown
	__ret := C.Vector2DotProduct(cv1, cv2)
	__v := (float32)(__ret)
	return __v
}

// Vector2Distance function as declared in src/raymath.h:240
func Vector2Distance(v1 Vector2, v2 Vector2) float32 {
	cv1, _ := *(*C.Vector2)(unsafe.Pointer(&v1)), cgoAllocsUnknown
	cv2, _ := *(*C.Vector2)(unsafe.Pointer(&v2)), cgoAllocsUnknown
	__ret := C.Vector2Distance(cv1, cv2)
	__v := (float32)(__ret)
	return __v
}

// Vector2Angle function as declared in src/raymath.h:247
func Vector2Angle(v1 Vector2, v2 Vector2) float32 {
	cv1, _ := *(*C.Vector2)(unsafe.Pointer(&v1)), cgoAllocsUnknown
	cv2, _ := *(*C.Vector2)(unsafe.Pointer(&v2)), cgoAllocsUnknown
	__ret := C.Vector2Angle(cv1, cv2)
	__v := (float32)(__ret)
	return __v
}

// Vector2Scale function as declared in src/raymath.h:255
func Vector2Scale(v Vector2, scale float32) Vector2 {
	cv, _ := *(*C.Vector2)(unsafe.Pointer(&v)), cgoAllocsUnknown
	cscale, _ := (C.float)(scale), cgoAllocsUnknown
	__ret := C.Vector2Scale(cv, cscale)
	__v := *newVector2Ref(unsafe.Pointer(&__ret)).convert()
	return __v
}

// Vector2Multiply function as declared in src/raymath.h:262
func Vector2Multiply(v1 Vector2, v2 Vector2) Vector2 {
	cv1, _ := *(*C.Vector2)(unsafe.Pointer(&v1)), cgoAllocsUnknown
	cv2, _ := *(*C.Vector2)(unsafe.Pointer(&v2)), cgoAllocsUnknown
	__ret := C.Vector2Multiply(cv1, cv2)
	__v := *newVector2Ref(unsafe.Pointer(&__ret)).convert()
	return __v
}

// Vector2Negate function as declared in src/raymath.h:269
func Vector2Negate(v Vector2) Vector2 {
	cv, _ := *(*C.Vector2)(unsafe.Pointer(&v)), cgoAllocsUnknown
	__ret := C.Vector2Negate(cv)
	__v := *newVector2Ref(unsafe.Pointer(&__ret)).convert()
	return __v
}

// Vector2Divide function as declared in src/raymath.h:276
func Vector2Divide(v1 Vector2, v2 Vector2) Vector2 {
	cv1, _ := *(*C.Vector2)(unsafe.Pointer(&v1)), cgoAllocsUnknown
	cv2, _ := *(*C.Vector2)(unsafe.Pointer(&v2)), cgoAllocsUnknown
	__ret := C.Vector2Divide(cv1, cv2)
	__v := *newVector2Ref(unsafe.Pointer(&__ret)).convert()
	return __v
}

// Vector2Normalize function as declared in src/raymath.h:283
func Vector2Normalize(v Vector2) Vector2 {
	cv, _ := *(*C.Vector2)(unsafe.Pointer(&v)), cgoAllocsUnknown
	__ret := C.Vector2Normalize(cv)
	__v := *newVector2Ref(unsafe.Pointer(&__ret)).convert()
	return __v
}

// Vector2Lerp function as declared in src/raymath.h:290
func Vector2Lerp(v1 Vector2, v2 Vector2, amount float32) Vector2 {
	cv1, _ := *(*C.Vector2)(unsafe.Pointer(&v1)), cgoAllocsUnknown
	cv2, _ := *(*C.Vector2)(unsafe.Pointer(&v2)), cgoAllocsUnknown
	camount, _ := (C.float)(amount), cgoAllocsUnknown
	__ret := C.Vector2Lerp(cv1, cv2, camount)
	__v := *newVector2Ref(unsafe.Pointer(&__ret)).convert()
	return __v
}

// Vector2Rotate function as declared in src/raymath.h:314
func Vector2Rotate(v Vector2, degs float32) Vector2 {
	cv, _ := *(*C.Vector2)(unsafe.Pointer(&v)), cgoAllocsUnknown
	cdegs, _ := (C.float)(degs), cgoAllocsUnknown
	__ret := C.Vector2Rotate(cv, cdegs)
	__v := *newVector2Ref(unsafe.Pointer(&__ret)).convert()
	return __v
}

// Vector2MoveTowards function as declared in src/raymath.h:322
func Vector2MoveTowards(v Vector2, target Vector2, maxDistance float32) Vector2 {
	cv, _ := *(*C.Vector2)(unsafe.Pointer(&v)), cgoAllocsUnknown
	ctarget, _ := *(*C.Vector2)(unsafe.Pointer(&target)), cgoAllocsUnknown
	cmaxDistance, _ := (C.float)(maxDistance), cgoAllocsUnknown
	__ret := C.Vector2MoveTowards(cv, ctarget, cmaxDistance)
	__v := *newVector2Ref(unsafe.Pointer(&__ret)).convert()
	return __v
}

// Vector3Zero function as declared in src/raymath.h:344
func Vector3Zero() Vector3 {
	__ret := C.Vector3Zero()
	__v := *newVector3Ref(unsafe.Pointer(&__ret)).convert()
	return __v
}

// Vector3One function as declared in src/raymath.h:351
func Vector3One() Vector3 {
	__ret := C.Vector3One()
	__v := *newVector3Ref(unsafe.Pointer(&__ret)).convert()
	return __v
}

// Vector3Add function as declared in src/raymath.h:358
func Vector3Add(v1 Vector3, v2 Vector3) Vector3 {
	cv1, _ := *(*C.Vector3)(unsafe.Pointer(&v1)), cgoAllocsUnknown
	cv2, _ := *(*C.Vector3)(unsafe.Pointer(&v2)), cgoAllocsUnknown
	__ret := C.Vector3Add(cv1, cv2)
	__v := *newVector3Ref(unsafe.Pointer(&__ret)).convert()
	return __v
}

// Vector3AddValue function as declared in src/raymath.h:365
func Vector3AddValue(v Vector3, add float32) Vector3 {
	cv, _ := *(*C.Vector3)(unsafe.Pointer(&v)), cgoAllocsUnknown
	cadd, _ := (C.float)(add), cgoAllocsUnknown
	__ret := C.Vector3AddValue(cv, cadd)
	__v := *newVector3Ref(unsafe.Pointer(&__ret)).convert()
	return __v
}

// Vector3Subtract function as declared in src/raymath.h:372
func Vector3Subtract(v1 Vector3, v2 Vector3) Vector3 {
	cv1, _ := *(*C.Vector3)(unsafe.Pointer(&v1)), cgoAllocsUnknown
	cv2, _ := *(*C.Vector3)(unsafe.Pointer(&v2)), cgoAllocsUnknown
	__ret := C.Vector3Subtract(cv1, cv2)
	__v := *newVector3Ref(unsafe.Pointer(&__ret)).convert()
	return __v
}

// Vector3SubtractValue function as declared in src/raymath.h:379
func Vector3SubtractValue(v Vector3, sub float32) Vector3 {
	cv, _ := *(*C.Vector3)(unsafe.Pointer(&v)), cgoAllocsUnknown
	csub, _ := (C.float)(sub), cgoAllocsUnknown
	__ret := C.Vector3SubtractValue(cv, csub)
	__v := *newVector3Ref(unsafe.Pointer(&__ret)).convert()
	return __v
}

// Vector3Scale function as declared in src/raymath.h:386
func Vector3Scale(v Vector3, scalar float32) Vector3 {
	cv, _ := *(*C.Vector3)(unsafe.Pointer(&v)), cgoAllocsUnknown
	cscalar, _ := (C.float)(scalar), cgoAllocsUnknown
	__ret := C.Vector3Scale(cv, cscalar)
	__v := *newVector3Ref(unsafe.Pointer(&__ret)).convert()
	return __v
}

// Vector3Multiply function as declared in src/raymath.h:393
func Vector3Multiply(v1 Vector3, v2 Vector3) Vector3 {
	cv1, _ := *(*C.Vector3)(unsafe.Pointer(&v1)), cgoAllocsUnknown
	cv2, _ := *(*C.Vector3)(unsafe.Pointer(&v2)), cgoAllocsUnknown
	__ret := C.Vector3Multiply(cv1, cv2)
	__v := *newVector3Ref(unsafe.Pointer(&__ret)).convert()
	return __v
}

// Vector3CrossProduct function as declared in src/raymath.h:400
func Vector3CrossProduct(v1 Vector3, v2 Vector3) Vector3 {
	cv1, _ := *(*C.Vector3)(unsafe.Pointer(&v1)), cgoAllocsUnknown
	cv2, _ := *(*C.Vector3)(unsafe.Pointer(&v2)), cgoAllocsUnknown
	__ret := C.Vector3CrossProduct(cv1, cv2)
	__v := *newVector3Ref(unsafe.Pointer(&__ret)).convert()
	return __v
}

// Vector3Perpendicular function as declared in src/raymath.h:407
func Vector3Perpendicular(v Vector3) Vector3 {
	cv, _ := *(*C.Vector3)(unsafe.Pointer(&v)), cgoAllocsUnknown
	__ret := C.Vector3Perpendicular(cv)
	__v := *newVector3Ref(unsafe.Pointer(&__ret)).convert()
	return __v
}

// Vector3Length function as declared in src/raymath.h:433
func Vector3Length(v Vector3) float32 {
	cv, _ := *(*C.Vector3)(unsafe.Pointer(&v)), cgoAllocsUnknown
	__ret := C.Vector3Length(cv)
	__v := (float32)(__ret)
	return __v
}

// Vector3LengthSqr function as declared in src/raymath.h:440
func Vector3LengthSqr(v Vector3) float32 {
	cv, _ := *(*C.Vector3)(unsafe.Pointer(&v)), cgoAllocsUnknown
	__ret := C.Vector3LengthSqr(cv)
	__v := (float32)(__ret)
	return __v
}

// Vector3DotProduct function as declared in src/raymath.h:447
func Vector3DotProduct(v1 Vector3, v2 Vector3) float32 {
	cv1, _ := *(*C.Vector3)(unsafe.Pointer(&v1)), cgoAllocsUnknown
	cv2, _ := *(*C.Vector3)(unsafe.Pointer(&v2)), cgoAllocsUnknown
	__ret := C.Vector3DotProduct(cv1, cv2)
	__v := (float32)(__ret)
	return __v
}

// Vector3Distance function as declared in src/raymath.h:454
func Vector3Distance(v1 Vector3, v2 Vector3) float32 {
	cv1, _ := *(*C.Vector3)(unsafe.Pointer(&v1)), cgoAllocsUnknown
	cv2, _ := *(*C.Vector3)(unsafe.Pointer(&v2)), cgoAllocsUnknown
	__ret := C.Vector3Distance(cv1, cv2)
	__v := (float32)(__ret)
	return __v
}

// Vector3Negate function as declared in src/raymath.h:464
func Vector3Negate(v Vector3) Vector3 {
	cv, _ := *(*C.Vector3)(unsafe.Pointer(&v)), cgoAllocsUnknown
	__ret := C.Vector3Negate(cv)
	__v := *newVector3Ref(unsafe.Pointer(&__ret)).convert()
	return __v
}

// Vector3Divide function as declared in src/raymath.h:471
func Vector3Divide(v1 Vector3, v2 Vector3) Vector3 {
	cv1, _ := *(*C.Vector3)(unsafe.Pointer(&v1)), cgoAllocsUnknown
	cv2, _ := *(*C.Vector3)(unsafe.Pointer(&v2)), cgoAllocsUnknown
	__ret := C.Vector3Divide(cv1, cv2)
	__v := *newVector3Ref(unsafe.Pointer(&__ret)).convert()
	return __v
}

// Vector3Normalize function as declared in src/raymath.h:478
func Vector3Normalize(v Vector3) Vector3 {
	cv, _ := *(*C.Vector3)(unsafe.Pointer(&v)), cgoAllocsUnknown
	__ret := C.Vector3Normalize(cv)
	__v := *newVector3Ref(unsafe.Pointer(&__ret)).convert()
	return __v
}

// Vector3OrthoNormalize function as declared in src/raymath.h:497
func Vector3OrthoNormalize(v1 *Vector3, v2 *Vector3) {
	cv1, _ := (*C.Vector3)(unsafe.Pointer(v1)), cgoAllocsUnknown
	cv2, _ := (*C.Vector3)(unsafe.Pointer(v2)), cgoAllocsUnknown
	C.Vector3OrthoNormalize(cv1, cv2)
}

// Vector3Transform function as declared in src/raymath.h:506
func Vector3Transform(v Vector3, mat Matrix) Vector3 {
	cv, _ := *(*C.Vector3)(unsafe.Pointer(&v)), cgoAllocsUnknown
	cmat, _ := *(*C.Matrix)(unsafe.Pointer(&mat)), cgoAllocsUnknown
	__ret := C.Vector3Transform(cv, cmat)
	__v := *newVector3Ref(unsafe.Pointer(&__ret)).convert()
	return __v
}

// Vector3RotateByQuaternion function as declared in src/raymath.h:521
func Vector3RotateByQuaternion(v Vector3, q Quaternion) Vector3 {
	cv, _ := *(*C.Vector3)(unsafe.Pointer(&v)), cgoAllocsUnknown
	cq, _ := *(*C.Quaternion)(unsafe.Pointer(&q)), cgoAllocsUnknown
	__ret := C.Vector3RotateByQuaternion(cv, cq)
	__v := *newVector3Ref(unsafe.Pointer(&__ret)).convert()
	return __v
}

// Vector3Lerp function as declared in src/raymath.h:533
func Vector3Lerp(v1 Vector3, v2 Vector3, amount float32) Vector3 {
	cv1, _ := *(*C.Vector3)(unsafe.Pointer(&v1)), cgoAllocsUnknown
	cv2, _ := *(*C.Vector3)(unsafe.Pointer(&v2)), cgoAllocsUnknown
	camount, _ := (C.float)(amount), cgoAllocsUnknown
	__ret := C.Vector3Lerp(cv1, cv2, camount)
	__v := *newVector3Ref(unsafe.Pointer(&__ret)).convert()
	return __v
}

// Vector3Reflect function as declared in src/raymath.h:545
func Vector3Reflect(v Vector3, normal Vector3) Vector3 {
	cv, _ := *(*C.Vector3)(unsafe.Pointer(&v)), cgoAllocsUnknown
	cnormal, _ := *(*C.Vector3)(unsafe.Pointer(&normal)), cgoAllocsUnknown
	__ret := C.Vector3Reflect(cv, cnormal)
	__v := *newVector3Ref(unsafe.Pointer(&__ret)).convert()
	return __v
}

// Vector3Min function as declared in src/raymath.h:563
func Vector3Min(v1 Vector3, v2 Vector3) Vector3 {
	cv1, _ := *(*C.Vector3)(unsafe.Pointer(&v1)), cgoAllocsUnknown
	cv2, _ := *(*C.Vector3)(unsafe.Pointer(&v2)), cgoAllocsUnknown
	__ret := C.Vector3Min(cv1, cv2)
	__v := *newVector3Ref(unsafe.Pointer(&__ret)).convert()
	return __v
}

// Vector3Max function as declared in src/raymath.h:575
func Vector3Max(v1 Vector3, v2 Vector3) Vector3 {
	cv1, _ := *(*C.Vector3)(unsafe.Pointer(&v1)), cgoAllocsUnknown
	cv2, _ := *(*C.Vector3)(unsafe.Pointer(&v2)), cgoAllocsUnknown
	__ret := C.Vector3Max(cv1, cv2)
	__v := *newVector3Ref(unsafe.Pointer(&__ret)).convert()
	return __v
}

// Vector3Barycenter function as declared in src/raymath.h:588
func Vector3Barycenter(p Vector3, a Vector3, b Vector3, c Vector3) Vector3 {
	cp, _ := *(*C.Vector3)(unsafe.Pointer(&p)), cgoAllocsUnknown
	ca, _ := *(*C.Vector3)(unsafe.Pointer(&a)), cgoAllocsUnknown
	cb, _ := *(*C.Vector3)(unsafe.Pointer(&b)), cgoAllocsUnknown
	cc, _ := *(*C.Vector3)(unsafe.Pointer(&c)), cgoAllocsUnknown
	__ret := C.Vector3Barycenter(cp, ca, cb, cc)
	__v := *newVector3Ref(unsafe.Pointer(&__ret)).convert()
	return __v
}

// MatrixDeterminant function as declared in src/raymath.h:629
func MatrixDeterminant(mat Matrix) float32 {
	cmat, _ := *(*C.Matrix)(unsafe.Pointer(&mat)), cgoAllocsUnknown
	__ret := C.MatrixDeterminant(cmat)
	__v := (float32)(__ret)
	return __v
}

// MatrixTranspose function as declared in src/raymath.h:655
func MatrixTranspose(mat Matrix) Matrix {
	cmat, _ := *(*C.Matrix)(unsafe.Pointer(&mat)), cgoAllocsUnknown
	__ret := C.MatrixTranspose(cmat)
	__v := *newMatrixRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// MatrixInvert function as declared in src/raymath.h:680
func MatrixInvert(mat Matrix) Matrix {
	cmat, _ := *(*C.Matrix)(unsafe.Pointer(&mat)), cgoAllocsUnknown
	__ret := C.MatrixInvert(cmat)
	__v := *newMatrixRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// MatrixNormalize function as declared in src/raymath.h:727
func MatrixNormalize(mat Matrix) Matrix {
	cmat, _ := *(*C.Matrix)(unsafe.Pointer(&mat)), cgoAllocsUnknown
	__ret := C.MatrixNormalize(cmat)
	__v := *newMatrixRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// MatrixIdentity function as declared in src/raymath.h:754
func MatrixIdentity() Matrix {
	__ret := C.MatrixIdentity()
	__v := *newMatrixRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// MatrixAdd function as declared in src/raymath.h:765
func MatrixAdd(left Matrix, right Matrix) Matrix {
	cleft, _ := *(*C.Matrix)(unsafe.Pointer(&left)), cgoAllocsUnknown
	cright, _ := *(*C.Matrix)(unsafe.Pointer(&right)), cgoAllocsUnknown
	__ret := C.MatrixAdd(cleft, cright)
	__v := *newMatrixRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// MatrixSubtract function as declared in src/raymath.h:790
func MatrixSubtract(left Matrix, right Matrix) Matrix {
	cleft, _ := *(*C.Matrix)(unsafe.Pointer(&left)), cgoAllocsUnknown
	cright, _ := *(*C.Matrix)(unsafe.Pointer(&right)), cgoAllocsUnknown
	__ret := C.MatrixSubtract(cleft, cright)
	__v := *newMatrixRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// MatrixMultiply function as declared in src/raymath.h:816
func MatrixMultiply(left Matrix, right Matrix) Matrix {
	cleft, _ := *(*C.Matrix)(unsafe.Pointer(&left)), cgoAllocsUnknown
	cright, _ := *(*C.Matrix)(unsafe.Pointer(&right)), cgoAllocsUnknown
	__ret := C.MatrixMultiply(cleft, cright)
	__v := *newMatrixRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// MatrixTranslate function as declared in src/raymath.h:841
func MatrixTranslate(x float32, y float32, z float32) Matrix {
	cx, _ := (C.float)(x), cgoAllocsUnknown
	cy, _ := (C.float)(y), cgoAllocsUnknown
	cz, _ := (C.float)(z), cgoAllocsUnknown
	__ret := C.MatrixTranslate(cx, cy, cz)
	__v := *newMatrixRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// MatrixRotate function as declared in src/raymath.h:853
func MatrixRotate(axis Vector3, angle float32) Matrix {
	caxis, _ := *(*C.Vector3)(unsafe.Pointer(&axis)), cgoAllocsUnknown
	cangle, _ := (C.float)(angle), cgoAllocsUnknown
	__ret := C.MatrixRotate(caxis, cangle)
	__v := *newMatrixRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// MatrixRotateX function as declared in src/raymath.h:897
func MatrixRotateX(angle float32) Matrix {
	cangle, _ := (C.float)(angle), cgoAllocsUnknown
	__ret := C.MatrixRotateX(cangle)
	__v := *newMatrixRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// MatrixRotateY function as declared in src/raymath.h:913
func MatrixRotateY(angle float32) Matrix {
	cangle, _ := (C.float)(angle), cgoAllocsUnknown
	__ret := C.MatrixRotateY(cangle)
	__v := *newMatrixRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// MatrixRotateZ function as declared in src/raymath.h:929
func MatrixRotateZ(angle float32) Matrix {
	cangle, _ := (C.float)(angle), cgoAllocsUnknown
	__ret := C.MatrixRotateZ(cangle)
	__v := *newMatrixRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// MatrixRotateXYZ function as declared in src/raymath.h:946
func MatrixRotateXYZ(ang Vector3) Matrix {
	cang, _ := *(*C.Vector3)(unsafe.Pointer(&ang)), cgoAllocsUnknown
	__ret := C.MatrixRotateXYZ(cang)
	__v := *newMatrixRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// MatrixScale function as declared in src/raymath.h:985
func MatrixScale(x float32, y float32, z float32) Matrix {
	cx, _ := (C.float)(x), cgoAllocsUnknown
	cy, _ := (C.float)(y), cgoAllocsUnknown
	cz, _ := (C.float)(z), cgoAllocsUnknown
	__ret := C.MatrixScale(cx, cy, cz)
	__v := *newMatrixRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// MatrixFrustum function as declared in src/raymath.h:996
func MatrixFrustum(left float64, right float64, bottom float64, top float64, near float64, far float64) Matrix {
	cleft, _ := (C.double)(left), cgoAllocsUnknown
	cright, _ := (C.double)(right), cgoAllocsUnknown
	cbottom, _ := (C.double)(bottom), cgoAllocsUnknown
	ctop, _ := (C.double)(top), cgoAllocsUnknown
	cnear, _ := (C.double)(near), cgoAllocsUnknown
	cfar, _ := (C.double)(far), cgoAllocsUnknown
	__ret := C.MatrixFrustum(cleft, cright, cbottom, ctop, cnear, cfar)
	__v := *newMatrixRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// MatrixPerspective function as declared in src/raymath.h:1029
func MatrixPerspective(fovy float64, aspect float64, near float64, far float64) Matrix {
	cfovy, _ := (C.double)(fovy), cgoAllocsUnknown
	caspect, _ := (C.double)(aspect), cgoAllocsUnknown
	cnear, _ := (C.double)(near), cgoAllocsUnknown
	cfar, _ := (C.double)(far), cgoAllocsUnknown
	__ret := C.MatrixPerspective(cfovy, caspect, cnear, cfar)
	__v := *newMatrixRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// MatrixOrtho function as declared in src/raymath.h:1039
func MatrixOrtho(left float64, right float64, bottom float64, top float64, near float64, far float64) Matrix {
	cleft, _ := (C.double)(left), cgoAllocsUnknown
	cright, _ := (C.double)(right), cgoAllocsUnknown
	cbottom, _ := (C.double)(bottom), cgoAllocsUnknown
	ctop, _ := (C.double)(top), cgoAllocsUnknown
	cnear, _ := (C.double)(near), cgoAllocsUnknown
	cfar, _ := (C.double)(far), cgoAllocsUnknown
	__ret := C.MatrixOrtho(cleft, cright, cbottom, ctop, cnear, cfar)
	__v := *newMatrixRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// MatrixLookAt function as declared in src/raymath.h:1068
func MatrixLookAt(eye Vector3, target Vector3, up Vector3) Matrix {
	ceye, _ := *(*C.Vector3)(unsafe.Pointer(&eye)), cgoAllocsUnknown
	ctarget, _ := *(*C.Vector3)(unsafe.Pointer(&target)), cgoAllocsUnknown
	cup, _ := *(*C.Vector3)(unsafe.Pointer(&up)), cgoAllocsUnknown
	__ret := C.MatrixLookAt(ceye, ctarget, cup)
	__v := *newMatrixRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// QuaternionAdd function as declared in src/raymath.h:1128
func QuaternionAdd(q1 Quaternion, q2 Quaternion) Quaternion {
	cq1, _ := *(*C.Quaternion)(unsafe.Pointer(&q1)), cgoAllocsUnknown
	cq2, _ := *(*C.Quaternion)(unsafe.Pointer(&q2)), cgoAllocsUnknown
	__ret := C.QuaternionAdd(cq1, cq2)
	__v := *newQuaternionRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// QuaternionAddValue function as declared in src/raymath.h:1135
func QuaternionAddValue(q Quaternion, add float32) Quaternion {
	cq, _ := *(*C.Quaternion)(unsafe.Pointer(&q)), cgoAllocsUnknown
	cadd, _ := (C.float)(add), cgoAllocsUnknown
	__ret := C.QuaternionAddValue(cq, cadd)
	__v := *newQuaternionRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// QuaternionSubtract function as declared in src/raymath.h:1142
func QuaternionSubtract(q1 Quaternion, q2 Quaternion) Quaternion {
	cq1, _ := *(*C.Quaternion)(unsafe.Pointer(&q1)), cgoAllocsUnknown
	cq2, _ := *(*C.Quaternion)(unsafe.Pointer(&q2)), cgoAllocsUnknown
	__ret := C.QuaternionSubtract(cq1, cq2)
	__v := *newQuaternionRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// QuaternionSubtractValue function as declared in src/raymath.h:1149
func QuaternionSubtractValue(q Quaternion, sub float32) Quaternion {
	cq, _ := *(*C.Quaternion)(unsafe.Pointer(&q)), cgoAllocsUnknown
	csub, _ := (C.float)(sub), cgoAllocsUnknown
	__ret := C.QuaternionSubtractValue(cq, csub)
	__v := *newQuaternionRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// QuaternionIdentity function as declared in src/raymath.h:1156
func QuaternionIdentity() Quaternion {
	__ret := C.QuaternionIdentity()
	__v := *newQuaternionRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// QuaternionLength function as declared in src/raymath.h:1163
func QuaternionLength(q Quaternion) float32 {
	cq, _ := *(*C.Quaternion)(unsafe.Pointer(&q)), cgoAllocsUnknown
	__ret := C.QuaternionLength(cq)
	__v := (float32)(__ret)
	return __v
}

// QuaternionNormalize function as declared in src/raymath.h:1170
func QuaternionNormalize(q Quaternion) Quaternion {
	cq, _ := *(*C.Quaternion)(unsafe.Pointer(&q)), cgoAllocsUnknown
	__ret := C.QuaternionNormalize(cq)
	__v := *newQuaternionRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// QuaternionInvert function as declared in src/raymath.h:1188
func QuaternionInvert(q Quaternion) Quaternion {
	cq, _ := *(*C.Quaternion)(unsafe.Pointer(&q)), cgoAllocsUnknown
	__ret := C.QuaternionInvert(cq)
	__v := *newQuaternionRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// QuaternionMultiply function as declared in src/raymath.h:1208
func QuaternionMultiply(q1 Quaternion, q2 Quaternion) Quaternion {
	cq1, _ := *(*C.Quaternion)(unsafe.Pointer(&q1)), cgoAllocsUnknown
	cq2, _ := *(*C.Quaternion)(unsafe.Pointer(&q2)), cgoAllocsUnknown
	__ret := C.QuaternionMultiply(cq1, cq2)
	__v := *newQuaternionRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// QuaternionScale function as declared in src/raymath.h:1224
func QuaternionScale(q Quaternion, mul float32) Quaternion {
	cq, _ := *(*C.Quaternion)(unsafe.Pointer(&q)), cgoAllocsUnknown
	cmul, _ := (C.float)(mul), cgoAllocsUnknown
	__ret := C.QuaternionScale(cq, cmul)
	__v := *newQuaternionRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// QuaternionDivide function as declared in src/raymath.h:1239
func QuaternionDivide(q1 Quaternion, q2 Quaternion) Quaternion {
	cq1, _ := *(*C.Quaternion)(unsafe.Pointer(&q1)), cgoAllocsUnknown
	cq2, _ := *(*C.Quaternion)(unsafe.Pointer(&q2)), cgoAllocsUnknown
	__ret := C.QuaternionDivide(cq1, cq2)
	__v := *newQuaternionRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// QuaternionLerp function as declared in src/raymath.h:1246
func QuaternionLerp(q1 Quaternion, q2 Quaternion, amount float32) Quaternion {
	cq1, _ := *(*C.Quaternion)(unsafe.Pointer(&q1)), cgoAllocsUnknown
	cq2, _ := *(*C.Quaternion)(unsafe.Pointer(&q2)), cgoAllocsUnknown
	camount, _ := (C.float)(amount), cgoAllocsUnknown
	__ret := C.QuaternionLerp(cq1, cq2, camount)
	__v := *newQuaternionRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// QuaternionNlerp function as declared in src/raymath.h:1259
func QuaternionNlerp(q1 Quaternion, q2 Quaternion, amount float32) Quaternion {
	cq1, _ := *(*C.Quaternion)(unsafe.Pointer(&q1)), cgoAllocsUnknown
	cq2, _ := *(*C.Quaternion)(unsafe.Pointer(&q2)), cgoAllocsUnknown
	camount, _ := (C.float)(amount), cgoAllocsUnknown
	__ret := C.QuaternionNlerp(cq1, cq2, camount)
	__v := *newQuaternionRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// QuaternionSlerp function as declared in src/raymath.h:1268
func QuaternionSlerp(q1 Quaternion, q2 Quaternion, amount float32) Quaternion {
	cq1, _ := *(*C.Quaternion)(unsafe.Pointer(&q1)), cgoAllocsUnknown
	cq2, _ := *(*C.Quaternion)(unsafe.Pointer(&q2)), cgoAllocsUnknown
	camount, _ := (C.float)(amount), cgoAllocsUnknown
	__ret := C.QuaternionSlerp(cq1, cq2, camount)
	__v := *newQuaternionRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// QuaternionFromVector3ToVector3 function as declared in src/raymath.h:1304
func QuaternionFromVector3ToVector3(from Vector3, to Vector3) Quaternion {
	cfrom, _ := *(*C.Vector3)(unsafe.Pointer(&from)), cgoAllocsUnknown
	cto, _ := *(*C.Vector3)(unsafe.Pointer(&to)), cgoAllocsUnknown
	__ret := C.QuaternionFromVector3ToVector3(cfrom, cto)
	__v := *newQuaternionRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// QuaternionFromMatrix function as declared in src/raymath.h:1326
func QuaternionFromMatrix(mat Matrix) Quaternion {
	cmat, _ := *(*C.Matrix)(unsafe.Pointer(&mat)), cgoAllocsUnknown
	__ret := C.QuaternionFromMatrix(cmat)
	__v := *newQuaternionRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// QuaternionToMatrix function as declared in src/raymath.h:1360
func QuaternionToMatrix(q Quaternion) Matrix {
	cq, _ := *(*C.Quaternion)(unsafe.Pointer(&q)), cgoAllocsUnknown
	__ret := C.QuaternionToMatrix(cq)
	__v := *newMatrixRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// QuaternionFromAxisAngle function as declared in src/raymath.h:1386
func QuaternionFromAxisAngle(axis Vector3, angle float32) Quaternion {
	caxis, _ := *(*C.Vector3)(unsafe.Pointer(&axis)), cgoAllocsUnknown
	cangle, _ := (C.float)(angle), cgoAllocsUnknown
	__ret := C.QuaternionFromAxisAngle(caxis, cangle)
	__v := *newQuaternionRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// QuaternionToAxisAngle function as declared in src/raymath.h:1410
func QuaternionToAxisAngle(q Quaternion, outAxis *Vector3, outAngle *float32) {
	cq, _ := *(*C.Quaternion)(unsafe.Pointer(&q)), cgoAllocsUnknown
	coutAxis, _ := (*C.Vector3)(unsafe.Pointer(outAxis)), cgoAllocsUnknown
	coutAngle, _ := (*C.float)(unsafe.Pointer(outAngle)), cgoAllocsUnknown
	C.QuaternionToAxisAngle(cq, coutAxis, coutAngle)
}

// QuaternionFromEuler function as declared in src/raymath.h:1436
func QuaternionFromEuler(roll float32, pitch float32, yaw float32) Quaternion {
	croll, _ := (C.float)(roll), cgoAllocsUnknown
	cpitch, _ := (C.float)(pitch), cgoAllocsUnknown
	cyaw, _ := (C.float)(yaw), cgoAllocsUnknown
	__ret := C.QuaternionFromEuler(croll, cpitch, cyaw)
	__v := *newQuaternionRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// QuaternionToEuler function as declared in src/raymath.h:1457
func QuaternionToEuler(q Quaternion) Vector3 {
	cq, _ := *(*C.Quaternion)(unsafe.Pointer(&q)), cgoAllocsUnknown
	__ret := C.QuaternionToEuler(cq)
	__v := *newVector3Ref(unsafe.Pointer(&__ret)).convert()
	return __v
}

// QuaternionTransform function as declared in src/raymath.h:1481
func QuaternionTransform(q Quaternion, mat Matrix) Quaternion {
	cq, _ := *(*C.Quaternion)(unsafe.Pointer(&q)), cgoAllocsUnknown
	cmat, _ := *(*C.Matrix)(unsafe.Pointer(&mat)), cgoAllocsUnknown
	__ret := C.QuaternionTransform(cq, cmat)
	__v := *newQuaternionRef(unsafe.Pointer(&__ret)).convert()
	return __v
}

// EaseLinearNone function as declared in src/easings.h:104
func EaseLinearNone(t float32, b float32, c float32, d float32) float32 {
	ct, _ := (C.float)(t), cgoAllocsUnknown
	cb, _ := (C.float)(b), cgoAllocsUnknown
	cc, _ := (C.float)(c), cgoAllocsUnknown
	cd, _ := (C.float)(d), cgoAllocsUnknown
	__ret := C.EaseLinearNone(ct, cb, cc, cd)
	__v := (float32)(__ret)
	return __v
}

// EaseLinearIn function as declared in src/easings.h:105
func EaseLinearIn(t float32, b float32, c float32, d float32) float32 {
	ct, _ := (C.float)(t), cgoAllocsUnknown
	cb, _ := (C.float)(b), cgoAllocsUnknown
	cc, _ := (C.float)(c), cgoAllocsUnknown
	cd, _ := (C.float)(d), cgoAllocsUnknown
	__ret := C.EaseLinearIn(ct, cb, cc, cd)
	__v := (float32)(__ret)
	return __v
}

// EaseLinearOut function as declared in src/easings.h:106
func EaseLinearOut(t float32, b float32, c float32, d float32) float32 {
	ct, _ := (C.float)(t), cgoAllocsUnknown
	cb, _ := (C.float)(b), cgoAllocsUnknown
	cc, _ := (C.float)(c), cgoAllocsUnknown
	cd, _ := (C.float)(d), cgoAllocsUnknown
	__ret := C.EaseLinearOut(ct, cb, cc, cd)
	__v := (float32)(__ret)
	return __v
}

// EaseLinearInOut function as declared in src/easings.h:107
func EaseLinearInOut(t float32, b float32, c float32, d float32) float32 {
	ct, _ := (C.float)(t), cgoAllocsUnknown
	cb, _ := (C.float)(b), cgoAllocsUnknown
	cc, _ := (C.float)(c), cgoAllocsUnknown
	cd, _ := (C.float)(d), cgoAllocsUnknown
	__ret := C.EaseLinearInOut(ct, cb, cc, cd)
	__v := (float32)(__ret)
	return __v
}

// EaseSineIn function as declared in src/easings.h:110
func EaseSineIn(t float32, b float32, c float32, d float32) float32 {
	ct, _ := (C.float)(t), cgoAllocsUnknown
	cb, _ := (C.float)(b), cgoAllocsUnknown
	cc, _ := (C.float)(c), cgoAllocsUnknown
	cd, _ := (C.float)(d), cgoAllocsUnknown
	__ret := C.EaseSineIn(ct, cb, cc, cd)
	__v := (float32)(__ret)
	return __v
}

// EaseSineOut function as declared in src/easings.h:111
func EaseSineOut(t float32, b float32, c float32, d float32) float32 {
	ct, _ := (C.float)(t), cgoAllocsUnknown
	cb, _ := (C.float)(b), cgoAllocsUnknown
	cc, _ := (C.float)(c), cgoAllocsUnknown
	cd, _ := (C.float)(d), cgoAllocsUnknown
	__ret := C.EaseSineOut(ct, cb, cc, cd)
	__v := (float32)(__ret)
	return __v
}

// EaseSineInOut function as declared in src/easings.h:112
func EaseSineInOut(t float32, b float32, c float32, d float32) float32 {
	ct, _ := (C.float)(t), cgoAllocsUnknown
	cb, _ := (C.float)(b), cgoAllocsUnknown
	cc, _ := (C.float)(c), cgoAllocsUnknown
	cd, _ := (C.float)(d), cgoAllocsUnknown
	__ret := C.EaseSineInOut(ct, cb, cc, cd)
	__v := (float32)(__ret)
	return __v
}

// EaseCircIn function as declared in src/easings.h:115
func EaseCircIn(t float32, b float32, c float32, d float32) float32 {
	ct, _ := (C.float)(t), cgoAllocsUnknown
	cb, _ := (C.float)(b), cgoAllocsUnknown
	cc, _ := (C.float)(c), cgoAllocsUnknown
	cd, _ := (C.float)(d), cgoAllocsUnknown
	__ret := C.EaseCircIn(ct, cb, cc, cd)
	__v := (float32)(__ret)
	return __v
}

// EaseCircOut function as declared in src/easings.h:116
func EaseCircOut(t float32, b float32, c float32, d float32) float32 {
	ct, _ := (C.float)(t), cgoAllocsUnknown
	cb, _ := (C.float)(b), cgoAllocsUnknown
	cc, _ := (C.float)(c), cgoAllocsUnknown
	cd, _ := (C.float)(d), cgoAllocsUnknown
	__ret := C.EaseCircOut(ct, cb, cc, cd)
	__v := (float32)(__ret)
	return __v
}

// EaseCircInOut function as declared in src/easings.h:117
func EaseCircInOut(t float32, b float32, c float32, d float32) float32 {
	ct, _ := (C.float)(t), cgoAllocsUnknown
	cb, _ := (C.float)(b), cgoAllocsUnknown
	cc, _ := (C.float)(c), cgoAllocsUnknown
	cd, _ := (C.float)(d), cgoAllocsUnknown
	__ret := C.EaseCircInOut(ct, cb, cc, cd)
	__v := (float32)(__ret)
	return __v
}

// EaseCubicIn function as declared in src/easings.h:124
func EaseCubicIn(t float32, b float32, c float32, d float32) float32 {
	ct, _ := (C.float)(t), cgoAllocsUnknown
	cb, _ := (C.float)(b), cgoAllocsUnknown
	cc, _ := (C.float)(c), cgoAllocsUnknown
	cd, _ := (C.float)(d), cgoAllocsUnknown
	__ret := C.EaseCubicIn(ct, cb, cc, cd)
	__v := (float32)(__ret)
	return __v
}

// EaseCubicOut function as declared in src/easings.h:125
func EaseCubicOut(t float32, b float32, c float32, d float32) float32 {
	ct, _ := (C.float)(t), cgoAllocsUnknown
	cb, _ := (C.float)(b), cgoAllocsUnknown
	cc, _ := (C.float)(c), cgoAllocsUnknown
	cd, _ := (C.float)(d), cgoAllocsUnknown
	__ret := C.EaseCubicOut(ct, cb, cc, cd)
	__v := (float32)(__ret)
	return __v
}

// EaseCubicInOut function as declared in src/easings.h:126
func EaseCubicInOut(t float32, b float32, c float32, d float32) float32 {
	ct, _ := (C.float)(t), cgoAllocsUnknown
	cb, _ := (C.float)(b), cgoAllocsUnknown
	cc, _ := (C.float)(c), cgoAllocsUnknown
	cd, _ := (C.float)(d), cgoAllocsUnknown
	__ret := C.EaseCubicInOut(ct, cb, cc, cd)
	__v := (float32)(__ret)
	return __v
}

// EaseQuadIn function as declared in src/easings.h:133
func EaseQuadIn(t float32, b float32, c float32, d float32) float32 {
	ct, _ := (C.float)(t), cgoAllocsUnknown
	cb, _ := (C.float)(b), cgoAllocsUnknown
	cc, _ := (C.float)(c), cgoAllocsUnknown
	cd, _ := (C.float)(d), cgoAllocsUnknown
	__ret := C.EaseQuadIn(ct, cb, cc, cd)
	__v := (float32)(__ret)
	return __v
}

// EaseQuadOut function as declared in src/easings.h:134
func EaseQuadOut(t float32, b float32, c float32, d float32) float32 {
	ct, _ := (C.float)(t), cgoAllocsUnknown
	cb, _ := (C.float)(b), cgoAllocsUnknown
	cc, _ := (C.float)(c), cgoAllocsUnknown
	cd, _ := (C.float)(d), cgoAllocsUnknown
	__ret := C.EaseQuadOut(ct, cb, cc, cd)
	__v := (float32)(__ret)
	return __v
}

// EaseQuadInOut function as declared in src/easings.h:135
func EaseQuadInOut(t float32, b float32, c float32, d float32) float32 {
	ct, _ := (C.float)(t), cgoAllocsUnknown
	cb, _ := (C.float)(b), cgoAllocsUnknown
	cc, _ := (C.float)(c), cgoAllocsUnknown
	cd, _ := (C.float)(d), cgoAllocsUnknown
	__ret := C.EaseQuadInOut(ct, cb, cc, cd)
	__v := (float32)(__ret)
	return __v
}

// EaseExpoIn function as declared in src/easings.h:142
func EaseExpoIn(t float32, b float32, c float32, d float32) float32 {
	ct, _ := (C.float)(t), cgoAllocsUnknown
	cb, _ := (C.float)(b), cgoAllocsUnknown
	cc, _ := (C.float)(c), cgoAllocsUnknown
	cd, _ := (C.float)(d), cgoAllocsUnknown
	__ret := C.EaseExpoIn(ct, cb, cc, cd)
	__v := (float32)(__ret)
	return __v
}

// EaseExpoOut function as declared in src/easings.h:143
func EaseExpoOut(t float32, b float32, c float32, d float32) float32 {
	ct, _ := (C.float)(t), cgoAllocsUnknown
	cb, _ := (C.float)(b), cgoAllocsUnknown
	cc, _ := (C.float)(c), cgoAllocsUnknown
	cd, _ := (C.float)(d), cgoAllocsUnknown
	__ret := C.EaseExpoOut(ct, cb, cc, cd)
	__v := (float32)(__ret)
	return __v
}

// EaseExpoInOut function as declared in src/easings.h:144
func EaseExpoInOut(t float32, b float32, c float32, d float32) float32 {
	ct, _ := (C.float)(t), cgoAllocsUnknown
	cb, _ := (C.float)(b), cgoAllocsUnknown
	cc, _ := (C.float)(c), cgoAllocsUnknown
	cd, _ := (C.float)(d), cgoAllocsUnknown
	__ret := C.EaseExpoInOut(ct, cb, cc, cd)
	__v := (float32)(__ret)
	return __v
}

// EaseBackIn function as declared in src/easings.h:154
func EaseBackIn(t float32, b float32, c float32, d float32) float32 {
	ct, _ := (C.float)(t), cgoAllocsUnknown
	cb, _ := (C.float)(b), cgoAllocsUnknown
	cc, _ := (C.float)(c), cgoAllocsUnknown
	cd, _ := (C.float)(d), cgoAllocsUnknown
	__ret := C.EaseBackIn(ct, cb, cc, cd)
	__v := (float32)(__ret)
	return __v
}

// EaseBackOut function as declared in src/easings.h:161
func EaseBackOut(t float32, b float32, c float32, d float32) float32 {
	ct, _ := (C.float)(t), cgoAllocsUnknown
	cb, _ := (C.float)(b), cgoAllocsUnknown
	cc, _ := (C.float)(c), cgoAllocsUnknown
	cd, _ := (C.float)(d), cgoAllocsUnknown
	__ret := C.EaseBackOut(ct, cb, cc, cd)
	__v := (float32)(__ret)
	return __v
}

// EaseBackInOut function as declared in src/easings.h:168
func EaseBackInOut(t float32, b float32, c float32, d float32) float32 {
	ct, _ := (C.float)(t), cgoAllocsUnknown
	cb, _ := (C.float)(b), cgoAllocsUnknown
	cc, _ := (C.float)(c), cgoAllocsUnknown
	cd, _ := (C.float)(d), cgoAllocsUnknown
	__ret := C.EaseBackInOut(ct, cb, cc, cd)
	__v := (float32)(__ret)
	return __v
}

// EaseBounceOut function as declared in src/easings.h:183
func EaseBounceOut(t float32, b float32, c float32, d float32) float32 {
	ct, _ := (C.float)(t), cgoAllocsUnknown
	cb, _ := (C.float)(b), cgoAllocsUnknown
	cc, _ := (C.float)(c), cgoAllocsUnknown
	cd, _ := (C.float)(d), cgoAllocsUnknown
	__ret := C.EaseBounceOut(ct, cb, cc, cd)
	__v := (float32)(__ret)
	return __v
}

// EaseBounceIn function as declared in src/easings.h:206
func EaseBounceIn(t float32, b float32, c float32, d float32) float32 {
	ct, _ := (C.float)(t), cgoAllocsUnknown
	cb, _ := (C.float)(b), cgoAllocsUnknown
	cc, _ := (C.float)(c), cgoAllocsUnknown
	cd, _ := (C.float)(d), cgoAllocsUnknown
	__ret := C.EaseBounceIn(ct, cb, cc, cd)
	__v := (float32)(__ret)
	return __v
}

// EaseBounceInOut function as declared in src/easings.h:207
func EaseBounceInOut(t float32, b float32, c float32, d float32) float32 {
	ct, _ := (C.float)(t), cgoAllocsUnknown
	cb, _ := (C.float)(b), cgoAllocsUnknown
	cc, _ := (C.float)(c), cgoAllocsUnknown
	cd, _ := (C.float)(d), cgoAllocsUnknown
	__ret := C.EaseBounceInOut(ct, cb, cc, cd)
	__v := (float32)(__ret)
	return __v
}

// EaseElasticIn function as declared in src/easings.h:214
func EaseElasticIn(t float32, b float32, c float32, d float32) float32 {
	ct, _ := (C.float)(t), cgoAllocsUnknown
	cb, _ := (C.float)(b), cgoAllocsUnknown
	cc, _ := (C.float)(c), cgoAllocsUnknown
	cd, _ := (C.float)(d), cgoAllocsUnknown
	__ret := C.EaseElasticIn(ct, cb, cc, cd)
	__v := (float32)(__ret)
	return __v
}

// EaseElasticOut function as declared in src/easings.h:227
func EaseElasticOut(t float32, b float32, c float32, d float32) float32 {
	ct, _ := (C.float)(t), cgoAllocsUnknown
	cb, _ := (C.float)(b), cgoAllocsUnknown
	cc, _ := (C.float)(c), cgoAllocsUnknown
	cd, _ := (C.float)(d), cgoAllocsUnknown
	__ret := C.EaseElasticOut(ct, cb, cc, cd)
	__v := (float32)(__ret)
	return __v
}

// EaseElasticInOut function as declared in src/easings.h:239
func EaseElasticInOut(t float32, b float32, c float32, d float32) float32 {
	ct, _ := (C.float)(t), cgoAllocsUnknown
	cb, _ := (C.float)(b), cgoAllocsUnknown
	cc, _ := (C.float)(c), cgoAllocsUnknown
	cd, _ := (C.float)(d), cgoAllocsUnknown
	__ret := C.EaseElasticInOut(ct, cb, cc, cd)
	__v := (float32)(__ret)
	return __v
}
